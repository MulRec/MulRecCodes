# Generated from PhpParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,244,1943,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        1,0,3,0,276,8,0,1,0,1,0,5,0,280,8,0,10,0,12,0,283,9,0,1,0,1,0,1,
        1,4,1,288,8,1,11,1,12,1,289,1,1,3,1,293,8,1,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,5,2,317,8,2,10,2,12,2,320,9,2,1,2,3,2,323,8,2,1,3,4,3,326,8,
        3,11,3,12,3,327,1,4,5,4,331,8,4,10,4,12,4,334,9,4,1,4,4,4,337,8,
        4,11,4,12,4,338,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        3,6,353,8,6,1,7,1,7,3,7,357,8,7,1,7,1,7,1,7,1,8,3,8,363,8,8,1,8,
        1,8,1,8,3,8,368,8,8,1,8,5,8,371,8,8,10,8,12,8,374,9,8,1,9,1,9,1,
        10,1,10,3,10,380,8,10,1,10,1,10,5,10,384,8,10,10,10,12,10,387,9,
        10,1,10,1,10,1,10,1,10,3,10,393,8,10,1,11,1,11,1,11,1,11,1,11,3,
        11,400,8,11,1,12,3,12,403,8,12,1,12,1,12,3,12,407,8,12,1,12,1,12,
        3,12,411,8,12,1,12,1,12,1,12,1,12,1,12,3,12,418,8,12,1,12,3,12,421,
        8,12,1,12,1,12,1,13,3,13,426,8,13,1,13,3,13,429,8,13,1,13,3,13,432,
        8,13,1,13,3,13,435,8,13,1,13,1,13,1,13,3,13,440,8,13,1,13,1,13,3,
        13,444,8,13,1,13,1,13,3,13,448,8,13,1,13,1,13,1,13,3,13,453,8,13,
        1,13,1,13,3,13,457,8,13,3,13,459,8,13,1,13,1,13,5,13,463,8,13,10,
        13,12,13,466,9,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,5,15,475,8,
        15,10,15,12,15,478,9,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,3,16,494,8,16,1,17,1,17,1,17,5,17,
        499,8,17,10,17,12,17,502,9,17,1,18,1,18,1,18,5,18,507,8,18,10,18,
        12,18,510,9,18,1,19,3,19,513,8,19,1,19,1,19,1,20,3,20,518,8,20,1,
        20,1,20,1,20,1,20,3,20,524,8,20,1,21,1,21,1,21,1,21,5,21,530,8,21,
        10,21,12,21,533,9,21,1,21,1,21,1,22,4,22,538,8,22,11,22,12,22,539,
        1,23,1,23,1,23,1,23,3,23,546,8,23,1,23,1,23,1,23,5,23,551,8,23,10,
        23,12,23,554,9,23,1,23,1,23,1,24,1,24,3,24,560,8,24,1,25,5,25,563,
        8,25,10,25,12,25,566,9,25,1,26,1,26,1,26,3,26,571,8,26,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,
        600,8,27,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,5,30,
        612,8,30,10,30,12,30,615,9,30,1,30,3,30,618,8,30,1,30,1,30,1,30,
        1,30,1,30,5,30,625,8,30,10,30,12,30,628,9,30,1,30,3,30,631,8,30,
        1,30,1,30,1,30,3,30,636,8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
        1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,3,35,662,8,35,1,36,1,36,1,36,1,36,1,36,1,36,
        1,37,1,37,1,37,3,37,673,8,37,1,37,1,37,3,37,677,8,37,1,37,1,37,3,
        37,681,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,690,8,37,1,38,
        1,38,1,39,1,39,1,40,1,40,1,40,1,40,3,40,700,8,40,1,40,5,40,703,8,
        40,10,40,12,40,706,9,40,1,40,1,40,1,40,3,40,711,8,40,1,40,5,40,714,
        8,40,10,40,12,40,717,9,40,1,40,1,40,3,40,721,8,40,1,41,1,41,1,41,
        3,41,726,8,41,1,41,4,41,729,8,41,11,41,12,41,730,1,41,1,41,1,42,
        1,42,3,42,737,8,42,1,42,1,42,1,43,1,43,3,43,743,8,43,1,43,1,43,1,
        44,1,44,3,44,749,8,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,
        46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,3,47,773,8,47,1,47,1,47,1,47,3,47,778,8,47,1,47,3,47,781,8,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,791,8,47,1,47,3,47,
        794,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        3,47,807,8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,815,8,47,1,48,1,
        48,1,48,4,48,820,8,48,11,48,12,48,821,1,48,3,48,825,8,48,1,48,5,
        48,828,8,48,10,48,12,48,831,9,48,1,48,3,48,834,8,48,1,49,1,49,1,
        49,1,49,1,49,5,49,841,8,49,10,49,12,49,844,9,49,1,49,3,49,847,8,
        49,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,
        52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,873,
        8,53,1,54,4,54,876,8,54,11,54,12,54,877,1,55,1,55,1,55,5,55,883,
        8,55,10,55,12,55,886,9,55,1,56,1,56,1,56,1,56,3,56,892,8,56,1,56,
        1,56,1,56,1,56,1,56,1,56,3,56,900,8,56,1,57,3,57,903,8,57,1,57,1,
        57,5,57,907,8,57,10,57,12,57,910,9,57,1,57,3,57,913,8,57,1,58,3,
        58,916,8,58,1,58,5,58,919,8,58,10,58,12,58,922,9,58,1,58,3,58,925,
        8,58,1,58,3,58,928,8,58,1,58,3,58,931,8,58,1,58,3,58,934,8,58,1,
        58,1,58,1,59,1,59,1,59,1,59,3,59,942,8,59,1,59,1,59,1,59,5,59,947,
        8,59,10,59,12,59,950,9,59,1,60,1,60,1,60,1,60,5,60,956,8,60,10,60,
        12,60,959,9,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        3,61,971,8,61,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,5,63,981,8,
        63,10,63,12,63,984,9,63,1,63,1,63,1,64,3,64,989,8,64,1,64,1,64,3,
        64,993,8,64,1,64,1,64,1,64,5,64,998,8,64,10,64,12,64,1001,9,64,1,
        64,1,64,1,64,3,64,1006,8,64,1,64,1,64,3,64,1010,8,64,1,64,1,64,1,
        64,5,64,1015,8,64,10,64,12,64,1018,9,64,1,64,1,64,1,64,1,64,3,64,
        1024,8,64,1,64,1,64,3,64,1028,8,64,1,64,1,64,1,64,1,64,1,64,3,64,
        1035,8,64,1,64,1,64,3,64,1039,8,64,3,64,1041,8,64,1,64,1,64,1,64,
        1,64,3,64,1047,8,64,1,65,1,65,1,65,5,65,1052,8,65,10,65,12,65,1055,
        9,65,1,65,3,65,1058,8,65,1,66,1,66,3,66,1062,8,66,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,3,68,1075,8,68,1,68,3,68,
        1078,8,68,1,68,1,68,1,69,1,69,1,69,3,69,1085,8,69,1,69,1,69,1,70,
        1,70,1,70,3,70,1092,8,70,1,71,1,71,3,71,1096,8,71,1,71,1,71,1,72,
        1,72,3,72,1102,8,72,1,73,1,73,3,73,1106,8,73,1,74,4,74,1109,8,74,
        11,74,12,74,1110,1,75,1,75,1,75,3,75,1116,8,75,1,76,1,76,1,76,1,
        76,1,77,3,77,1123,8,77,1,77,1,77,1,77,1,77,5,77,1129,8,77,10,77,
        12,77,1132,9,77,1,77,1,77,1,78,1,78,1,78,1,78,3,78,1140,8,78,1,78,
        1,78,3,78,1144,8,78,1,78,1,78,5,78,1148,8,78,10,78,12,78,1151,9,
        78,1,78,1,78,1,79,1,79,1,79,1,79,3,79,1159,8,79,1,79,1,79,1,79,3,
        79,1164,8,79,1,79,1,79,1,79,1,79,1,79,3,79,1171,8,79,1,80,1,80,1,
        80,5,80,1176,8,80,10,80,12,80,1179,9,80,1,81,1,81,1,81,3,81,1184,
        8,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1247,8,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,3,82,1264,8,82,1,82,1,82,1,82,1,82,1,82,3,82,1271,8,82,
        1,82,1,82,1,82,3,82,1276,8,82,3,82,1278,8,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,3,82,1316,8,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,5,82,1338,8,82,10,82,12,82,1341,9,82,1,83,1,83,3,
        83,1345,8,83,1,84,1,84,1,84,3,84,1350,8,84,1,84,1,84,1,84,3,84,1355,
        8,84,1,84,3,84,1358,8,84,1,84,1,84,1,84,1,84,3,84,1364,8,84,1,85,
        1,85,5,85,1368,8,85,10,85,12,85,1371,9,85,1,85,1,85,4,85,1375,8,
        85,11,85,12,85,1376,1,85,5,85,1380,8,85,10,85,12,85,1383,9,85,1,
        85,5,85,1386,8,85,10,85,12,85,1389,9,85,1,85,1,85,1,85,1,85,1,85,
        4,85,1396,8,85,11,85,12,85,1397,1,85,5,85,1401,8,85,10,85,12,85,
        1404,9,85,1,85,3,85,1407,8,85,1,85,1,85,3,85,1411,8,85,1,86,3,86,
        1414,8,86,1,86,1,86,1,87,1,87,1,87,3,87,1421,8,87,1,87,3,87,1424,
        8,87,1,87,1,87,1,88,3,88,1429,8,88,1,88,1,88,3,88,1433,8,88,1,88,
        1,88,1,88,1,88,3,88,1439,8,88,1,88,1,88,3,88,1443,8,88,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1454,8,88,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,5,89,1464,8,89,10,89,12,89,1467,9,89,1,
        89,3,89,1470,8,89,1,89,1,89,1,90,1,90,1,90,5,90,1477,8,90,10,90,
        12,90,1480,9,90,1,90,1,90,1,90,1,91,1,91,1,91,3,91,1488,8,91,1,92,
        1,92,1,93,1,93,1,93,1,93,3,93,1496,8,93,1,93,1,93,3,93,1500,8,93,
        1,94,1,94,1,94,5,94,1505,8,94,10,94,12,94,1508,9,94,1,94,3,94,1511,
        8,94,1,95,1,95,1,95,3,95,1516,8,95,1,95,1,95,1,95,3,95,1521,8,95,
        1,95,1,95,3,95,1525,8,95,1,96,1,96,1,96,1,96,1,96,5,96,1532,8,96,
        10,96,12,96,1535,9,96,1,96,1,96,1,97,3,97,1540,8,97,1,97,1,97,1,
        98,1,98,3,98,1546,8,98,1,98,3,98,1549,8,98,1,99,1,99,3,99,1553,8,
        99,1,99,3,99,1556,8,99,1,99,1,99,1,99,3,99,1561,8,99,1,100,3,100,
        1564,8,100,1,100,3,100,1567,8,100,1,100,3,100,1570,8,100,1,100,3,
        100,1573,8,100,1,100,1,100,3,100,1577,8,100,1,100,1,100,3,100,1581,
        8,100,1,100,1,100,3,100,1585,8,100,1,100,1,100,1,100,3,100,1590,
        8,100,1,100,1,100,3,100,1594,8,100,3,100,1596,8,100,1,100,1,100,
        5,100,1600,8,100,10,100,12,100,1603,9,100,1,100,1,100,1,101,1,101,
        1,101,5,101,1610,8,101,10,101,12,101,1613,9,101,1,102,3,102,1616,
        8,102,1,102,3,102,1619,8,102,1,102,1,102,1,103,1,103,1,103,1,103,
        5,103,1627,8,103,10,103,12,103,1630,9,103,1,103,1,103,3,103,1634,
        8,103,3,103,1636,8,103,1,104,1,104,1,104,3,104,1641,8,104,1,104,
        1,104,1,104,1,104,5,104,1647,8,104,10,104,12,104,1650,9,104,1,104,
        3,104,1653,8,104,1,104,1,104,3,104,1657,8,104,1,105,1,105,1,105,
        5,105,1662,8,105,10,105,12,105,1665,9,105,1,106,1,106,1,106,1,106,
        5,106,1671,8,106,10,106,12,106,1674,9,106,1,106,3,106,1677,8,106,
        1,106,3,106,1680,8,106,1,106,1,106,1,107,3,107,1685,8,107,1,107,
        3,107,1688,8,107,1,107,1,107,1,107,3,107,1693,8,107,1,108,1,108,
        1,108,1,109,1,109,1,109,1,109,1,109,1,109,3,109,1704,8,109,3,109,
        1706,8,109,1,109,1,109,1,109,1,109,3,109,1712,8,109,3,109,1714,8,
        109,1,109,1,109,1,109,1,109,1,109,3,109,1721,8,109,1,109,1,109,1,
        109,3,109,1726,8,109,5,109,1728,8,109,10,109,12,109,1731,9,109,3,
        109,1733,8,109,1,110,1,110,1,110,1,110,1,110,3,110,1740,8,110,1,
        111,1,111,1,111,1,111,3,111,1746,8,111,1,112,1,112,1,113,1,113,1,
        113,1,113,1,113,1,113,3,113,1756,8,113,1,113,1,113,1,113,3,113,1761,
        8,113,1,113,1,113,1,113,3,113,1766,8,113,3,113,1768,8,113,1,114,
        1,114,1,115,1,115,4,115,1774,8,115,11,115,12,115,1775,1,115,1,115,
        4,115,1780,8,115,11,115,12,115,1781,1,115,1,115,1,115,5,115,1787,
        8,115,10,115,12,115,1790,9,115,1,115,3,115,1793,8,115,1,116,1,116,
        1,116,3,116,1798,8,116,1,117,1,117,1,117,5,117,1803,8,117,10,117,
        12,117,1806,9,117,1,118,1,118,5,118,1810,8,118,10,118,12,118,1813,
        9,118,1,119,1,119,1,119,1,119,1,119,1,119,3,119,1821,8,119,1,120,
        1,120,1,120,3,120,1826,8,120,1,121,1,121,1,121,1,122,1,122,1,122,
        1,122,3,122,1835,8,122,1,123,3,123,1838,8,123,1,123,4,123,1841,8,
        123,11,123,12,123,1842,1,123,5,123,1846,8,123,10,123,12,123,1849,
        9,123,1,124,1,124,1,124,3,124,1854,8,124,1,124,1,124,1,124,1,124,
        3,124,1860,8,124,1,125,1,125,3,125,1864,8,125,1,126,1,126,1,126,
        1,126,1,126,3,126,1871,8,126,1,126,5,126,1874,8,126,10,126,12,126,
        1877,9,126,1,127,5,127,1880,8,127,10,127,12,127,1883,9,127,1,127,
        1,127,1,127,1,127,1,127,1,127,3,127,1891,8,127,1,127,5,127,1894,
        8,127,10,127,12,127,1897,9,127,1,128,1,128,3,128,1901,8,128,1,128,
        1,128,1,128,1,128,1,128,3,128,1908,8,128,1,129,3,129,1911,8,129,
        1,129,1,129,3,129,1915,8,129,5,129,1917,8,129,10,129,12,129,1920,
        9,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,1929,8,130,
        1,131,1,131,1,132,1,132,1,133,1,133,1,134,1,134,1,135,1,135,1,136,
        1,136,1,136,0,2,118,164,137,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
        176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
        208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
        240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
        272,0,24,2,0,56,56,82,82,2,0,54,54,122,122,1,0,219,220,2,0,95,95,
        119,119,1,0,207,208,2,0,200,200,202,203,1,0,165,166,1,0,88,89,1,
        0,114,115,1,0,204,206,2,0,202,203,210,210,1,0,190,191,2,0,171,172,
        196,197,1,0,167,170,4,0,173,175,177,185,189,189,221,221,1,0,202,
        203,2,0,226,227,229,230,2,0,54,54,107,107,2,0,44,44,77,77,2,0,44,
        160,225,225,4,0,44,44,77,77,110,113,118,118,1,0,153,160,7,0,45,45,
        48,48,62,62,94,95,106,106,116,116,119,119,9,0,45,45,47,48,61,62,
        79,79,92,95,106,106,116,116,119,119,125,127,2181,0,275,1,0,0,0,2,
        292,1,0,0,0,4,322,1,0,0,0,6,325,1,0,0,0,8,332,1,0,0,0,10,340,1,0,
        0,0,12,352,1,0,0,0,14,354,1,0,0,0,16,362,1,0,0,0,18,375,1,0,0,0,
        20,377,1,0,0,0,22,399,1,0,0,0,24,402,1,0,0,0,26,425,1,0,0,0,28,469,
        1,0,0,0,30,471,1,0,0,0,32,493,1,0,0,0,34,495,1,0,0,0,36,503,1,0,
        0,0,38,512,1,0,0,0,40,517,1,0,0,0,42,525,1,0,0,0,44,537,1,0,0,0,
        46,541,1,0,0,0,48,557,1,0,0,0,50,564,1,0,0,0,52,570,1,0,0,0,54,599,
        1,0,0,0,56,601,1,0,0,0,58,603,1,0,0,0,60,635,1,0,0,0,62,637,1,0,
        0,0,64,641,1,0,0,0,66,646,1,0,0,0,68,649,1,0,0,0,70,653,1,0,0,0,
        72,663,1,0,0,0,74,669,1,0,0,0,76,691,1,0,0,0,78,693,1,0,0,0,80,695,
        1,0,0,0,82,728,1,0,0,0,84,734,1,0,0,0,86,740,1,0,0,0,88,746,1,0,
        0,0,90,752,1,0,0,0,92,755,1,0,0,0,94,761,1,0,0,0,96,816,1,0,0,0,
        98,835,1,0,0,0,100,851,1,0,0,0,102,854,1,0,0,0,104,858,1,0,0,0,106,
        862,1,0,0,0,108,875,1,0,0,0,110,879,1,0,0,0,112,899,1,0,0,0,114,
        902,1,0,0,0,116,915,1,0,0,0,118,941,1,0,0,0,120,951,1,0,0,0,122,
        970,1,0,0,0,124,972,1,0,0,0,126,976,1,0,0,0,128,1046,1,0,0,0,130,
        1057,1,0,0,0,132,1061,1,0,0,0,134,1063,1,0,0,0,136,1070,1,0,0,0,
        138,1084,1,0,0,0,140,1088,1,0,0,0,142,1093,1,0,0,0,144,1101,1,0,
        0,0,146,1105,1,0,0,0,148,1108,1,0,0,0,150,1112,1,0,0,0,152,1117,
        1,0,0,0,154,1122,1,0,0,0,156,1135,1,0,0,0,158,1170,1,0,0,0,160,1172,
        1,0,0,0,162,1180,1,0,0,0,164,1277,1,0,0,0,166,1344,1,0,0,0,168,1357,
        1,0,0,0,170,1410,1,0,0,0,172,1413,1,0,0,0,174,1420,1,0,0,0,176,1453,
        1,0,0,0,178,1455,1,0,0,0,180,1473,1,0,0,0,182,1484,1,0,0,0,184,1489,
        1,0,0,0,186,1491,1,0,0,0,188,1501,1,0,0,0,190,1524,1,0,0,0,192,1526,
        1,0,0,0,194,1539,1,0,0,0,196,1548,1,0,0,0,198,1560,1,0,0,0,200,1563,
        1,0,0,0,202,1606,1,0,0,0,204,1615,1,0,0,0,206,1635,1,0,0,0,208,1656,
        1,0,0,0,210,1658,1,0,0,0,212,1666,1,0,0,0,214,1692,1,0,0,0,216,1694,
        1,0,0,0,218,1732,1,0,0,0,220,1739,1,0,0,0,222,1745,1,0,0,0,224,1747,
        1,0,0,0,226,1767,1,0,0,0,228,1769,1,0,0,0,230,1792,1,0,0,0,232,1797,
        1,0,0,0,234,1799,1,0,0,0,236,1807,1,0,0,0,238,1820,1,0,0,0,240,1822,
        1,0,0,0,242,1827,1,0,0,0,244,1834,1,0,0,0,246,1837,1,0,0,0,248,1859,
        1,0,0,0,250,1863,1,0,0,0,252,1870,1,0,0,0,254,1881,1,0,0,0,256,1907,
        1,0,0,0,258,1910,1,0,0,0,260,1928,1,0,0,0,262,1930,1,0,0,0,264,1932,
        1,0,0,0,266,1934,1,0,0,0,268,1936,1,0,0,0,270,1938,1,0,0,0,272,1940,
        1,0,0,0,274,276,5,10,0,0,275,274,1,0,0,0,275,276,1,0,0,0,276,281,
        1,0,0,0,277,280,3,2,1,0,278,280,3,8,4,0,279,277,1,0,0,0,279,278,
        1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,
        1,0,0,0,283,281,1,0,0,0,284,285,5,0,0,1,285,1,1,0,0,0,286,288,3,
        4,2,0,287,286,1,0,0,0,288,289,1,0,0,0,289,287,1,0,0,0,289,290,1,
        0,0,0,290,293,1,0,0,0,291,293,3,6,3,0,292,287,1,0,0,0,292,291,1,
        0,0,0,293,3,1,0,0,0,294,323,5,8,0,0,295,323,5,15,0,0,296,323,5,6,
        0,0,297,323,5,9,0,0,298,323,5,24,0,0,299,323,5,16,0,0,300,323,5,
        17,0,0,301,323,5,2,0,0,302,323,5,18,0,0,303,323,5,19,0,0,304,323,
        5,27,0,0,305,323,5,20,0,0,306,323,5,31,0,0,307,323,5,21,0,0,308,
        323,5,22,0,0,309,323,5,28,0,0,310,323,5,32,0,0,311,323,5,37,0,0,
        312,323,5,5,0,0,313,323,5,35,0,0,314,318,5,3,0,0,315,317,5,12,0,
        0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,
        0,319,321,1,0,0,0,320,318,1,0,0,0,321,323,5,13,0,0,322,294,1,0,0,
        0,322,295,1,0,0,0,322,296,1,0,0,0,322,297,1,0,0,0,322,298,1,0,0,
        0,322,299,1,0,0,0,322,300,1,0,0,0,322,301,1,0,0,0,322,302,1,0,0,
        0,322,303,1,0,0,0,322,304,1,0,0,0,322,305,1,0,0,0,322,306,1,0,0,
        0,322,307,1,0,0,0,322,308,1,0,0,0,322,309,1,0,0,0,322,310,1,0,0,
        0,322,311,1,0,0,0,322,312,1,0,0,0,322,313,1,0,0,0,322,314,1,0,0,
        0,323,5,1,0,0,0,324,326,5,34,0,0,325,324,1,0,0,0,326,327,1,0,0,0,
        327,325,1,0,0,0,327,328,1,0,0,0,328,7,1,0,0,0,329,331,3,10,5,0,330,
        329,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,
        336,1,0,0,0,334,332,1,0,0,0,335,337,3,12,6,0,336,335,1,0,0,0,337,
        338,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,9,1,0,0,0,340,341,
        5,87,0,0,341,342,5,103,0,0,342,343,3,206,103,0,343,344,5,220,0,0,
        344,11,1,0,0,0,345,353,3,54,27,0,346,353,3,14,7,0,347,353,3,20,10,
        0,348,353,3,24,12,0,349,353,3,26,13,0,350,353,3,154,77,0,351,353,
        3,156,78,0,352,345,1,0,0,0,352,346,1,0,0,0,352,347,1,0,0,0,352,348,
        1,0,0,0,352,349,1,0,0,0,352,350,1,0,0,0,352,351,1,0,0,0,353,13,1,
        0,0,0,354,356,5,128,0,0,355,357,7,0,0,0,356,355,1,0,0,0,356,357,
        1,0,0,0,357,358,1,0,0,0,358,359,3,16,8,0,359,360,5,220,0,0,360,15,
        1,0,0,0,361,363,5,194,0,0,362,361,1,0,0,0,362,363,1,0,0,0,363,364,
        1,0,0,0,364,372,3,18,9,0,365,367,5,218,0,0,366,368,5,194,0,0,367,
        366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,371,3,18,9,0,370,
        365,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,
        17,1,0,0,0,374,372,1,0,0,0,375,376,3,206,103,0,376,19,1,0,0,0,377,
        392,5,103,0,0,378,380,3,206,103,0,379,378,1,0,0,0,379,380,1,0,0,
        0,380,381,1,0,0,0,381,385,5,216,0,0,382,384,3,22,11,0,383,382,1,
        0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,
        0,0,0,387,385,1,0,0,0,388,393,5,217,0,0,389,390,3,206,103,0,390,
        391,5,220,0,0,391,393,1,0,0,0,392,379,1,0,0,0,392,389,1,0,0,0,393,
        21,1,0,0,0,394,400,3,54,27,0,395,400,3,14,7,0,396,400,3,24,12,0,
        397,400,3,26,13,0,398,400,3,154,77,0,399,394,1,0,0,0,399,395,1,0,
        0,0,399,396,1,0,0,0,399,397,1,0,0,0,399,398,1,0,0,0,400,23,1,0,0,
        0,401,403,3,44,22,0,402,401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,
        0,0,404,406,5,82,0,0,405,407,5,198,0,0,406,405,1,0,0,0,406,407,1,
        0,0,0,407,408,1,0,0,0,408,410,3,264,132,0,409,411,3,32,16,0,410,
        409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,413,5,212,0,0,413,
        414,3,114,57,0,414,420,5,213,0,0,415,417,5,219,0,0,416,418,5,211,
        0,0,417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,421,3,118,
        59,0,420,415,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,423,3,58,
        29,0,423,25,1,0,0,0,424,426,3,44,22,0,425,424,1,0,0,0,425,426,1,
        0,0,0,426,428,1,0,0,0,427,429,5,110,0,0,428,427,1,0,0,0,428,429,
        1,0,0,0,429,431,1,0,0,0,430,432,3,262,131,0,431,430,1,0,0,0,431,
        432,1,0,0,0,432,434,1,0,0,0,433,435,5,108,0,0,434,433,1,0,0,0,434,
        435,1,0,0,0,435,458,1,0,0,0,436,437,3,28,14,0,437,439,3,264,132,
        0,438,440,3,32,16,0,439,438,1,0,0,0,439,440,1,0,0,0,440,443,1,0,
        0,0,441,442,5,76,0,0,442,444,3,196,98,0,443,441,1,0,0,0,443,444,
        1,0,0,0,444,447,1,0,0,0,445,446,5,86,0,0,446,448,3,30,15,0,447,445,
        1,0,0,0,447,448,1,0,0,0,448,459,1,0,0,0,449,450,5,96,0,0,450,452,
        3,264,132,0,451,453,3,32,16,0,452,451,1,0,0,0,452,453,1,0,0,0,453,
        456,1,0,0,0,454,455,5,76,0,0,455,457,3,30,15,0,456,454,1,0,0,0,456,
        457,1,0,0,0,457,459,1,0,0,0,458,436,1,0,0,0,458,449,1,0,0,0,459,
        460,1,0,0,0,460,464,5,216,0,0,461,463,3,128,64,0,462,461,1,0,0,0,
        463,466,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,
        466,464,1,0,0,0,467,468,5,217,0,0,468,27,1,0,0,0,469,470,7,1,0,0,
        470,29,1,0,0,0,471,476,3,196,98,0,472,473,5,218,0,0,473,475,3,196,
        98,0,474,472,1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,
        0,0,477,31,1,0,0,0,478,476,1,0,0,0,479,480,5,162,0,0,480,481,3,34,
        17,0,481,482,5,163,0,0,482,494,1,0,0,0,483,484,5,162,0,0,484,485,
        3,36,18,0,485,486,5,163,0,0,486,494,1,0,0,0,487,488,5,162,0,0,488,
        489,3,34,17,0,489,490,5,218,0,0,490,491,3,36,18,0,491,492,5,163,
        0,0,492,494,1,0,0,0,493,479,1,0,0,0,493,483,1,0,0,0,493,487,1,0,
        0,0,494,33,1,0,0,0,495,500,3,38,19,0,496,497,5,218,0,0,497,499,3,
        38,19,0,498,496,1,0,0,0,499,502,1,0,0,0,500,498,1,0,0,0,500,501,
        1,0,0,0,501,35,1,0,0,0,502,500,1,0,0,0,503,508,3,40,20,0,504,505,
        5,218,0,0,505,507,3,40,20,0,506,504,1,0,0,0,507,510,1,0,0,0,508,
        506,1,0,0,0,508,509,1,0,0,0,509,37,1,0,0,0,510,508,1,0,0,0,511,513,
        3,44,22,0,512,511,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,515,
        3,264,132,0,515,39,1,0,0,0,516,518,3,44,22,0,517,516,1,0,0,0,517,
        518,1,0,0,0,518,519,1,0,0,0,519,520,3,264,132,0,520,523,5,221,0,
        0,521,524,3,196,98,0,522,524,3,270,135,0,523,521,1,0,0,0,523,522,
        1,0,0,0,524,41,1,0,0,0,525,526,5,162,0,0,526,531,3,198,99,0,527,
        528,5,218,0,0,528,530,3,198,99,0,529,527,1,0,0,0,530,533,1,0,0,0,
        531,529,1,0,0,0,531,532,1,0,0,0,532,534,1,0,0,0,533,531,1,0,0,0,
        534,535,5,163,0,0,535,43,1,0,0,0,536,538,3,46,23,0,537,536,1,0,0,
        0,538,539,1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,45,1,0,0,0,
        541,545,5,43,0,0,542,543,3,264,132,0,543,544,5,219,0,0,544,546,1,
        0,0,0,545,542,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,552,3,
        48,24,0,548,549,5,218,0,0,549,551,3,48,24,0,550,548,1,0,0,0,551,
        554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,
        552,1,0,0,0,555,556,5,215,0,0,556,47,1,0,0,0,557,559,3,204,102,0,
        558,560,3,212,106,0,559,558,1,0,0,0,559,560,1,0,0,0,560,49,1,0,0,
        0,561,563,3,52,26,0,562,561,1,0,0,0,563,566,1,0,0,0,564,562,1,0,
        0,0,564,565,1,0,0,0,565,51,1,0,0,0,566,564,1,0,0,0,567,571,3,54,
        27,0,568,571,3,24,12,0,569,571,3,26,13,0,570,567,1,0,0,0,570,568,
        1,0,0,0,570,569,1,0,0,0,571,53,1,0,0,0,572,573,3,264,132,0,573,574,
        5,219,0,0,574,600,1,0,0,0,575,600,3,58,29,0,576,600,3,60,30,0,577,
        600,3,70,35,0,578,600,3,72,36,0,579,600,3,74,37,0,580,600,3,80,40,
        0,581,600,3,84,42,0,582,600,3,86,43,0,583,600,3,88,44,0,584,585,
        3,186,93,0,585,586,5,220,0,0,586,600,1,0,0,0,587,600,3,120,60,0,
        588,600,3,126,63,0,589,600,3,124,62,0,590,600,3,90,45,0,591,600,
        3,92,46,0,592,600,3,94,47,0,593,600,3,96,48,0,594,600,3,102,51,0,
        595,600,3,104,52,0,596,600,3,106,53,0,597,600,3,56,28,0,598,600,
        3,108,54,0,599,572,1,0,0,0,599,575,1,0,0,0,599,576,1,0,0,0,599,577,
        1,0,0,0,599,578,1,0,0,0,599,579,1,0,0,0,599,580,1,0,0,0,599,581,
        1,0,0,0,599,582,1,0,0,0,599,583,1,0,0,0,599,584,1,0,0,0,599,587,
        1,0,0,0,599,588,1,0,0,0,599,589,1,0,0,0,599,590,1,0,0,0,599,591,
        1,0,0,0,599,592,1,0,0,0,599,593,1,0,0,0,599,594,1,0,0,0,599,595,
        1,0,0,0,599,596,1,0,0,0,599,597,1,0,0,0,599,598,1,0,0,0,600,55,1,
        0,0,0,601,602,5,220,0,0,602,57,1,0,0,0,603,604,5,216,0,0,604,605,
        3,50,25,0,605,606,5,217,0,0,606,59,1,0,0,0,607,608,5,85,0,0,608,
        609,3,162,81,0,609,613,3,54,27,0,610,612,3,62,31,0,611,610,1,0,0,
        0,612,615,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,617,1,0,0,
        0,615,613,1,0,0,0,616,618,3,66,33,0,617,616,1,0,0,0,617,618,1,0,
        0,0,618,636,1,0,0,0,619,620,5,85,0,0,620,621,3,162,81,0,621,622,
        5,219,0,0,622,626,3,50,25,0,623,625,3,64,32,0,624,623,1,0,0,0,625,
        628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,630,1,0,0,0,628,
        626,1,0,0,0,629,631,3,68,34,0,630,629,1,0,0,0,630,631,1,0,0,0,631,
        632,1,0,0,0,632,633,5,71,0,0,633,634,5,220,0,0,634,636,1,0,0,0,635,
        607,1,0,0,0,635,619,1,0,0,0,636,61,1,0,0,0,637,638,5,65,0,0,638,
        639,3,162,81,0,639,640,3,54,27,0,640,63,1,0,0,0,641,642,5,65,0,0,
        642,643,3,162,81,0,643,644,5,219,0,0,644,645,3,50,25,0,645,65,1,
        0,0,0,646,647,5,64,0,0,647,648,3,54,27,0,648,67,1,0,0,0,649,650,
        5,64,0,0,650,651,5,219,0,0,651,652,3,50,25,0,652,69,1,0,0,0,653,
        654,5,130,0,0,654,661,3,162,81,0,655,662,3,54,27,0,656,657,5,219,
        0,0,657,658,3,50,25,0,658,659,5,73,0,0,659,660,5,220,0,0,660,662,
        1,0,0,0,661,655,1,0,0,0,661,656,1,0,0,0,662,71,1,0,0,0,663,664,5,
        60,0,0,664,665,3,54,27,0,665,666,5,130,0,0,666,667,3,162,81,0,667,
        668,5,220,0,0,668,73,1,0,0,0,669,670,5,80,0,0,670,672,5,212,0,0,
        671,673,3,76,38,0,672,671,1,0,0,0,672,673,1,0,0,0,673,674,1,0,0,
        0,674,676,5,220,0,0,675,677,3,160,80,0,676,675,1,0,0,0,676,677,1,
        0,0,0,677,678,1,0,0,0,678,680,5,220,0,0,679,681,3,78,39,0,680,679,
        1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,0,682,689,5,213,0,0,683,690,
        3,54,27,0,684,685,5,219,0,0,685,686,3,50,25,0,686,687,5,69,0,0,687,
        688,5,220,0,0,688,690,1,0,0,0,689,683,1,0,0,0,689,684,1,0,0,0,690,
        75,1,0,0,0,691,692,3,160,80,0,692,77,1,0,0,0,693,694,3,160,80,0,
        694,79,1,0,0,0,695,696,5,120,0,0,696,720,3,162,81,0,697,699,5,216,
        0,0,698,700,5,220,0,0,699,698,1,0,0,0,699,700,1,0,0,0,700,704,1,
        0,0,0,701,703,3,82,41,0,702,701,1,0,0,0,703,706,1,0,0,0,704,702,
        1,0,0,0,704,705,1,0,0,0,705,707,1,0,0,0,706,704,1,0,0,0,707,721,
        5,217,0,0,708,710,5,219,0,0,709,711,5,220,0,0,710,709,1,0,0,0,710,
        711,1,0,0,0,711,715,1,0,0,0,712,714,3,82,41,0,713,712,1,0,0,0,714,
        717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,718,1,0,0,0,717,
        715,1,0,0,0,718,719,5,72,0,0,719,721,5,220,0,0,720,697,1,0,0,0,720,
        708,1,0,0,0,721,81,1,0,0,0,722,723,5,52,0,0,723,726,3,164,82,0,724,
        726,5,59,0,0,725,722,1,0,0,0,725,724,1,0,0,0,726,727,1,0,0,0,727,
        729,7,2,0,0,728,725,1,0,0,0,729,730,1,0,0,0,730,728,1,0,0,0,730,
        731,1,0,0,0,731,732,1,0,0,0,732,733,3,50,25,0,733,83,1,0,0,0,734,
        736,5,50,0,0,735,737,3,164,82,0,736,735,1,0,0,0,736,737,1,0,0,0,
        737,738,1,0,0,0,738,739,5,220,0,0,739,85,1,0,0,0,740,742,5,57,0,
        0,741,743,3,164,82,0,742,741,1,0,0,0,742,743,1,0,0,0,743,744,1,0,
        0,0,744,745,5,220,0,0,745,87,1,0,0,0,746,748,5,117,0,0,747,749,3,
        164,82,0,748,747,1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,751,
        5,220,0,0,751,89,1,0,0,0,752,753,3,164,82,0,753,754,5,220,0,0,754,
        91,1,0,0,0,755,756,5,127,0,0,756,757,5,212,0,0,757,758,3,234,117,
        0,758,759,5,213,0,0,759,760,5,220,0,0,760,93,1,0,0,0,761,806,5,81,
        0,0,762,763,5,212,0,0,763,764,3,164,82,0,764,765,5,46,0,0,765,766,
        3,170,85,0,766,767,5,213,0,0,767,807,1,0,0,0,768,769,5,212,0,0,769,
        770,3,236,118,0,770,772,5,46,0,0,771,773,5,198,0,0,772,771,1,0,0,
        0,772,773,1,0,0,0,773,774,1,0,0,0,774,780,3,166,83,0,775,777,5,164,
        0,0,776,778,5,198,0,0,777,776,1,0,0,0,777,778,1,0,0,0,778,779,1,
        0,0,0,779,781,3,236,118,0,780,775,1,0,0,0,780,781,1,0,0,0,781,782,
        1,0,0,0,782,783,5,213,0,0,783,807,1,0,0,0,784,785,5,212,0,0,785,
        786,3,164,82,0,786,787,5,46,0,0,787,793,3,166,83,0,788,790,5,164,
        0,0,789,791,5,198,0,0,790,789,1,0,0,0,790,791,1,0,0,0,791,792,1,
        0,0,0,792,794,3,236,118,0,793,788,1,0,0,0,793,794,1,0,0,0,794,795,
        1,0,0,0,795,796,5,213,0,0,796,807,1,0,0,0,797,798,5,212,0,0,798,
        799,3,236,118,0,799,800,5,46,0,0,800,801,5,98,0,0,801,802,5,212,
        0,0,802,803,3,258,129,0,803,804,5,213,0,0,804,805,5,213,0,0,805,
        807,1,0,0,0,806,762,1,0,0,0,806,768,1,0,0,0,806,784,1,0,0,0,806,
        797,1,0,0,0,807,814,1,0,0,0,808,815,3,54,27,0,809,810,5,219,0,0,
        810,811,3,50,25,0,811,812,5,70,0,0,812,813,5,220,0,0,813,815,1,0,
        0,0,814,808,1,0,0,0,814,809,1,0,0,0,815,95,1,0,0,0,816,817,5,123,
        0,0,817,833,3,58,29,0,818,820,3,98,49,0,819,818,1,0,0,0,820,821,
        1,0,0,0,821,819,1,0,0,0,821,822,1,0,0,0,822,824,1,0,0,0,823,825,
        3,100,50,0,824,823,1,0,0,0,824,825,1,0,0,0,825,834,1,0,0,0,826,828,
        3,98,49,0,827,826,1,0,0,0,828,831,1,0,0,0,829,827,1,0,0,0,829,830,
        1,0,0,0,830,832,1,0,0,0,831,829,1,0,0,0,832,834,3,100,50,0,833,819,
        1,0,0,0,833,829,1,0,0,0,834,97,1,0,0,0,835,836,5,53,0,0,836,837,
        5,212,0,0,837,842,3,196,98,0,838,839,5,199,0,0,839,841,3,196,98,
        0,840,838,1,0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,
        0,843,846,1,0,0,0,844,842,1,0,0,0,845,847,5,224,0,0,846,845,1,0,
        0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,849,5,213,0,0,849,850,3,
        58,29,0,850,99,1,0,0,0,851,852,5,78,0,0,852,853,3,58,29,0,853,101,
        1,0,0,0,854,855,5,121,0,0,855,856,3,164,82,0,856,857,5,220,0,0,857,
        103,1,0,0,0,858,859,5,84,0,0,859,860,3,264,132,0,860,861,5,220,0,
        0,861,105,1,0,0,0,862,863,5,58,0,0,863,864,5,212,0,0,864,865,3,110,
        55,0,865,872,5,213,0,0,866,873,3,54,27,0,867,868,5,219,0,0,868,869,
        3,50,25,0,869,870,5,68,0,0,870,871,5,220,0,0,871,873,1,0,0,0,872,
        866,1,0,0,0,872,867,1,0,0,0,873,107,1,0,0,0,874,876,3,2,1,0,875,
        874,1,0,0,0,876,877,1,0,0,0,877,875,1,0,0,0,877,878,1,0,0,0,878,
        109,1,0,0,0,879,884,3,112,56,0,880,881,5,218,0,0,881,883,3,112,56,
        0,882,880,1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,
        0,885,111,1,0,0,0,886,884,1,0,0,0,887,888,5,134,0,0,888,891,5,221,
        0,0,889,892,3,224,112,0,890,892,5,228,0,0,891,889,1,0,0,0,891,890,
        1,0,0,0,892,900,1,0,0,0,893,894,5,135,0,0,894,895,5,221,0,0,895,
        900,5,232,0,0,896,897,5,136,0,0,897,898,5,221,0,0,898,900,3,224,
        112,0,899,887,1,0,0,0,899,893,1,0,0,0,899,896,1,0,0,0,900,113,1,
        0,0,0,901,903,3,116,58,0,902,901,1,0,0,0,902,903,1,0,0,0,903,908,
        1,0,0,0,904,905,5,218,0,0,905,907,3,116,58,0,906,904,1,0,0,0,907,
        910,1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,912,1,0,0,0,910,
        908,1,0,0,0,911,913,5,218,0,0,912,911,1,0,0,0,912,913,1,0,0,0,913,
        115,1,0,0,0,914,916,3,44,22,0,915,914,1,0,0,0,915,916,1,0,0,0,916,
        920,1,0,0,0,917,919,3,266,133,0,918,917,1,0,0,0,919,922,1,0,0,0,
        920,918,1,0,0,0,920,921,1,0,0,0,921,924,1,0,0,0,922,920,1,0,0,0,
        923,925,5,211,0,0,924,923,1,0,0,0,924,925,1,0,0,0,925,927,1,0,0,
        0,926,928,3,118,59,0,927,926,1,0,0,0,927,928,1,0,0,0,928,930,1,0,
        0,0,929,931,5,198,0,0,930,929,1,0,0,0,930,931,1,0,0,0,931,933,1,
        0,0,0,932,934,5,195,0,0,933,932,1,0,0,0,933,934,1,0,0,0,934,935,
        1,0,0,0,935,936,3,150,75,0,936,117,1,0,0,0,937,938,6,59,-1,0,938,
        942,3,196,98,0,939,942,5,51,0,0,940,942,3,270,135,0,941,937,1,0,
        0,0,941,939,1,0,0,0,941,940,1,0,0,0,942,948,1,0,0,0,943,944,10,1,
        0,0,944,945,5,199,0,0,945,947,3,118,59,2,946,943,1,0,0,0,947,950,
        1,0,0,0,948,946,1,0,0,0,948,949,1,0,0,0,949,119,1,0,0,0,950,948,
        1,0,0,0,951,952,5,83,0,0,952,957,3,122,61,0,953,954,5,218,0,0,954,
        956,3,122,61,0,955,953,1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,
        958,1,0,0,0,958,960,1,0,0,0,959,957,1,0,0,0,960,961,5,220,0,0,961,
        121,1,0,0,0,962,971,5,224,0,0,963,964,5,209,0,0,964,971,3,236,118,
        0,965,966,5,209,0,0,966,967,5,216,0,0,967,968,3,164,82,0,968,969,
        5,217,0,0,969,971,1,0,0,0,970,962,1,0,0,0,970,963,1,0,0,0,970,965,
        1,0,0,0,971,123,1,0,0,0,972,973,5,63,0,0,973,974,3,160,80,0,974,
        975,5,220,0,0,975,125,1,0,0,0,976,977,5,118,0,0,977,982,3,150,75,
        0,978,979,5,218,0,0,979,981,3,150,75,0,980,978,1,0,0,0,981,984,1,
        0,0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,985,1,0,0,0,984,982,1,
        0,0,0,985,986,5,220,0,0,986,127,1,0,0,0,987,989,3,44,22,0,988,987,
        1,0,0,0,988,989,1,0,0,0,989,1040,1,0,0,0,990,992,3,146,73,0,991,
        993,3,118,59,0,992,991,1,0,0,0,992,993,1,0,0,0,993,994,1,0,0,0,994,
        999,3,150,75,0,995,996,5,218,0,0,996,998,3,150,75,0,997,995,1,0,
        0,0,998,1001,1,0,0,0,999,997,1,0,0,0,999,1000,1,0,0,0,1000,1002,
        1,0,0,0,1001,999,1,0,0,0,1002,1003,5,220,0,0,1003,1041,1,0,0,0,1004,
        1006,3,148,74,0,1005,1004,1,0,0,0,1005,1006,1,0,0,0,1006,1038,1,
        0,0,0,1007,1009,5,56,0,0,1008,1010,3,118,59,0,1009,1008,1,0,0,0,
        1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1016,3,152,76,0,1012,1013,
        5,218,0,0,1013,1015,3,152,76,0,1014,1012,1,0,0,0,1015,1018,1,0,0,
        0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,1019,1,0,0,0,1018,1016,
        1,0,0,0,1019,1020,5,220,0,0,1020,1039,1,0,0,0,1021,1023,5,82,0,0,
        1022,1024,5,198,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,
        1,0,0,0,1025,1027,3,264,132,0,1026,1028,3,32,16,0,1027,1026,1,0,
        0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1030,5,212,0,0,1030,
        1031,3,114,57,0,1031,1034,5,213,0,0,1032,1035,3,140,70,0,1033,1035,
        3,142,71,0,1034,1032,1,0,0,0,1034,1033,1,0,0,0,1034,1035,1,0,0,0,
        1035,1036,1,0,0,0,1036,1037,3,144,72,0,1037,1039,1,0,0,0,1038,1007,
        1,0,0,0,1038,1021,1,0,0,0,1039,1041,1,0,0,0,1040,990,1,0,0,0,1040,
        1005,1,0,0,0,1041,1047,1,0,0,0,1042,1043,5,128,0,0,1043,1044,3,210,
        105,0,1044,1045,3,130,65,0,1045,1047,1,0,0,0,1046,988,1,0,0,0,1046,
        1042,1,0,0,0,1047,129,1,0,0,0,1048,1058,5,220,0,0,1049,1053,5,216,
        0,0,1050,1052,3,132,66,0,1051,1050,1,0,0,0,1052,1055,1,0,0,0,1053,
        1051,1,0,0,0,1053,1054,1,0,0,0,1054,1056,1,0,0,0,1055,1053,1,0,0,
        0,1056,1058,5,217,0,0,1057,1048,1,0,0,0,1057,1049,1,0,0,0,1058,131,
        1,0,0,0,1059,1062,3,134,67,0,1060,1062,3,136,68,0,1061,1059,1,0,
        0,0,1061,1060,1,0,0,0,1062,133,1,0,0,0,1063,1064,3,204,102,0,1064,
        1065,5,192,0,0,1065,1066,3,264,132,0,1066,1067,5,91,0,0,1067,1068,
        3,210,105,0,1068,1069,5,220,0,0,1069,135,1,0,0,0,1070,1071,3,138,
        69,0,1071,1077,5,46,0,0,1072,1078,3,266,133,0,1073,1075,3,266,133,
        0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1076,1,0,0,0,1076,1078,
        3,264,132,0,1077,1072,1,0,0,0,1077,1074,1,0,0,0,1078,1079,1,0,0,
        0,1079,1080,5,220,0,0,1080,137,1,0,0,0,1081,1082,3,204,102,0,1082,
        1083,5,192,0,0,1083,1085,1,0,0,0,1084,1081,1,0,0,0,1084,1085,1,0,
        0,0,1085,1086,1,0,0,0,1086,1087,3,264,132,0,1087,139,1,0,0,0,1088,
        1089,5,219,0,0,1089,1091,3,264,132,0,1090,1092,3,212,106,0,1091,
        1090,1,0,0,0,1091,1092,1,0,0,0,1092,141,1,0,0,0,1093,1095,5,219,
        0,0,1094,1096,5,211,0,0,1095,1094,1,0,0,0,1095,1096,1,0,0,0,1096,
        1097,1,0,0,0,1097,1098,3,118,59,0,1098,143,1,0,0,0,1099,1102,5,220,
        0,0,1100,1102,3,58,29,0,1101,1099,1,0,0,0,1101,1100,1,0,0,0,1102,
        145,1,0,0,0,1103,1106,3,148,74,0,1104,1106,5,129,0,0,1105,1103,1,
        0,0,0,1105,1104,1,0,0,0,1106,147,1,0,0,0,1107,1109,3,266,133,0,1108,
        1107,1,0,0,0,1109,1110,1,0,0,0,1110,1108,1,0,0,0,1110,1111,1,0,0,
        0,1111,149,1,0,0,0,1112,1115,5,224,0,0,1113,1114,5,221,0,0,1114,
        1116,3,218,109,0,1115,1113,1,0,0,0,1115,1116,1,0,0,0,1116,151,1,
        0,0,0,1117,1118,3,264,132,0,1118,1119,5,221,0,0,1119,1120,3,218,
        109,0,1120,153,1,0,0,0,1121,1123,3,44,22,0,1122,1121,1,0,0,0,1122,
        1123,1,0,0,0,1123,1124,1,0,0,0,1124,1125,5,56,0,0,1125,1130,3,152,
        76,0,1126,1127,5,218,0,0,1127,1129,3,152,76,0,1128,1126,1,0,0,0,
        1129,1132,1,0,0,0,1130,1128,1,0,0,0,1130,1131,1,0,0,0,1131,1133,
        1,0,0,0,1132,1130,1,0,0,0,1133,1134,5,220,0,0,1134,155,1,0,0,0,1135,
        1136,5,67,0,0,1136,1139,3,264,132,0,1137,1138,5,219,0,0,1138,1140,
        7,3,0,0,1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,1143,1,0,0,0,1141,
        1142,5,86,0,0,1142,1144,3,30,15,0,1143,1141,1,0,0,0,1143,1144,1,
        0,0,0,1144,1145,1,0,0,0,1145,1149,5,216,0,0,1146,1148,3,158,79,0,
        1147,1146,1,0,0,0,1148,1151,1,0,0,0,1149,1147,1,0,0,0,1149,1150,
        1,0,0,0,1150,1152,1,0,0,0,1151,1149,1,0,0,0,1152,1153,5,217,0,0,
        1153,157,1,0,0,0,1154,1155,5,52,0,0,1155,1158,3,264,132,0,1156,1157,
        5,221,0,0,1157,1159,3,164,82,0,1158,1156,1,0,0,0,1158,1159,1,0,0,
        0,1159,1160,1,0,0,0,1160,1161,5,220,0,0,1161,1171,1,0,0,0,1162,1164,
        3,148,74,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,
        1165,1171,3,24,12,0,1166,1167,5,128,0,0,1167,1168,3,210,105,0,1168,
        1169,3,130,65,0,1169,1171,1,0,0,0,1170,1154,1,0,0,0,1170,1163,1,
        0,0,0,1170,1166,1,0,0,0,1171,159,1,0,0,0,1172,1177,3,164,82,0,1173,
        1174,5,218,0,0,1174,1176,3,164,82,0,1175,1173,1,0,0,0,1176,1179,
        1,0,0,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,1178,161,1,0,0,0,1179,
        1177,1,0,0,0,1180,1183,5,212,0,0,1181,1184,3,164,82,0,1182,1184,
        3,186,93,0,1183,1181,1,0,0,0,1183,1182,1,0,0,0,1184,1185,1,0,0,0,
        1185,1186,5,213,0,0,1186,163,1,0,0,0,1187,1188,6,82,-1,0,1188,1189,
        5,55,0,0,1189,1278,3,164,82,48,1190,1278,3,182,91,0,1191,1192,3,
        228,114,0,1192,1193,5,214,0,0,1193,1194,3,164,82,0,1194,1195,5,215,
        0,0,1195,1278,1,0,0,0,1196,1197,5,212,0,0,1197,1198,3,272,136,0,
        1198,1199,5,213,0,0,1199,1200,3,164,82,45,1200,1278,1,0,0,0,1201,
        1202,7,4,0,0,1202,1278,3,164,82,44,1203,1204,7,5,0,0,1204,1278,3,
        164,82,43,1205,1206,7,6,0,0,1206,1278,3,236,118,0,1207,1208,3,236,
        118,0,1208,1209,7,6,0,0,1209,1278,1,0,0,0,1210,1211,5,109,0,0,1211,
        1278,3,164,82,40,1212,1278,3,168,84,0,1213,1278,3,236,118,0,1214,
        1278,3,220,110,0,1215,1278,3,230,115,0,1216,1278,5,225,0,0,1217,
        1278,5,231,0,0,1218,1278,3,162,81,0,1219,1278,5,131,0,0,1220,1221,
        5,98,0,0,1221,1222,5,212,0,0,1222,1223,3,258,129,0,1223,1224,5,213,
        0,0,1224,1225,5,221,0,0,1225,1226,3,164,82,31,1226,1278,1,0,0,0,
        1227,1228,5,97,0,0,1228,1229,5,212,0,0,1229,1230,3,234,117,0,1230,
        1231,5,213,0,0,1231,1278,1,0,0,0,1232,1233,5,66,0,0,1233,1234,5,
        212,0,0,1234,1235,3,236,118,0,1235,1236,5,213,0,0,1236,1278,1,0,
        0,0,1237,1238,5,74,0,0,1238,1239,5,212,0,0,1239,1240,3,164,82,0,
        1240,1241,5,213,0,0,1241,1278,1,0,0,0,1242,1246,5,75,0,0,1243,1244,
        5,212,0,0,1244,1247,5,213,0,0,1245,1247,3,162,81,0,1246,1243,1,0,
        0,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,1247,1278,1,0,0,0,1248,1278,
        3,176,88,0,1249,1278,3,178,89,0,1250,1251,7,7,0,0,1251,1278,3,164,
        82,9,1252,1253,7,8,0,0,1253,1278,3,164,82,8,1254,1255,5,121,0,0,
        1255,1278,3,164,82,7,1256,1257,3,170,85,0,1257,1258,5,221,0,0,1258,
        1259,3,164,82,6,1259,1278,1,0,0,0,1260,1261,3,166,83,0,1261,1263,
        3,184,92,0,1262,1264,3,44,22,0,1263,1262,1,0,0,0,1263,1264,1,0,0,
        0,1264,1265,1,0,0,0,1265,1266,3,164,82,5,1266,1278,1,0,0,0,1267,
        1268,3,166,83,0,1268,1270,5,221,0,0,1269,1271,3,44,22,0,1270,1269,
        1,0,0,0,1270,1271,1,0,0,0,1271,1272,1,0,0,0,1272,1275,5,198,0,0,
        1273,1276,3,236,118,0,1274,1276,3,182,91,0,1275,1273,1,0,0,0,1275,
        1274,1,0,0,0,1276,1278,1,0,0,0,1277,1187,1,0,0,0,1277,1190,1,0,0,
        0,1277,1191,1,0,0,0,1277,1196,1,0,0,0,1277,1201,1,0,0,0,1277,1203,
        1,0,0,0,1277,1205,1,0,0,0,1277,1207,1,0,0,0,1277,1210,1,0,0,0,1277,
        1212,1,0,0,0,1277,1213,1,0,0,0,1277,1214,1,0,0,0,1277,1215,1,0,0,
        0,1277,1216,1,0,0,0,1277,1217,1,0,0,0,1277,1218,1,0,0,0,1277,1219,
        1,0,0,0,1277,1220,1,0,0,0,1277,1227,1,0,0,0,1277,1232,1,0,0,0,1277,
        1237,1,0,0,0,1277,1242,1,0,0,0,1277,1248,1,0,0,0,1277,1249,1,0,0,
        0,1277,1250,1,0,0,0,1277,1252,1,0,0,0,1277,1254,1,0,0,0,1277,1256,
        1,0,0,0,1277,1260,1,0,0,0,1277,1267,1,0,0,0,1278,1339,1,0,0,0,1279,
        1280,10,24,0,0,1280,1281,5,176,0,0,1281,1338,3,164,82,24,1282,1283,
        10,22,0,0,1283,1284,7,9,0,0,1284,1338,3,164,82,23,1285,1286,10,21,
        0,0,1286,1287,7,10,0,0,1287,1338,3,164,82,22,1288,1289,10,20,0,0,
        1289,1290,7,11,0,0,1290,1338,3,164,82,21,1291,1292,10,19,0,0,1292,
        1293,7,12,0,0,1293,1338,3,164,82,20,1294,1295,10,18,0,0,1295,1296,
        7,13,0,0,1296,1338,3,164,82,19,1297,1298,10,17,0,0,1298,1299,5,198,
        0,0,1299,1338,3,164,82,18,1300,1301,10,16,0,0,1301,1302,5,201,0,
        0,1302,1338,3,164,82,17,1303,1304,10,15,0,0,1304,1305,5,199,0,0,
        1305,1338,3,164,82,16,1306,1307,10,14,0,0,1307,1308,5,187,0,0,1308,
        1338,3,164,82,15,1309,1310,10,13,0,0,1310,1311,5,186,0,0,1311,1338,
        3,164,82,14,1312,1313,10,12,0,0,1313,1315,5,211,0,0,1314,1316,3,
        164,82,0,1315,1314,1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,
        1318,5,219,0,0,1318,1338,3,164,82,13,1319,1320,10,11,0,0,1320,1321,
        5,188,0,0,1321,1338,3,164,82,12,1322,1323,10,10,0,0,1323,1324,5,
        161,0,0,1324,1338,3,164,82,11,1325,1326,10,3,0,0,1326,1327,5,99,
        0,0,1327,1338,3,164,82,4,1328,1329,10,2,0,0,1329,1330,5,101,0,0,
        1330,1338,3,164,82,3,1331,1332,10,1,0,0,1332,1333,5,100,0,0,1333,
        1338,3,164,82,2,1334,1335,10,23,0,0,1335,1336,5,90,0,0,1336,1338,
        3,198,99,0,1337,1279,1,0,0,0,1337,1282,1,0,0,0,1337,1285,1,0,0,0,
        1337,1288,1,0,0,0,1337,1291,1,0,0,0,1337,1294,1,0,0,0,1337,1297,
        1,0,0,0,1337,1300,1,0,0,0,1337,1303,1,0,0,0,1337,1306,1,0,0,0,1337,
        1309,1,0,0,0,1337,1312,1,0,0,0,1337,1319,1,0,0,0,1337,1322,1,0,0,
        0,1337,1325,1,0,0,0,1337,1328,1,0,0,0,1337,1331,1,0,0,0,1337,1334,
        1,0,0,0,1338,1341,1,0,0,0,1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,
        165,1,0,0,0,1341,1339,1,0,0,0,1342,1345,3,236,118,0,1343,1345,3,
        168,84,0,1344,1342,1,0,0,0,1344,1343,1,0,0,0,1345,167,1,0,0,0,1346,
        1347,5,45,0,0,1347,1349,5,212,0,0,1348,1350,3,188,94,0,1349,1348,
        1,0,0,0,1349,1350,1,0,0,0,1350,1351,1,0,0,0,1351,1358,5,213,0,0,
        1352,1354,5,214,0,0,1353,1355,3,188,94,0,1354,1353,1,0,0,0,1354,
        1355,1,0,0,0,1355,1356,1,0,0,0,1356,1358,5,215,0,0,1357,1346,1,0,
        0,0,1357,1352,1,0,0,0,1358,1363,1,0,0,0,1359,1360,5,214,0,0,1360,
        1361,3,164,82,0,1361,1362,5,215,0,0,1362,1364,1,0,0,0,1363,1359,
        1,0,0,0,1363,1364,1,0,0,0,1364,169,1,0,0,0,1365,1369,5,214,0,0,1366,
        1368,5,218,0,0,1367,1366,1,0,0,0,1368,1371,1,0,0,0,1369,1367,1,0,
        0,0,1369,1370,1,0,0,0,1370,1372,1,0,0,0,1371,1369,1,0,0,0,1372,1381,
        3,172,86,0,1373,1375,5,218,0,0,1374,1373,1,0,0,0,1375,1376,1,0,0,
        0,1376,1374,1,0,0,0,1376,1377,1,0,0,0,1377,1378,1,0,0,0,1378,1380,
        3,172,86,0,1379,1374,1,0,0,0,1380,1383,1,0,0,0,1381,1379,1,0,0,0,
        1381,1382,1,0,0,0,1382,1387,1,0,0,0,1383,1381,1,0,0,0,1384,1386,
        5,218,0,0,1385,1384,1,0,0,0,1386,1389,1,0,0,0,1387,1385,1,0,0,0,
        1387,1388,1,0,0,0,1388,1390,1,0,0,0,1389,1387,1,0,0,0,1390,1391,
        5,215,0,0,1391,1411,1,0,0,0,1392,1393,5,214,0,0,1393,1402,3,174,
        87,0,1394,1396,5,218,0,0,1395,1394,1,0,0,0,1396,1397,1,0,0,0,1397,
        1395,1,0,0,0,1397,1398,1,0,0,0,1398,1399,1,0,0,0,1399,1401,3,174,
        87,0,1400,1395,1,0,0,0,1401,1404,1,0,0,0,1402,1400,1,0,0,0,1402,
        1403,1,0,0,0,1403,1406,1,0,0,0,1404,1402,1,0,0,0,1405,1407,5,218,
        0,0,1406,1405,1,0,0,0,1406,1407,1,0,0,0,1407,1408,1,0,0,0,1408,1409,
        5,215,0,0,1409,1411,1,0,0,0,1410,1365,1,0,0,0,1410,1392,1,0,0,0,
        1411,171,1,0,0,0,1412,1414,5,198,0,0,1413,1412,1,0,0,0,1413,1414,
        1,0,0,0,1414,1415,1,0,0,0,1415,1416,3,236,118,0,1416,173,1,0,0,0,
        1417,1418,3,164,82,0,1418,1419,5,164,0,0,1419,1421,1,0,0,0,1420,
        1417,1,0,0,0,1420,1421,1,0,0,0,1421,1423,1,0,0,0,1422,1424,5,198,
        0,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,1425,1,0,0,0,1425,1426,
        3,236,118,0,1426,175,1,0,0,0,1427,1429,5,118,0,0,1428,1427,1,0,0,
        0,1428,1429,1,0,0,0,1429,1430,1,0,0,0,1430,1432,5,82,0,0,1431,1433,
        5,198,0,0,1432,1431,1,0,0,0,1432,1433,1,0,0,0,1433,1434,1,0,0,0,
        1434,1435,5,212,0,0,1435,1436,3,114,57,0,1436,1438,5,213,0,0,1437,
        1439,3,192,96,0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,1442,1,
        0,0,0,1440,1441,5,219,0,0,1441,1443,3,118,59,0,1442,1440,1,0,0,0,
        1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1445,3,58,29,0,1445,1454,
        1,0,0,0,1446,1447,5,133,0,0,1447,1448,5,212,0,0,1448,1449,3,114,
        57,0,1449,1450,5,213,0,0,1450,1451,5,164,0,0,1451,1452,3,164,82,
        0,1452,1454,1,0,0,0,1453,1428,1,0,0,0,1453,1446,1,0,0,0,1454,177,
        1,0,0,0,1455,1456,5,102,0,0,1456,1457,5,212,0,0,1457,1458,3,164,
        82,0,1458,1459,5,213,0,0,1459,1460,5,216,0,0,1460,1465,3,180,90,
        0,1461,1462,5,218,0,0,1462,1464,3,180,90,0,1463,1461,1,0,0,0,1464,
        1467,1,0,0,0,1465,1463,1,0,0,0,1465,1466,1,0,0,0,1466,1469,1,0,0,
        0,1467,1465,1,0,0,0,1468,1470,5,218,0,0,1469,1468,1,0,0,0,1469,1470,
        1,0,0,0,1470,1471,1,0,0,0,1471,1472,5,217,0,0,1472,179,1,0,0,0,1473,
        1478,3,164,82,0,1474,1475,5,218,0,0,1475,1477,3,164,82,0,1476,1474,
        1,0,0,0,1477,1480,1,0,0,0,1478,1476,1,0,0,0,1478,1479,1,0,0,0,1479,
        1481,1,0,0,0,1480,1478,1,0,0,0,1481,1482,5,164,0,0,1482,1483,3,164,
        82,0,1483,181,1,0,0,0,1484,1485,5,104,0,0,1485,1487,3,198,99,0,1486,
        1488,3,212,106,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,183,1,
        0,0,0,1489,1490,7,14,0,0,1490,185,1,0,0,0,1491,1499,5,131,0,0,1492,
        1495,3,164,82,0,1493,1494,5,164,0,0,1494,1496,3,164,82,0,1495,1493,
        1,0,0,0,1495,1496,1,0,0,0,1496,1500,1,0,0,0,1497,1498,5,132,0,0,
        1498,1500,3,164,82,0,1499,1492,1,0,0,0,1499,1497,1,0,0,0,1500,187,
        1,0,0,0,1501,1506,3,190,95,0,1502,1503,5,218,0,0,1503,1505,3,190,
        95,0,1504,1502,1,0,0,0,1505,1508,1,0,0,0,1506,1504,1,0,0,0,1506,
        1507,1,0,0,0,1507,1510,1,0,0,0,1508,1506,1,0,0,0,1509,1511,5,218,
        0,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,189,1,0,0,0,1512,1515,
        3,164,82,0,1513,1514,5,164,0,0,1514,1516,3,164,82,0,1515,1513,1,
        0,0,0,1515,1516,1,0,0,0,1516,1525,1,0,0,0,1517,1518,3,164,82,0,1518,
        1519,5,164,0,0,1519,1521,1,0,0,0,1520,1517,1,0,0,0,1520,1521,1,0,
        0,0,1521,1522,1,0,0,0,1522,1523,5,198,0,0,1523,1525,3,236,118,0,
        1524,1512,1,0,0,0,1524,1520,1,0,0,0,1525,191,1,0,0,0,1526,1527,5,
        128,0,0,1527,1528,5,212,0,0,1528,1533,3,194,97,0,1529,1530,5,218,
        0,0,1530,1532,3,194,97,0,1531,1529,1,0,0,0,1532,1535,1,0,0,0,1533,
        1531,1,0,0,0,1533,1534,1,0,0,0,1534,1536,1,0,0,0,1535,1533,1,0,0,
        0,1536,1537,5,213,0,0,1537,193,1,0,0,0,1538,1540,5,198,0,0,1539,
        1538,1,0,0,0,1539,1540,1,0,0,0,1540,1541,1,0,0,0,1541,1542,5,224,
        0,0,1542,195,1,0,0,0,1543,1545,3,204,102,0,1544,1546,3,42,21,0,1545,
        1544,1,0,0,0,1545,1546,1,0,0,0,1546,1549,1,0,0,0,1547,1549,5,118,
        0,0,1548,1543,1,0,0,0,1548,1547,1,0,0,0,1549,197,1,0,0,0,1550,1553,
        3,204,102,0,1551,1553,3,202,101,0,1552,1550,1,0,0,0,1552,1551,1,
        0,0,0,1553,1555,1,0,0,0,1554,1556,3,42,21,0,1555,1554,1,0,0,0,1555,
        1556,1,0,0,0,1556,1561,1,0,0,0,1557,1561,3,270,135,0,1558,1561,5,
        118,0,0,1559,1561,3,200,100,0,1560,1552,1,0,0,0,1560,1557,1,0,0,
        0,1560,1558,1,0,0,0,1560,1559,1,0,0,0,1561,199,1,0,0,0,1562,1564,
        3,44,22,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1566,1,0,0,0,
        1565,1567,5,110,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,1569,
        1,0,0,0,1568,1570,3,262,131,0,1569,1568,1,0,0,0,1569,1570,1,0,0,
        0,1570,1572,1,0,0,0,1571,1573,5,108,0,0,1572,1571,1,0,0,0,1572,1573,
        1,0,0,0,1573,1595,1,0,0,0,1574,1576,3,28,14,0,1575,1577,3,32,16,
        0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,1580,1,0,0,0,1578,1579,
        5,76,0,0,1579,1581,3,196,98,0,1580,1578,1,0,0,0,1580,1581,1,0,0,
        0,1581,1584,1,0,0,0,1582,1583,5,86,0,0,1583,1585,3,30,15,0,1584,
        1582,1,0,0,0,1584,1585,1,0,0,0,1585,1596,1,0,0,0,1586,1587,5,96,
        0,0,1587,1589,3,264,132,0,1588,1590,3,32,16,0,1589,1588,1,0,0,0,
        1589,1590,1,0,0,0,1590,1593,1,0,0,0,1591,1592,5,76,0,0,1592,1594,
        3,30,15,0,1593,1591,1,0,0,0,1593,1594,1,0,0,0,1594,1596,1,0,0,0,
        1595,1574,1,0,0,0,1595,1586,1,0,0,0,1596,1597,1,0,0,0,1597,1601,
        5,216,0,0,1598,1600,3,128,64,0,1599,1598,1,0,0,0,1600,1603,1,0,0,
        0,1601,1599,1,0,0,0,1601,1602,1,0,0,0,1602,1604,1,0,0,0,1603,1601,
        1,0,0,0,1604,1605,5,217,0,0,1605,201,1,0,0,0,1606,1611,3,248,124,
        0,1607,1608,5,193,0,0,1608,1610,3,250,125,0,1609,1607,1,0,0,0,1610,
        1613,1,0,0,0,1611,1609,1,0,0,0,1611,1612,1,0,0,0,1612,203,1,0,0,
        0,1613,1611,1,0,0,0,1614,1616,5,103,0,0,1615,1614,1,0,0,0,1615,1616,
        1,0,0,0,1616,1618,1,0,0,0,1617,1619,5,194,0,0,1618,1617,1,0,0,0,
        1618,1619,1,0,0,0,1619,1620,1,0,0,0,1620,1621,3,206,103,0,1621,205,
        1,0,0,0,1622,1636,3,264,132,0,1623,1628,3,264,132,0,1624,1625,5,
        194,0,0,1625,1627,3,264,132,0,1626,1624,1,0,0,0,1627,1630,1,0,0,
        0,1628,1626,1,0,0,0,1628,1629,1,0,0,0,1629,1633,1,0,0,0,1630,1628,
        1,0,0,0,1631,1632,5,194,0,0,1632,1634,3,208,104,0,1633,1631,1,0,
        0,0,1633,1634,1,0,0,0,1634,1636,1,0,0,0,1635,1622,1,0,0,0,1635,1623,
        1,0,0,0,1636,207,1,0,0,0,1637,1640,3,264,132,0,1638,1639,5,46,0,
        0,1639,1641,3,264,132,0,1640,1638,1,0,0,0,1640,1641,1,0,0,0,1641,
        1657,1,0,0,0,1642,1643,5,216,0,0,1643,1648,3,208,104,0,1644,1645,
        5,218,0,0,1645,1647,3,208,104,0,1646,1644,1,0,0,0,1647,1650,1,0,
        0,0,1648,1646,1,0,0,0,1648,1649,1,0,0,0,1649,1652,1,0,0,0,1650,1648,
        1,0,0,0,1651,1653,5,218,0,0,1652,1651,1,0,0,0,1652,1653,1,0,0,0,
        1653,1654,1,0,0,0,1654,1655,5,217,0,0,1655,1657,1,0,0,0,1656,1637,
        1,0,0,0,1656,1642,1,0,0,0,1657,209,1,0,0,0,1658,1663,3,204,102,0,
        1659,1660,5,218,0,0,1660,1662,3,204,102,0,1661,1659,1,0,0,0,1662,
        1665,1,0,0,0,1663,1661,1,0,0,0,1663,1664,1,0,0,0,1664,211,1,0,0,
        0,1665,1663,1,0,0,0,1666,1676,5,212,0,0,1667,1672,3,214,107,0,1668,
        1669,5,218,0,0,1669,1671,3,214,107,0,1670,1668,1,0,0,0,1671,1674,
        1,0,0,0,1672,1670,1,0,0,0,1672,1673,1,0,0,0,1673,1677,1,0,0,0,1674,
        1672,1,0,0,0,1675,1677,3,186,93,0,1676,1667,1,0,0,0,1676,1675,1,
        0,0,0,1676,1677,1,0,0,0,1677,1679,1,0,0,0,1678,1680,5,218,0,0,1679,
        1678,1,0,0,0,1679,1680,1,0,0,0,1680,1681,1,0,0,0,1681,1682,5,213,
        0,0,1682,213,1,0,0,0,1683,1685,3,216,108,0,1684,1683,1,0,0,0,1684,
        1685,1,0,0,0,1685,1687,1,0,0,0,1686,1688,5,195,0,0,1687,1686,1,0,
        0,0,1687,1688,1,0,0,0,1688,1689,1,0,0,0,1689,1693,3,164,82,0,1690,
        1691,5,198,0,0,1691,1693,3,236,118,0,1692,1684,1,0,0,0,1692,1690,
        1,0,0,0,1693,215,1,0,0,0,1694,1695,3,264,132,0,1695,1696,5,219,0,
        0,1696,217,1,0,0,0,1697,1733,3,220,110,0,1698,1733,3,230,115,0,1699,
        1700,5,45,0,0,1700,1705,5,212,0,0,1701,1703,3,188,94,0,1702,1704,
        5,218,0,0,1703,1702,1,0,0,0,1703,1704,1,0,0,0,1704,1706,1,0,0,0,
        1705,1701,1,0,0,0,1705,1706,1,0,0,0,1706,1707,1,0,0,0,1707,1733,
        5,213,0,0,1708,1713,5,214,0,0,1709,1711,3,188,94,0,1710,1712,5,218,
        0,0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,1712,1714,1,0,0,0,1713,1709,
        1,0,0,0,1713,1714,1,0,0,0,1714,1715,1,0,0,0,1715,1733,5,215,0,0,
        1716,1717,7,15,0,0,1717,1733,3,218,109,0,1718,1721,3,230,115,0,1719,
        1721,3,220,110,0,1720,1718,1,0,0,0,1720,1719,1,0,0,0,1721,1729,1,
        0,0,0,1722,1725,5,210,0,0,1723,1726,3,230,115,0,1724,1726,3,220,
        110,0,1725,1723,1,0,0,0,1725,1724,1,0,0,0,1726,1728,1,0,0,0,1727,
        1722,1,0,0,0,1728,1731,1,0,0,0,1729,1727,1,0,0,0,1729,1730,1,0,0,
        0,1730,1733,1,0,0,0,1731,1729,1,0,0,0,1732,1697,1,0,0,0,1732,1698,
        1,0,0,0,1732,1699,1,0,0,0,1732,1708,1,0,0,0,1732,1716,1,0,0,0,1732,
        1720,1,0,0,0,1733,219,1,0,0,0,1734,1740,5,105,0,0,1735,1740,3,222,
        111,0,1736,1740,3,268,134,0,1737,1740,3,226,113,0,1738,1740,3,204,
        102,0,1739,1734,1,0,0,0,1739,1735,1,0,0,0,1739,1736,1,0,0,0,1739,
        1737,1,0,0,0,1739,1738,1,0,0,0,1740,221,1,0,0,0,1741,1746,5,228,
        0,0,1742,1746,5,49,0,0,1743,1746,3,224,112,0,1744,1746,3,228,114,
        0,1745,1741,1,0,0,0,1745,1742,1,0,0,0,1745,1743,1,0,0,0,1745,1744,
        1,0,0,0,1746,223,1,0,0,0,1747,1748,7,16,0,0,1748,225,1,0,0,0,1749,
        1750,7,17,0,0,1750,1755,5,192,0,0,1751,1756,3,264,132,0,1752,1756,
        5,141,0,0,1753,1756,5,137,0,0,1754,1756,5,138,0,0,1755,1751,1,0,
        0,0,1755,1752,1,0,0,0,1755,1753,1,0,0,0,1755,1754,1,0,0,0,1756,1768,
        1,0,0,0,1757,1761,3,196,98,0,1758,1761,3,254,127,0,1759,1761,3,230,
        115,0,1760,1757,1,0,0,0,1760,1758,1,0,0,0,1760,1759,1,0,0,0,1761,
        1762,1,0,0,0,1762,1765,5,192,0,0,1763,1766,3,264,132,0,1764,1766,
        3,254,127,0,1765,1763,1,0,0,0,1765,1764,1,0,0,0,1766,1768,1,0,0,
        0,1767,1749,1,0,0,0,1767,1760,1,0,0,0,1768,227,1,0,0,0,1769,1770,
        5,225,0,0,1770,229,1,0,0,0,1771,1773,5,235,0,0,1772,1774,5,243,0,
        0,1773,1772,1,0,0,0,1774,1775,1,0,0,0,1775,1773,1,0,0,0,1775,1776,
        1,0,0,0,1776,1793,1,0,0,0,1777,1779,5,234,0,0,1778,1780,5,243,0,
        0,1779,1778,1,0,0,0,1780,1781,1,0,0,0,1781,1779,1,0,0,0,1781,1782,
        1,0,0,0,1782,1793,1,0,0,0,1783,1793,5,232,0,0,1784,1788,5,233,0,
        0,1785,1787,3,232,116,0,1786,1785,1,0,0,0,1787,1790,1,0,0,0,1788,
        1786,1,0,0,0,1788,1789,1,0,0,0,1789,1791,1,0,0,0,1790,1788,1,0,0,
        0,1791,1793,5,233,0,0,1792,1771,1,0,0,0,1792,1777,1,0,0,0,1792,1783,
        1,0,0,0,1792,1784,1,0,0,0,1793,231,1,0,0,0,1794,1798,5,239,0,0,1795,
        1798,5,238,0,0,1796,1798,3,236,118,0,1797,1794,1,0,0,0,1797,1795,
        1,0,0,0,1797,1796,1,0,0,0,1798,233,1,0,0,0,1799,1804,3,236,118,0,
        1800,1801,5,218,0,0,1801,1803,3,236,118,0,1802,1800,1,0,0,0,1803,
        1806,1,0,0,0,1804,1802,1,0,0,0,1804,1805,1,0,0,0,1805,235,1,0,0,
        0,1806,1804,1,0,0,0,1807,1811,3,238,119,0,1808,1810,3,240,120,0,
        1809,1808,1,0,0,0,1810,1813,1,0,0,0,1811,1809,1,0,0,0,1811,1812,
        1,0,0,0,1812,237,1,0,0,0,1813,1811,1,0,0,0,1814,1821,3,248,124,0,
        1815,1821,3,242,121,0,1816,1817,5,212,0,0,1817,1818,3,182,91,0,1818,
        1819,5,213,0,0,1819,1821,1,0,0,0,1820,1814,1,0,0,0,1820,1815,1,0,
        0,0,1820,1816,1,0,0,0,1821,239,1,0,0,0,1822,1823,5,193,0,0,1823,
        1825,3,250,125,0,1824,1826,3,246,123,0,1825,1824,1,0,0,0,1825,1826,
        1,0,0,0,1826,241,1,0,0,0,1827,1828,3,244,122,0,1828,1829,3,246,123,
        0,1829,243,1,0,0,0,1830,1835,3,204,102,0,1831,1835,3,226,113,0,1832,
        1835,3,248,124,0,1833,1835,3,162,81,0,1834,1830,1,0,0,0,1834,1831,
        1,0,0,0,1834,1832,1,0,0,0,1834,1833,1,0,0,0,1835,245,1,0,0,0,1836,
        1838,3,42,21,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1840,1,0,
        0,0,1839,1841,3,212,106,0,1840,1839,1,0,0,0,1841,1842,1,0,0,0,1842,
        1840,1,0,0,0,1842,1843,1,0,0,0,1843,1847,1,0,0,0,1844,1846,3,256,
        128,0,1845,1844,1,0,0,0,1846,1849,1,0,0,0,1847,1845,1,0,0,0,1847,
        1848,1,0,0,0,1848,247,1,0,0,0,1849,1847,1,0,0,0,1850,1853,3,254,
        127,0,1851,1852,5,192,0,0,1852,1854,3,254,127,0,1853,1851,1,0,0,
        0,1853,1854,1,0,0,0,1854,1860,1,0,0,0,1855,1856,3,196,98,0,1856,
        1857,5,192,0,0,1857,1858,3,254,127,0,1858,1860,1,0,0,0,1859,1850,
        1,0,0,0,1859,1855,1,0,0,0,1860,249,1,0,0,0,1861,1864,3,252,126,0,
        1862,1864,3,254,127,0,1863,1861,1,0,0,0,1863,1862,1,0,0,0,1864,251,
        1,0,0,0,1865,1871,3,264,132,0,1866,1867,5,216,0,0,1867,1868,3,164,
        82,0,1868,1869,5,217,0,0,1869,1871,1,0,0,0,1870,1865,1,0,0,0,1870,
        1866,1,0,0,0,1871,1875,1,0,0,0,1872,1874,3,256,128,0,1873,1872,1,
        0,0,0,1874,1877,1,0,0,0,1875,1873,1,0,0,0,1875,1876,1,0,0,0,1876,
        253,1,0,0,0,1877,1875,1,0,0,0,1878,1880,5,209,0,0,1879,1878,1,0,
        0,0,1880,1883,1,0,0,0,1881,1879,1,0,0,0,1881,1882,1,0,0,0,1882,1890,
        1,0,0,0,1883,1881,1,0,0,0,1884,1891,5,224,0,0,1885,1886,5,209,0,
        0,1886,1887,5,216,0,0,1887,1888,3,164,82,0,1888,1889,5,217,0,0,1889,
        1891,1,0,0,0,1890,1884,1,0,0,0,1890,1885,1,0,0,0,1891,1895,1,0,0,
        0,1892,1894,3,256,128,0,1893,1892,1,0,0,0,1894,1897,1,0,0,0,1895,
        1893,1,0,0,0,1895,1896,1,0,0,0,1896,255,1,0,0,0,1897,1895,1,0,0,
        0,1898,1900,5,214,0,0,1899,1901,3,164,82,0,1900,1899,1,0,0,0,1900,
        1901,1,0,0,0,1901,1902,1,0,0,0,1902,1908,5,215,0,0,1903,1904,5,216,
        0,0,1904,1905,3,164,82,0,1905,1906,5,217,0,0,1906,1908,1,0,0,0,1907,
        1898,1,0,0,0,1907,1903,1,0,0,0,1908,257,1,0,0,0,1909,1911,3,260,
        130,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,1918,1,0,0,0,1912,
        1914,5,218,0,0,1913,1915,3,260,130,0,1914,1913,1,0,0,0,1914,1915,
        1,0,0,0,1915,1917,1,0,0,0,1916,1912,1,0,0,0,1917,1920,1,0,0,0,1918,
        1916,1,0,0,0,1918,1919,1,0,0,0,1919,259,1,0,0,0,1920,1918,1,0,0,
        0,1921,1929,3,236,118,0,1922,1923,5,98,0,0,1923,1924,5,212,0,0,1924,
        1925,3,258,129,0,1925,1926,5,213,0,0,1926,1929,1,0,0,0,1927,1929,
        3,190,95,0,1928,1921,1,0,0,0,1928,1922,1,0,0,0,1928,1927,1,0,0,0,
        1929,261,1,0,0,0,1930,1931,7,18,0,0,1931,263,1,0,0,0,1932,1933,7,
        19,0,0,1933,265,1,0,0,0,1934,1935,7,20,0,0,1935,267,1,0,0,0,1936,
        1937,7,21,0,0,1937,269,1,0,0,0,1938,1939,7,22,0,0,1939,271,1,0,0,
        0,1940,1941,7,23,0,0,1941,273,1,0,0,0,252,275,279,281,289,292,318,
        322,327,332,338,352,356,362,367,372,379,385,392,399,402,406,410,
        417,420,425,428,431,434,439,443,447,452,456,458,464,476,493,500,
        508,512,517,523,531,539,545,552,559,564,570,599,613,617,626,630,
        635,661,672,676,680,689,699,704,710,715,720,725,730,736,742,748,
        772,777,780,790,793,806,814,821,824,829,833,842,846,872,877,884,
        891,899,902,908,912,915,920,924,927,930,933,941,948,957,970,982,
        988,992,999,1005,1009,1016,1023,1027,1034,1038,1040,1046,1053,1057,
        1061,1074,1077,1084,1091,1095,1101,1105,1110,1115,1122,1130,1139,
        1143,1149,1158,1163,1170,1177,1183,1246,1263,1270,1275,1277,1315,
        1337,1339,1344,1349,1354,1357,1363,1369,1376,1381,1387,1397,1402,
        1406,1410,1413,1420,1423,1428,1432,1438,1442,1453,1465,1469,1478,
        1487,1495,1499,1506,1510,1515,1520,1524,1533,1539,1545,1548,1552,
        1555,1560,1563,1566,1569,1572,1576,1580,1584,1589,1593,1595,1601,
        1611,1615,1618,1628,1633,1635,1640,1648,1652,1656,1663,1672,1676,
        1679,1684,1687,1692,1703,1705,1711,1713,1720,1725,1729,1732,1739,
        1745,1755,1760,1765,1767,1775,1781,1788,1792,1797,1804,1811,1820,
        1825,1834,1837,1842,1847,1853,1859,1863,1870,1875,1881,1890,1895,
        1900,1907,1910,1914,1918,1928
    ]

class PhpParser ( Parser ):

    grammarFileName = "PhpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'<?xml'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'?>'", "<INVALID>", "<INVALID>", "'/>'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'#['", "'abstract'", "'array'", "'as'", 
                     "'binary'", "<INVALID>", "<INVALID>", "'break'", "'callable'", 
                     "'case'", "'catch'", "'class'", "'clone'", "'const'", 
                     "'continue'", "'declare'", "'default'", "'do'", "'real'", 
                     "'double'", "'echo'", "'else'", "'elseif'", "'empty'", 
                     "'enum'", "'enddeclare'", "'endfor'", "'endforeach'", 
                     "'endif'", "'endswitch'", "'endwhile'", "'eval'", "'die'", 
                     "'extends'", "'final'", "'finally'", "'float'", "'for'", 
                     "'foreach'", "'function'", "'global'", "'goto'", "'if'", 
                     "'implements'", "'import'", "'include'", "'include_once'", 
                     "'instanceof'", "'insteadof'", "'int8'", "'int16'", 
                     "'int64'", "<INVALID>", "'interface'", "'isset'", "'list'", 
                     "'and'", "'or'", "'xor'", "'match'", "'namespace'", 
                     "'new'", "'null'", "'object'", "'parent'", "'partial'", 
                     "'print'", "'private'", "'protected'", "'public'", 
                     "'readonly'", "'require'", "'require_once'", "'resource'", 
                     "'return'", "'static'", "'string'", "'switch'", "'throw'", 
                     "'trait'", "'try'", "'clrtypeof'", "<INVALID>", "'unicode'", 
                     "'unset'", "'use'", "'var'", "'while'", "'yield'", 
                     "'from'", "'fn'", "'ticks'", "'encoding'", "'strict_types'", 
                     "'__get'", "'__set'", "'__call'", "'__callstatic'", 
                     "'__construct'", "'__destruct'", "'__wakeup'", "'__sleep'", 
                     "'__autoload'", "'__isset'", "'__unset'", "'__tostring'", 
                     "'__invoke'", "'__set_state'", "'__clone'", "'__debuginfo'", 
                     "'__namespace__'", "'__class__'", "'__trait__'", "'__function__'", 
                     "'__method__'", "'__line__'", "'__file__'", "'__dir__'", 
                     "'<=>'", "'<:'", "':>'", "'=>'", "'++'", "'--'", "'==='", 
                     "'!=='", "'=='", "<INVALID>", "'<='", "'>='", "'+='", 
                     "'-='", "'*='", "'**'", "'**='", "'/='", "'.='", "'%='", 
                     "'<<='", "'>>='", "'&='", "'|='", "'^='", "'||'", "'&&'", 
                     "'??'", "'??='", "'<<'", "'>>'", "'::'", "'->'", "'\\'", 
                     "'...'", "<INVALID>", "<INVALID>", "'&'", "'|'", "'!'", 
                     "'^'", "'+'", "'-'", "'*'", "'%'", "<INVALID>", "'~'", 
                     "'@'", "<INVALID>", "'.'", "<INVALID>", "'('", "')'", 
                     "'['", "']'", "<INVALID>", "'}'", "','", "':'", "';'", 
                     "<INVALID>", "'''", "'`'" ]

    symbolicNames = [ "<INVALID>", "SeaWhitespace", "HtmlText", "XmlStart", 
                      "PHPStart", "HtmlScriptOpen", "HtmlStyleOpen", "HtmlComment", 
                      "HtmlDtd", "HtmlOpen", "Shebang", "Error", "XmlText", 
                      "XmlClose", "PHPStartInside", "HtmlClose", "HtmlSlashClose", 
                      "HtmlSlash", "HtmlEquals", "HtmlStartQuoteString", 
                      "HtmlStartDoubleQuoteString", "HtmlHex", "HtmlDecimal", 
                      "HtmlSpace", "HtmlName", "ErrorInside", "PHPStartInsideQuoteString", 
                      "HtmlEndQuoteString", "HtmlQuoteString", "ErrorHtmlQuote", 
                      "PHPStartDoubleQuoteString", "HtmlEndDoubleQuoteString", 
                      "HtmlDoubleQuoteString", "ErrorHtmlDoubleQuote", "ScriptText", 
                      "HtmlScriptClose", "PHPStartInsideScript", "StyleBody", 
                      "PHPEnd", "Whitespace", "MultiLineComment", "SingleLineComment", 
                      "ShellStyleComment", "AttributeStart", "Abstract", 
                      "Array", "As", "BinaryCast", "BoolType", "BooleanConstant", 
                      "Break", "Callable", "Case", "Catch", "Class", "Clone", 
                      "Const", "Continue", "Declare", "Default", "Do", "DoubleCast", 
                      "DoubleType", "Echo", "Else", "ElseIf", "Empty", "Enum_", 
                      "EndDeclare", "EndFor", "EndForeach", "EndIf", "EndSwitch", 
                      "EndWhile", "Eval", "Exit", "Extends", "Final", "Finally", 
                      "FloatCast", "For", "Foreach", "Function_", "Global", 
                      "Goto", "If", "Implements", "Import", "Include", "IncludeOnce", 
                      "InstanceOf", "InsteadOf", "Int8Cast", "Int16Cast", 
                      "Int64Type", "IntType", "Interface", "IsSet", "List", 
                      "LogicalAnd", "LogicalOr", "LogicalXor", "Match_", 
                      "Namespace", "New", "Null", "ObjectType", "Parent_", 
                      "Partial", "Print", "Private", "Protected", "Public", 
                      "Readonly", "Require", "RequireOnce", "Resource", 
                      "Return", "Static", "StringType", "Switch", "Throw", 
                      "Trait", "Try", "Typeof", "UintCast", "UnicodeCast", 
                      "Unset", "Use", "Var", "While", "Yield", "From", "LambdaFn", 
                      "Ticks", "Encoding", "StrictTypes", "Get", "Set", 
                      "Call", "CallStatic", "Constructor", "Destruct", "Wakeup", 
                      "Sleep", "Autoload", "IsSet__", "Unset__", "ToString__", 
                      "Invoke", "SetState", "Clone__", "DebugInfo", "Namespace__", 
                      "Class__", "Traic__", "Function__", "Method__", "Line__", 
                      "File__", "Dir__", "Spaceship", "Lgeneric", "Rgeneric", 
                      "DoubleArrow", "Inc", "Dec", "IsIdentical", "IsNoidentical", 
                      "IsEqual", "IsNotEq", "IsSmallerOrEqual", "IsGreaterOrEqual", 
                      "PlusEqual", "MinusEqual", "MulEqual", "Pow", "PowEqual", 
                      "DivEqual", "Concaequal", "ModEqual", "ShiftLeftEqual", 
                      "ShiftRightEqual", "AndEqual", "OrEqual", "XorEqual", 
                      "BooleanOr", "BooleanAnd", "NullCoalescing", "NullCoalescingEqual", 
                      "ShiftLeft", "ShiftRight", "DoubleColon", "ObjectOperator", 
                      "NamespaceSeparator", "Ellipsis", "Less", "Greater", 
                      "Ampersand", "Pipe", "Bang", "Caret", "Plus", "Minus", 
                      "Asterisk", "Percent", "Divide", "Tilde", "SuppressWarnings", 
                      "Dollar", "Dot", "QuestionMark", "OpenRoundBracket", 
                      "CloseRoundBracket", "OpenSquareBracket", "CloseSquareBracket", 
                      "OpenCurlyBracket", "CloseCurlyBracket", "Comma", 
                      "Colon", "SemiColon", "Eq", "Quote", "BackQuote", 
                      "VarName", "Label", "Octal", "Decimal", "Real", "Hex", 
                      "Binary", "BackQuoteString", "SingleQuoteString", 
                      "DoubleQuote", "StartNowDoc", "StartHereDoc", "ErrorPhp", 
                      "CurlyDollar", "UnicodeEscape", "StringPart", "Comment", 
                      "PHPEndSingleLineComment", "CommentEnd", "HereDocText", 
                      "XmlText2" ]

    RULE_htmlDocument = 0
    RULE_inlineHtml = 1
    RULE_htmlElement = 2
    RULE_scriptText = 3
    RULE_phpBlock = 4
    RULE_importStatement = 5
    RULE_topStatement = 6
    RULE_useDeclaration = 7
    RULE_useDeclarationContentList = 8
    RULE_useDeclarationContent = 9
    RULE_namespaceDeclaration = 10
    RULE_namespaceStatement = 11
    RULE_functionDeclaration = 12
    RULE_classDeclaration = 13
    RULE_classEntryType = 14
    RULE_interfaceList = 15
    RULE_typeParameterListInBrackets = 16
    RULE_typeParameterList = 17
    RULE_typeParameterWithDefaultsList = 18
    RULE_typeParameterDecl = 19
    RULE_typeParameterWithDefaultDecl = 20
    RULE_genericDynamicArgs = 21
    RULE_attributes = 22
    RULE_attributeGroup = 23
    RULE_attribute = 24
    RULE_innerStatementList = 25
    RULE_innerStatement = 26
    RULE_statement = 27
    RULE_emptyStatement_ = 28
    RULE_blockStatement = 29
    RULE_ifStatement = 30
    RULE_elseIfStatement = 31
    RULE_elseIfColonStatement = 32
    RULE_elseStatement = 33
    RULE_elseColonStatement = 34
    RULE_whileStatement = 35
    RULE_doWhileStatement = 36
    RULE_forStatement = 37
    RULE_forInit = 38
    RULE_forUpdate = 39
    RULE_switchStatement = 40
    RULE_switchBlock = 41
    RULE_breakStatement = 42
    RULE_continueStatement = 43
    RULE_returnStatement = 44
    RULE_expressionStatement = 45
    RULE_unsetStatement = 46
    RULE_foreachStatement = 47
    RULE_tryCatchFinally = 48
    RULE_catchClause = 49
    RULE_finallyStatement = 50
    RULE_throwStatement = 51
    RULE_gotoStatement = 52
    RULE_declareStatement = 53
    RULE_inlineHtmlStatement = 54
    RULE_declareList = 55
    RULE_directive = 56
    RULE_formalParameterList = 57
    RULE_formalParameter = 58
    RULE_typeHint = 59
    RULE_globalStatement = 60
    RULE_globalVar = 61
    RULE_echoStatement = 62
    RULE_staticVariableStatement = 63
    RULE_classStatement = 64
    RULE_traitAdaptations = 65
    RULE_traitAdaptationStatement = 66
    RULE_traitPrecedence = 67
    RULE_traitAlias = 68
    RULE_traitMethodReference = 69
    RULE_baseCtorCall = 70
    RULE_returnTypeDecl = 71
    RULE_methodBody = 72
    RULE_propertyModifiers = 73
    RULE_memberModifiers = 74
    RULE_variableInitializer = 75
    RULE_identifierInitializer = 76
    RULE_globalConstantDeclaration = 77
    RULE_enumDeclaration = 78
    RULE_enumItem = 79
    RULE_expressionList = 80
    RULE_parentheses = 81
    RULE_expression = 82
    RULE_assignable = 83
    RULE_arrayCreation = 84
    RULE_arrayDestructuring = 85
    RULE_indexedDestructItem = 86
    RULE_keyedDestructItem = 87
    RULE_lambdaFunctionExpr = 88
    RULE_matchExpr = 89
    RULE_matchItem = 90
    RULE_newExpr = 91
    RULE_assignmentOperator = 92
    RULE_yieldExpression = 93
    RULE_arrayItemList = 94
    RULE_arrayItem = 95
    RULE_lambdaFunctionUseVars = 96
    RULE_lambdaFunctionUseVar = 97
    RULE_qualifiedStaticTypeRef = 98
    RULE_typeRef = 99
    RULE_anonymousClass = 100
    RULE_indirectTypeRef = 101
    RULE_qualifiedNamespaceName = 102
    RULE_namespaceNameList = 103
    RULE_namespaceNameTail = 104
    RULE_qualifiedNamespaceNameList = 105
    RULE_arguments = 106
    RULE_actualArgument = 107
    RULE_argumentName = 108
    RULE_constantInitializer = 109
    RULE_constant = 110
    RULE_literalConstant = 111
    RULE_numericConstant = 112
    RULE_classConstant = 113
    RULE_stringConstant = 114
    RULE_string = 115
    RULE_interpolatedStringPart = 116
    RULE_chainList = 117
    RULE_chain = 118
    RULE_chainOrigin = 119
    RULE_memberAccess = 120
    RULE_functionCall = 121
    RULE_functionCallName = 122
    RULE_actualArguments = 123
    RULE_chainBase = 124
    RULE_keyedFieldName = 125
    RULE_keyedSimpleFieldName = 126
    RULE_keyedVariable = 127
    RULE_squareCurlyExpression = 128
    RULE_assignmentList = 129
    RULE_assignmentListElement = 130
    RULE_modifier = 131
    RULE_identifier = 132
    RULE_memberModifier = 133
    RULE_magicConstant = 134
    RULE_primitiveType = 135
    RULE_castOperation = 136

    ruleNames =  [ "htmlDocument", "inlineHtml", "htmlElement", "scriptText", 
                   "phpBlock", "importStatement", "topStatement", "useDeclaration", 
                   "useDeclarationContentList", "useDeclarationContent", 
                   "namespaceDeclaration", "namespaceStatement", "functionDeclaration", 
                   "classDeclaration", "classEntryType", "interfaceList", 
                   "typeParameterListInBrackets", "typeParameterList", "typeParameterWithDefaultsList", 
                   "typeParameterDecl", "typeParameterWithDefaultDecl", 
                   "genericDynamicArgs", "attributes", "attributeGroup", 
                   "attribute", "innerStatementList", "innerStatement", 
                   "statement", "emptyStatement_", "blockStatement", "ifStatement", 
                   "elseIfStatement", "elseIfColonStatement", "elseStatement", 
                   "elseColonStatement", "whileStatement", "doWhileStatement", 
                   "forStatement", "forInit", "forUpdate", "switchStatement", 
                   "switchBlock", "breakStatement", "continueStatement", 
                   "returnStatement", "expressionStatement", "unsetStatement", 
                   "foreachStatement", "tryCatchFinally", "catchClause", 
                   "finallyStatement", "throwStatement", "gotoStatement", 
                   "declareStatement", "inlineHtmlStatement", "declareList", 
                   "directive", "formalParameterList", "formalParameter", 
                   "typeHint", "globalStatement", "globalVar", "echoStatement", 
                   "staticVariableStatement", "classStatement", "traitAdaptations", 
                   "traitAdaptationStatement", "traitPrecedence", "traitAlias", 
                   "traitMethodReference", "baseCtorCall", "returnTypeDecl", 
                   "methodBody", "propertyModifiers", "memberModifiers", 
                   "variableInitializer", "identifierInitializer", "globalConstantDeclaration", 
                   "enumDeclaration", "enumItem", "expressionList", "parentheses", 
                   "expression", "assignable", "arrayCreation", "arrayDestructuring", 
                   "indexedDestructItem", "keyedDestructItem", "lambdaFunctionExpr", 
                   "matchExpr", "matchItem", "newExpr", "assignmentOperator", 
                   "yieldExpression", "arrayItemList", "arrayItem", "lambdaFunctionUseVars", 
                   "lambdaFunctionUseVar", "qualifiedStaticTypeRef", "typeRef", 
                   "anonymousClass", "indirectTypeRef", "qualifiedNamespaceName", 
                   "namespaceNameList", "namespaceNameTail", "qualifiedNamespaceNameList", 
                   "arguments", "actualArgument", "argumentName", "constantInitializer", 
                   "constant", "literalConstant", "numericConstant", "classConstant", 
                   "stringConstant", "string", "interpolatedStringPart", 
                   "chainList", "chain", "chainOrigin", "memberAccess", 
                   "functionCall", "functionCallName", "actualArguments", 
                   "chainBase", "keyedFieldName", "keyedSimpleFieldName", 
                   "keyedVariable", "squareCurlyExpression", "assignmentList", 
                   "assignmentListElement", "modifier", "identifier", "memberModifier", 
                   "magicConstant", "primitiveType", "castOperation" ]

    EOF = Token.EOF
    SeaWhitespace=1
    HtmlText=2
    XmlStart=3
    PHPStart=4
    HtmlScriptOpen=5
    HtmlStyleOpen=6
    HtmlComment=7
    HtmlDtd=8
    HtmlOpen=9
    Shebang=10
    Error=11
    XmlText=12
    XmlClose=13
    PHPStartInside=14
    HtmlClose=15
    HtmlSlashClose=16
    HtmlSlash=17
    HtmlEquals=18
    HtmlStartQuoteString=19
    HtmlStartDoubleQuoteString=20
    HtmlHex=21
    HtmlDecimal=22
    HtmlSpace=23
    HtmlName=24
    ErrorInside=25
    PHPStartInsideQuoteString=26
    HtmlEndQuoteString=27
    HtmlQuoteString=28
    ErrorHtmlQuote=29
    PHPStartDoubleQuoteString=30
    HtmlEndDoubleQuoteString=31
    HtmlDoubleQuoteString=32
    ErrorHtmlDoubleQuote=33
    ScriptText=34
    HtmlScriptClose=35
    PHPStartInsideScript=36
    StyleBody=37
    PHPEnd=38
    Whitespace=39
    MultiLineComment=40
    SingleLineComment=41
    ShellStyleComment=42
    AttributeStart=43
    Abstract=44
    Array=45
    As=46
    BinaryCast=47
    BoolType=48
    BooleanConstant=49
    Break=50
    Callable=51
    Case=52
    Catch=53
    Class=54
    Clone=55
    Const=56
    Continue=57
    Declare=58
    Default=59
    Do=60
    DoubleCast=61
    DoubleType=62
    Echo=63
    Else=64
    ElseIf=65
    Empty=66
    Enum_=67
    EndDeclare=68
    EndFor=69
    EndForeach=70
    EndIf=71
    EndSwitch=72
    EndWhile=73
    Eval=74
    Exit=75
    Extends=76
    Final=77
    Finally=78
    FloatCast=79
    For=80
    Foreach=81
    Function_=82
    Global=83
    Goto=84
    If=85
    Implements=86
    Import=87
    Include=88
    IncludeOnce=89
    InstanceOf=90
    InsteadOf=91
    Int8Cast=92
    Int16Cast=93
    Int64Type=94
    IntType=95
    Interface=96
    IsSet=97
    List=98
    LogicalAnd=99
    LogicalOr=100
    LogicalXor=101
    Match_=102
    Namespace=103
    New=104
    Null=105
    ObjectType=106
    Parent_=107
    Partial=108
    Print=109
    Private=110
    Protected=111
    Public=112
    Readonly=113
    Require=114
    RequireOnce=115
    Resource=116
    Return=117
    Static=118
    StringType=119
    Switch=120
    Throw=121
    Trait=122
    Try=123
    Typeof=124
    UintCast=125
    UnicodeCast=126
    Unset=127
    Use=128
    Var=129
    While=130
    Yield=131
    From=132
    LambdaFn=133
    Ticks=134
    Encoding=135
    StrictTypes=136
    Get=137
    Set=138
    Call=139
    CallStatic=140
    Constructor=141
    Destruct=142
    Wakeup=143
    Sleep=144
    Autoload=145
    IsSet__=146
    Unset__=147
    ToString__=148
    Invoke=149
    SetState=150
    Clone__=151
    DebugInfo=152
    Namespace__=153
    Class__=154
    Traic__=155
    Function__=156
    Method__=157
    Line__=158
    File__=159
    Dir__=160
    Spaceship=161
    Lgeneric=162
    Rgeneric=163
    DoubleArrow=164
    Inc=165
    Dec=166
    IsIdentical=167
    IsNoidentical=168
    IsEqual=169
    IsNotEq=170
    IsSmallerOrEqual=171
    IsGreaterOrEqual=172
    PlusEqual=173
    MinusEqual=174
    MulEqual=175
    Pow=176
    PowEqual=177
    DivEqual=178
    Concaequal=179
    ModEqual=180
    ShiftLeftEqual=181
    ShiftRightEqual=182
    AndEqual=183
    OrEqual=184
    XorEqual=185
    BooleanOr=186
    BooleanAnd=187
    NullCoalescing=188
    NullCoalescingEqual=189
    ShiftLeft=190
    ShiftRight=191
    DoubleColon=192
    ObjectOperator=193
    NamespaceSeparator=194
    Ellipsis=195
    Less=196
    Greater=197
    Ampersand=198
    Pipe=199
    Bang=200
    Caret=201
    Plus=202
    Minus=203
    Asterisk=204
    Percent=205
    Divide=206
    Tilde=207
    SuppressWarnings=208
    Dollar=209
    Dot=210
    QuestionMark=211
    OpenRoundBracket=212
    CloseRoundBracket=213
    OpenSquareBracket=214
    CloseSquareBracket=215
    OpenCurlyBracket=216
    CloseCurlyBracket=217
    Comma=218
    Colon=219
    SemiColon=220
    Eq=221
    Quote=222
    BackQuote=223
    VarName=224
    Label=225
    Octal=226
    Decimal=227
    Real=228
    Hex=229
    Binary=230
    BackQuoteString=231
    SingleQuoteString=232
    DoubleQuote=233
    StartNowDoc=234
    StartHereDoc=235
    ErrorPhp=236
    CurlyDollar=237
    UnicodeEscape=238
    StringPart=239
    Comment=240
    PHPEndSingleLineComment=241
    CommentEnd=242
    HereDocText=243
    XmlText2=244

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class HtmlDocumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PhpParser.EOF, 0)

        def Shebang(self):
            return self.getToken(PhpParser.Shebang, 0)

        def inlineHtml(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.InlineHtmlContext)
            else:
                return self.getTypedRuleContext(PhpParser.InlineHtmlContext,i)


        def phpBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.PhpBlockContext)
            else:
                return self.getTypedRuleContext(PhpParser.PhpBlockContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_htmlDocument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlDocument" ):
                listener.enterHtmlDocument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlDocument" ):
                listener.exitHtmlDocument(self)




    def htmlDocument(self):

        localctx = PhpParser.HtmlDocumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_htmlDocument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 274
                self.match(PhpParser.Shebang)


            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8600244223124) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 420906795007) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4397045441345) != 0):
                self.state = 279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 277
                    self.inlineHtml()
                    pass

                elif la_ == 2:
                    self.state = 278
                    self.phpBlock()
                    pass


                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 284
            self.match(PhpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineHtmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def htmlElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.HtmlElementContext)
            else:
                return self.getTypedRuleContext(PhpParser.HtmlElementContext,i)


        def scriptText(self):
            return self.getTypedRuleContext(PhpParser.ScriptTextContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_inlineHtml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineHtml" ):
                listener.enterInlineHtml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineHtml" ):
                listener.exitInlineHtml(self)




    def inlineHtml(self):

        localctx = PhpParser.InlineHtmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_inlineHtml)
        try:
            self.state = 292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 8, 9, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 31, 32, 35, 37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 287 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 286
                        self.htmlElement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 289 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 291
                self.scriptText()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HtmlElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HtmlDtd(self):
            return self.getToken(PhpParser.HtmlDtd, 0)

        def HtmlClose(self):
            return self.getToken(PhpParser.HtmlClose, 0)

        def HtmlStyleOpen(self):
            return self.getToken(PhpParser.HtmlStyleOpen, 0)

        def HtmlOpen(self):
            return self.getToken(PhpParser.HtmlOpen, 0)

        def HtmlName(self):
            return self.getToken(PhpParser.HtmlName, 0)

        def HtmlSlashClose(self):
            return self.getToken(PhpParser.HtmlSlashClose, 0)

        def HtmlSlash(self):
            return self.getToken(PhpParser.HtmlSlash, 0)

        def HtmlText(self):
            return self.getToken(PhpParser.HtmlText, 0)

        def HtmlEquals(self):
            return self.getToken(PhpParser.HtmlEquals, 0)

        def HtmlStartQuoteString(self):
            return self.getToken(PhpParser.HtmlStartQuoteString, 0)

        def HtmlEndQuoteString(self):
            return self.getToken(PhpParser.HtmlEndQuoteString, 0)

        def HtmlStartDoubleQuoteString(self):
            return self.getToken(PhpParser.HtmlStartDoubleQuoteString, 0)

        def HtmlEndDoubleQuoteString(self):
            return self.getToken(PhpParser.HtmlEndDoubleQuoteString, 0)

        def HtmlHex(self):
            return self.getToken(PhpParser.HtmlHex, 0)

        def HtmlDecimal(self):
            return self.getToken(PhpParser.HtmlDecimal, 0)

        def HtmlQuoteString(self):
            return self.getToken(PhpParser.HtmlQuoteString, 0)

        def HtmlDoubleQuoteString(self):
            return self.getToken(PhpParser.HtmlDoubleQuoteString, 0)

        def StyleBody(self):
            return self.getToken(PhpParser.StyleBody, 0)

        def HtmlScriptOpen(self):
            return self.getToken(PhpParser.HtmlScriptOpen, 0)

        def HtmlScriptClose(self):
            return self.getToken(PhpParser.HtmlScriptClose, 0)

        def XmlStart(self):
            return self.getToken(PhpParser.XmlStart, 0)

        def XmlClose(self):
            return self.getToken(PhpParser.XmlClose, 0)

        def XmlText(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.XmlText)
            else:
                return self.getToken(PhpParser.XmlText, i)

        def getRuleIndex(self):
            return PhpParser.RULE_htmlElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlElement" ):
                listener.enterHtmlElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlElement" ):
                listener.exitHtmlElement(self)




    def htmlElement(self):

        localctx = PhpParser.HtmlElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_htmlElement)
        self._la = 0 # Token type
        try:
            self.state = 322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 294
                self.match(PhpParser.HtmlDtd)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 295
                self.match(PhpParser.HtmlClose)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 296
                self.match(PhpParser.HtmlStyleOpen)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 4)
                self.state = 297
                self.match(PhpParser.HtmlOpen)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 5)
                self.state = 298
                self.match(PhpParser.HtmlName)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 6)
                self.state = 299
                self.match(PhpParser.HtmlSlashClose)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 7)
                self.state = 300
                self.match(PhpParser.HtmlSlash)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 8)
                self.state = 301
                self.match(PhpParser.HtmlText)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 9)
                self.state = 302
                self.match(PhpParser.HtmlEquals)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 10)
                self.state = 303
                self.match(PhpParser.HtmlStartQuoteString)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 11)
                self.state = 304
                self.match(PhpParser.HtmlEndQuoteString)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 12)
                self.state = 305
                self.match(PhpParser.HtmlStartDoubleQuoteString)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 13)
                self.state = 306
                self.match(PhpParser.HtmlEndDoubleQuoteString)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 14)
                self.state = 307
                self.match(PhpParser.HtmlHex)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 15)
                self.state = 308
                self.match(PhpParser.HtmlDecimal)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 16)
                self.state = 309
                self.match(PhpParser.HtmlQuoteString)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 17)
                self.state = 310
                self.match(PhpParser.HtmlDoubleQuoteString)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 18)
                self.state = 311
                self.match(PhpParser.StyleBody)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 19)
                self.state = 312
                self.match(PhpParser.HtmlScriptOpen)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 20)
                self.state = 313
                self.match(PhpParser.HtmlScriptClose)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 21)
                self.state = 314
                self.match(PhpParser.XmlStart)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==12:
                    self.state = 315
                    self.match(PhpParser.XmlText)
                    self.state = 320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 321
                self.match(PhpParser.XmlClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ScriptText(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.ScriptText)
            else:
                return self.getToken(PhpParser.ScriptText, i)

        def getRuleIndex(self):
            return PhpParser.RULE_scriptText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScriptText" ):
                listener.enterScriptText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScriptText" ):
                listener.exitScriptText(self)




    def scriptText(self):

        localctx = PhpParser.ScriptTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_scriptText)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 324
                    self.match(PhpParser.ScriptText)

                else:
                    raise NoViableAltException(self)
                self.state = 327 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ImportStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ImportStatementContext,i)


        def topStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TopStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.TopStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_phpBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhpBlock" ):
                listener.enterPhpBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhpBlock" ):
                listener.exitPhpBlock(self)




    def phpBlock(self):

        localctx = PhpParser.PhpBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_phpBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 329
                    self.importStatement() 
                self.state = 334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 336 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 335
                    self.topStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 338 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Import(self):
            return self.getToken(PhpParser.Import, 0)

        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)




    def importStatement(self):

        localctx = PhpParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(PhpParser.Import)
            self.state = 341
            self.match(PhpParser.Namespace)
            self.state = 342
            self.namespaceNameList()
            self.state = 343
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def useDeclaration(self):
            return self.getTypedRuleContext(PhpParser.UseDeclarationContext,0)


        def namespaceDeclaration(self):
            return self.getTypedRuleContext(PhpParser.NamespaceDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PhpParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PhpParser.ClassDeclarationContext,0)


        def globalConstantDeclaration(self):
            return self.getTypedRuleContext(PhpParser.GlobalConstantDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(PhpParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_topStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopStatement" ):
                listener.enterTopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopStatement" ):
                listener.exitTopStatement(self)




    def topStatement(self):

        localctx = PhpParser.TopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_topStatement)
        try:
            self.state = 352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 345
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 346
                self.useDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 347
                self.namespaceDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 348
                self.functionDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 349
                self.classDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 350
                self.globalConstantDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 351
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def useDeclarationContentList(self):
            return self.getTypedRuleContext(PhpParser.UseDeclarationContentListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Function_(self):
            return self.getToken(PhpParser.Function_, 0)

        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_useDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclaration" ):
                listener.enterUseDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclaration" ):
                listener.exitUseDeclaration(self)




    def useDeclaration(self):

        localctx = PhpParser.UseDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_useDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(PhpParser.Use)
            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 355
                _la = self._input.LA(1)
                if not(_la==56 or _la==82):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 358
            self.useDeclarationContentList()
            self.state = 359
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclarationContentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useDeclarationContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.UseDeclarationContentContext)
            else:
                return self.getTypedRuleContext(PhpParser.UseDeclarationContentContext,i)


        def NamespaceSeparator(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.NamespaceSeparator)
            else:
                return self.getToken(PhpParser.NamespaceSeparator, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_useDeclarationContentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclarationContentList" ):
                listener.enterUseDeclarationContentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclarationContentList" ):
                listener.exitUseDeclarationContentList(self)




    def useDeclarationContentList(self):

        localctx = PhpParser.UseDeclarationContentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_useDeclarationContentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==194:
                self.state = 361
                self.match(PhpParser.NamespaceSeparator)


            self.state = 364
            self.useDeclarationContent()
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 365
                self.match(PhpParser.Comma)
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 366
                    self.match(PhpParser.NamespaceSeparator)


                self.state = 369
                self.useDeclarationContent()
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclarationContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_useDeclarationContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclarationContent" ):
                listener.enterUseDeclarationContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclarationContent" ):
                listener.exitUseDeclarationContent(self)




    def useDeclarationContent(self):

        localctx = PhpParser.UseDeclarationContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_useDeclarationContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.namespaceNameList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def namespaceStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.NamespaceStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.NamespaceStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_namespaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceDeclaration" ):
                listener.enterNamespaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceDeclaration" ):
                listener.exitNamespaceDeclaration(self)




    def namespaceDeclaration(self):

        localctx = PhpParser.NamespaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_namespaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(PhpParser.Namespace)
            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 9007199254740991) != 0) or _la==225:
                    self.state = 378
                    self.namespaceNameList()


                self.state = 381
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8600244223124) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 420906795007) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4397045441345) != 0):
                    self.state = 382
                    self.namespaceStatement()
                    self.state = 387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 388
                self.match(PhpParser.CloseCurlyBracket)
                pass

            elif la_ == 2:
                self.state = 389
                self.namespaceNameList()
                self.state = 390
                self.match(PhpParser.SemiColon)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def useDeclaration(self):
            return self.getTypedRuleContext(PhpParser.UseDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PhpParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PhpParser.ClassDeclarationContext,0)


        def globalConstantDeclaration(self):
            return self.getTypedRuleContext(PhpParser.GlobalConstantDeclarationContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_namespaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceStatement" ):
                listener.enterNamespaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceStatement" ):
                listener.exitNamespaceStatement(self)




    def namespaceStatement(self):

        localctx = PhpParser.NamespaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_namespaceStatement)
        try:
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 394
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 395
                self.useDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 396
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 397
                self.classDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 398
                self.globalConstantDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function_(self):
            return self.getToken(PhpParser.Function_, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(PhpParser.FormalParameterListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListInBracketsContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def typeHint(self):
            return self.getTypedRuleContext(PhpParser.TypeHintContext,0)


        def QuestionMark(self):
            return self.getToken(PhpParser.QuestionMark, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = PhpParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 401
                self.attributes()


            self.state = 404
            self.match(PhpParser.Function_)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198:
                self.state = 405
                self.match(PhpParser.Ampersand)


            self.state = 408
            self.identifier()
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==162:
                self.state = 409
                self.typeParameterListInBrackets()


            self.state = 412
            self.match(PhpParser.OpenRoundBracket)
            self.state = 413
            self.formalParameterList()
            self.state = 414
            self.match(PhpParser.CloseRoundBracket)
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==219:
                self.state = 415
                self.match(PhpParser.Colon)
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 416
                    self.match(PhpParser.QuestionMark)


                self.state = 419
                self.typeHint(0)


            self.state = 422
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def classEntryType(self):
            return self.getTypedRuleContext(PhpParser.ClassEntryTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Interface(self):
            return self.getToken(PhpParser.Interface, 0)

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Private(self):
            return self.getToken(PhpParser.Private, 0)

        def modifier(self):
            return self.getTypedRuleContext(PhpParser.ModifierContext,0)


        def Partial(self):
            return self.getToken(PhpParser.Partial, 0)

        def classStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ClassStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ClassStatementContext,i)


        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListInBracketsContext,0)


        def Extends(self):
            return self.getToken(PhpParser.Extends, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def Implements(self):
            return self.getToken(PhpParser.Implements, 0)

        def interfaceList(self):
            return self.getTypedRuleContext(PhpParser.InterfaceListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = PhpParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 424
                self.attributes()


            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 427
                self.match(PhpParser.Private)


            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44 or _la==77:
                self.state = 430
                self.modifier()


            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 433
                self.match(PhpParser.Partial)


            self.state = 458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 122]:
                self.state = 436
                self.classEntryType()
                self.state = 437
                self.identifier()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==162:
                    self.state = 438
                    self.typeParameterListInBrackets()


                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 441
                    self.match(PhpParser.Extends)
                    self.state = 442
                    self.qualifiedStaticTypeRef()


                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 445
                    self.match(PhpParser.Implements)
                    self.state = 446
                    self.interfaceList()


                pass
            elif token in [96]:
                self.state = 449
                self.match(PhpParser.Interface)
                self.state = 450
                self.identifier()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==162:
                    self.state = 451
                    self.typeParameterListInBrackets()


                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 454
                    self.match(PhpParser.Extends)
                    self.state = 455
                    self.interfaceList()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 460
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 72083982316994560) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 6757727313330209) != 0):
                self.state = 461
                self.classStatement()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 467
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassEntryTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(PhpParser.Class, 0)

        def Trait(self):
            return self.getToken(PhpParser.Trait, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_classEntryType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassEntryType" ):
                listener.enterClassEntryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassEntryType" ):
                listener.exitClassEntryType(self)




    def classEntryType(self):

        localctx = PhpParser.ClassEntryTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_classEntryType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            _la = self._input.LA(1)
            if not(_la==54 or _la==122):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedStaticTypeRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.QualifiedStaticTypeRefContext)
            else:
                return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_interfaceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceList" ):
                listener.enterInterfaceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceList" ):
                listener.exitInterfaceList(self)




    def interfaceList(self):

        localctx = PhpParser.InterfaceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interfaceList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.qualifiedStaticTypeRef()
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 472
                self.match(PhpParser.Comma)
                self.state = 473
                self.qualifiedStaticTypeRef()
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterListInBracketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lgeneric(self):
            return self.getToken(PhpParser.Lgeneric, 0)

        def typeParameterList(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListContext,0)


        def Rgeneric(self):
            return self.getToken(PhpParser.Rgeneric, 0)

        def typeParameterWithDefaultsList(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterWithDefaultsListContext,0)


        def Comma(self):
            return self.getToken(PhpParser.Comma, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterListInBrackets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterListInBrackets" ):
                listener.enterTypeParameterListInBrackets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterListInBrackets" ):
                listener.exitTypeParameterListInBrackets(self)




    def typeParameterListInBrackets(self):

        localctx = PhpParser.TypeParameterListInBracketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeParameterListInBrackets)
        try:
            self.state = 493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 479
                self.match(PhpParser.Lgeneric)
                self.state = 480
                self.typeParameterList()
                self.state = 481
                self.match(PhpParser.Rgeneric)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 483
                self.match(PhpParser.Lgeneric)
                self.state = 484
                self.typeParameterWithDefaultsList()
                self.state = 485
                self.match(PhpParser.Rgeneric)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 487
                self.match(PhpParser.Lgeneric)
                self.state = 488
                self.typeParameterList()
                self.state = 489
                self.match(PhpParser.Comma)
                self.state = 490
                self.typeParameterWithDefaultsList()
                self.state = 491
                self.match(PhpParser.Rgeneric)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameterDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TypeParameterDeclContext)
            else:
                return self.getTypedRuleContext(PhpParser.TypeParameterDeclContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterList" ):
                listener.enterTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterList" ):
                listener.exitTypeParameterList(self)




    def typeParameterList(self):

        localctx = PhpParser.TypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeParameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.typeParameterDecl()
            self.state = 500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 496
                    self.match(PhpParser.Comma)
                    self.state = 497
                    self.typeParameterDecl() 
                self.state = 502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterWithDefaultsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameterWithDefaultDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TypeParameterWithDefaultDeclContext)
            else:
                return self.getTypedRuleContext(PhpParser.TypeParameterWithDefaultDeclContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterWithDefaultsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterWithDefaultsList" ):
                listener.enterTypeParameterWithDefaultsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterWithDefaultsList" ):
                listener.exitTypeParameterWithDefaultsList(self)




    def typeParameterWithDefaultsList(self):

        localctx = PhpParser.TypeParameterWithDefaultsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeParameterWithDefaultsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.typeParameterWithDefaultDecl()
            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 504
                self.match(PhpParser.Comma)
                self.state = 505
                self.typeParameterWithDefaultDecl()
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterDecl" ):
                listener.enterTypeParameterDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterDecl" ):
                listener.exitTypeParameterDecl(self)




    def typeParameterDecl(self):

        localctx = PhpParser.TypeParameterDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeParameterDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 511
                self.attributes()


            self.state = 514
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterWithDefaultDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(PhpParser.PrimitiveTypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterWithDefaultDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterWithDefaultDecl" ):
                listener.enterTypeParameterWithDefaultDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterWithDefaultDecl" ):
                listener.exitTypeParameterWithDefaultDecl(self)




    def typeParameterWithDefaultDecl(self):

        localctx = PhpParser.TypeParameterWithDefaultDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typeParameterWithDefaultDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 516
                self.attributes()


            self.state = 519
            self.identifier()
            self.state = 520
            self.match(PhpParser.Eq)
            self.state = 523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 521
                self.qualifiedStaticTypeRef()
                pass

            elif la_ == 2:
                self.state = 522
                self.primitiveType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericDynamicArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lgeneric(self):
            return self.getToken(PhpParser.Lgeneric, 0)

        def typeRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TypeRefContext)
            else:
                return self.getTypedRuleContext(PhpParser.TypeRefContext,i)


        def Rgeneric(self):
            return self.getToken(PhpParser.Rgeneric, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_genericDynamicArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericDynamicArgs" ):
                listener.enterGenericDynamicArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericDynamicArgs" ):
                listener.exitGenericDynamicArgs(self)




    def genericDynamicArgs(self):

        localctx = PhpParser.GenericDynamicArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_genericDynamicArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(PhpParser.Lgeneric)
            self.state = 526
            self.typeRef()
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 527
                self.match(PhpParser.Comma)
                self.state = 528
                self.typeRef()
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 534
            self.match(PhpParser.Rgeneric)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.AttributeGroupContext)
            else:
                return self.getTypedRuleContext(PhpParser.AttributeGroupContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = PhpParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 536
                self.attributeGroup()
                self.state = 539 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==43):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AttributeStart(self):
            return self.getToken(PhpParser.AttributeStart, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.AttributeContext)
            else:
                return self.getTypedRuleContext(PhpParser.AttributeContext,i)


        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_attributeGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeGroup" ):
                listener.enterAttributeGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeGroup" ):
                listener.exitAttributeGroup(self)




    def attributeGroup(self):

        localctx = PhpParser.AttributeGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_attributeGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(PhpParser.AttributeStart)
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 542
                self.identifier()
                self.state = 543
                self.match(PhpParser.Colon)


            self.state = 547
            self.attribute()
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 548
                self.match(PhpParser.Comma)
                self.state = 549
                self.attribute()
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 555
            self.match(PhpParser.CloseSquareBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PhpParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = PhpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.qualifiedNamespaceName()
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==212:
                self.state = 558
                self.arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerStatementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.InnerStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.InnerStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_innerStatementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerStatementList" ):
                listener.enterInnerStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerStatementList" ):
                listener.exitInnerStatementList(self)




    def innerStatementList(self):

        localctx = PhpParser.InnerStatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_innerStatementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 561
                    self.innerStatement() 
                self.state = 566
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PhpParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PhpParser.ClassDeclarationContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_innerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerStatement" ):
                listener.enterInnerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerStatement" ):
                listener.exitInnerStatement(self)




    def innerStatement(self):

        localctx = PhpParser.InnerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_innerStatement)
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 567
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 569
                self.classDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(PhpParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(PhpParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(PhpParser.DoWhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(PhpParser.ForStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(PhpParser.SwitchStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(PhpParser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(PhpParser.ContinueStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(PhpParser.ReturnStatementContext,0)


        def yieldExpression(self):
            return self.getTypedRuleContext(PhpParser.YieldExpressionContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def globalStatement(self):
            return self.getTypedRuleContext(PhpParser.GlobalStatementContext,0)


        def staticVariableStatement(self):
            return self.getTypedRuleContext(PhpParser.StaticVariableStatementContext,0)


        def echoStatement(self):
            return self.getTypedRuleContext(PhpParser.EchoStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(PhpParser.ExpressionStatementContext,0)


        def unsetStatement(self):
            return self.getTypedRuleContext(PhpParser.UnsetStatementContext,0)


        def foreachStatement(self):
            return self.getTypedRuleContext(PhpParser.ForeachStatementContext,0)


        def tryCatchFinally(self):
            return self.getTypedRuleContext(PhpParser.TryCatchFinallyContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(PhpParser.ThrowStatementContext,0)


        def gotoStatement(self):
            return self.getTypedRuleContext(PhpParser.GotoStatementContext,0)


        def declareStatement(self):
            return self.getTypedRuleContext(PhpParser.DeclareStatementContext,0)


        def emptyStatement_(self):
            return self.getTypedRuleContext(PhpParser.EmptyStatement_Context,0)


        def inlineHtmlStatement(self):
            return self.getTypedRuleContext(PhpParser.InlineHtmlStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = PhpParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_statement)
        try:
            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                self.identifier()
                self.state = 573
                self.match(PhpParser.Colon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.blockStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 576
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 577
                self.whileStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 578
                self.doWhileStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 579
                self.forStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 580
                self.switchStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 581
                self.breakStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 582
                self.continueStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 583
                self.returnStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 584
                self.yieldExpression()
                self.state = 585
                self.match(PhpParser.SemiColon)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 587
                self.globalStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 588
                self.staticVariableStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 589
                self.echoStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 590
                self.expressionStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 591
                self.unsetStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 592
                self.foreachStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 593
                self.tryCatchFinally()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 594
                self.throwStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 595
                self.gotoStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 596
                self.declareStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 597
                self.emptyStatement_()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 598
                self.inlineHtmlStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatement_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_emptyStatement_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement_" ):
                listener.enterEmptyStatement_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement_" ):
                listener.exitEmptyStatement_(self)




    def emptyStatement_(self):

        localctx = PhpParser.EmptyStatement_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_emptyStatement_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = PhpParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_blockStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 604
            self.innerStatementList()
            self.state = 605
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(PhpParser.If, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def elseIfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ElseIfStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ElseIfStatementContext,i)


        def elseStatement(self):
            return self.getTypedRuleContext(PhpParser.ElseStatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndIf(self):
            return self.getToken(PhpParser.EndIf, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def elseIfColonStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ElseIfColonStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ElseIfColonStatementContext,i)


        def elseColonStatement(self):
            return self.getTypedRuleContext(PhpParser.ElseColonStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = PhpParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.match(PhpParser.If)
                self.state = 608
                self.parentheses()
                self.state = 609
                self.statement()
                self.state = 613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 610
                        self.elseIfStatement() 
                    self.state = 615
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                self.state = 617
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 616
                    self.elseStatement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.match(PhpParser.If)
                self.state = 620
                self.parentheses()
                self.state = 621
                self.match(PhpParser.Colon)
                self.state = 622
                self.innerStatementList()
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==65:
                    self.state = 623
                    self.elseIfColonStatement()
                    self.state = 628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 629
                    self.elseColonStatement()


                self.state = 632
                self.match(PhpParser.EndIf)
                self.state = 633
                self.match(PhpParser.SemiColon)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIf(self):
            return self.getToken(PhpParser.ElseIf, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStatement" ):
                listener.enterElseIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStatement" ):
                listener.exitElseIfStatement(self)




    def elseIfStatement(self):

        localctx = PhpParser.ElseIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_elseIfStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(PhpParser.ElseIf)
            self.state = 638
            self.parentheses()
            self.state = 639
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfColonStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIf(self):
            return self.getToken(PhpParser.ElseIf, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseIfColonStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfColonStatement" ):
                listener.enterElseIfColonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfColonStatement" ):
                listener.exitElseIfColonStatement(self)




    def elseIfColonStatement(self):

        localctx = PhpParser.ElseIfColonStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_elseIfColonStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(PhpParser.ElseIf)
            self.state = 642
            self.parentheses()
            self.state = 643
            self.match(PhpParser.Colon)
            self.state = 644
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(PhpParser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStatement" ):
                listener.enterElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStatement" ):
                listener.exitElseStatement(self)




    def elseStatement(self):

        localctx = PhpParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(PhpParser.Else)
            self.state = 647
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseColonStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(PhpParser.Else, 0)

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseColonStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseColonStatement" ):
                listener.enterElseColonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseColonStatement" ):
                listener.exitElseColonStatement(self)




    def elseColonStatement(self):

        localctx = PhpParser.ElseColonStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_elseColonStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(PhpParser.Else)
            self.state = 650
            self.match(PhpParser.Colon)
            self.state = 651
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(PhpParser.While, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndWhile(self):
            return self.getToken(PhpParser.EndWhile, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = PhpParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(PhpParser.While)
            self.state = 654
            self.parentheses()
            self.state = 661
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 8, 9, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 31, 32, 34, 35, 37, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 194, 200, 202, 203, 207, 208, 209, 212, 214, 216, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235]:
                self.state = 655
                self.statement()
                pass
            elif token in [219]:
                self.state = 656
                self.match(PhpParser.Colon)
                self.state = 657
                self.innerStatementList()
                self.state = 658
                self.match(PhpParser.EndWhile)
                self.state = 659
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Do(self):
            return self.getToken(PhpParser.Do, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def While(self):
            return self.getToken(PhpParser.While, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = PhpParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(PhpParser.Do)
            self.state = 664
            self.statement()
            self.state = 665
            self.match(PhpParser.While)
            self.state = 666
            self.parentheses()
            self.state = 667
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(PhpParser.For, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.SemiColon)
            else:
                return self.getToken(PhpParser.SemiColon, i)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndFor(self):
            return self.getToken(PhpParser.EndFor, 0)

        def forInit(self):
            return self.getTypedRuleContext(PhpParser.ForInitContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(PhpParser.ForUpdateContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = PhpParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(PhpParser.For)
            self.state = 670
            self.match(PhpParser.OpenRoundBracket)
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138177) != 0):
                self.state = 671
                self.forInit()


            self.state = 674
            self.match(PhpParser.SemiColon)
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138177) != 0):
                self.state = 675
                self.expressionList()


            self.state = 678
            self.match(PhpParser.SemiColon)
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138177) != 0):
                self.state = 679
                self.forUpdate()


            self.state = 682
            self.match(PhpParser.CloseRoundBracket)
            self.state = 689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 8, 9, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 31, 32, 34, 35, 37, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 194, 200, 202, 203, 207, 208, 209, 212, 214, 216, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235]:
                self.state = 683
                self.statement()
                pass
            elif token in [219]:
                self.state = 684
                self.match(PhpParser.Colon)
                self.state = 685
                self.innerStatementList()
                self.state = 686
                self.match(PhpParser.EndFor)
                self.state = 687
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = PhpParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_forInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)




    def forUpdate(self):

        localctx = PhpParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(PhpParser.Switch, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def EndSwitch(self):
            return self.getToken(PhpParser.EndSwitch, 0)

        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.SemiColon)
            else:
                return self.getToken(PhpParser.SemiColon, i)

        def switchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SwitchBlockContext)
            else:
                return self.getTypedRuleContext(PhpParser.SwitchBlockContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = PhpParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(PhpParser.Switch)
            self.state = 696
            self.parentheses()
            self.state = 720
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [216]:
                self.state = 697
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==220:
                    self.state = 698
                    self.match(PhpParser.SemiColon)


                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==52 or _la==59:
                    self.state = 701
                    self.switchBlock()
                    self.state = 706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 707
                self.match(PhpParser.CloseCurlyBracket)
                pass
            elif token in [219]:
                self.state = 708
                self.match(PhpParser.Colon)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==220:
                    self.state = 709
                    self.match(PhpParser.SemiColon)


                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==52 or _la==59:
                    self.state = 712
                    self.switchBlock()
                    self.state = 717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 718
                self.match(PhpParser.EndSwitch)
                self.state = 719
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Colon)
            else:
                return self.getToken(PhpParser.Colon, i)

        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.SemiColon)
            else:
                return self.getToken(PhpParser.SemiColon, i)

        def Case(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Case)
            else:
                return self.getToken(PhpParser.Case, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def Default(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Default)
            else:
                return self.getToken(PhpParser.Default, i)

        def getRuleIndex(self):
            return PhpParser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)




    def switchBlock(self):

        localctx = PhpParser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_switchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 725
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [52]:
                        self.state = 722
                        self.match(PhpParser.Case)
                        self.state = 723
                        self.expression(0)
                        pass
                    elif token in [59]:
                        self.state = 724
                        self.match(PhpParser.Default)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 727
                    _la = self._input.LA(1)
                    if not(_la==219 or _la==220):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 730 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 732
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(PhpParser.Break, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = PhpParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_breakStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(PhpParser.Break)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138177) != 0):
                self.state = 735
                self.expression(0)


            self.state = 738
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Continue(self):
            return self.getToken(PhpParser.Continue, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = PhpParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_continueStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(PhpParser.Continue)
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138177) != 0):
                self.state = 741
                self.expression(0)


            self.state = 744
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Return(self):
            return self.getToken(PhpParser.Return, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = PhpParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(PhpParser.Return)
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138177) != 0):
                self.state = 747
                self.expression(0)


            self.state = 750
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = PhpParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.expression(0)
            self.state = 753
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Unset(self):
            return self.getToken(PhpParser.Unset, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def chainList(self):
            return self.getTypedRuleContext(PhpParser.ChainListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_unsetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetStatement" ):
                listener.enterUnsetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetStatement" ):
                listener.exitUnsetStatement(self)




    def unsetStatement(self):

        localctx = PhpParser.UnsetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_unsetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(PhpParser.Unset)
            self.state = 756
            self.match(PhpParser.OpenRoundBracket)
            self.state = 757
            self.chainList()
            self.state = 758
            self.match(PhpParser.CloseRoundBracket)
            self.state = 759
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Foreach(self):
            return self.getToken(PhpParser.Foreach, 0)

        def OpenRoundBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.OpenRoundBracket)
            else:
                return self.getToken(PhpParser.OpenRoundBracket, i)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def As(self):
            return self.getToken(PhpParser.As, 0)

        def arrayDestructuring(self):
            return self.getTypedRuleContext(PhpParser.ArrayDestructuringContext,0)


        def CloseRoundBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.CloseRoundBracket)
            else:
                return self.getToken(PhpParser.CloseRoundBracket, i)

        def chain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ChainContext)
            else:
                return self.getTypedRuleContext(PhpParser.ChainContext,i)


        def assignable(self):
            return self.getTypedRuleContext(PhpParser.AssignableContext,0)


        def List(self):
            return self.getToken(PhpParser.List, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(PhpParser.AssignmentListContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndForeach(self):
            return self.getToken(PhpParser.EndForeach, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Ampersand(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Ampersand)
            else:
                return self.getToken(PhpParser.Ampersand, i)

        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_foreachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeachStatement" ):
                listener.enterForeachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeachStatement" ):
                listener.exitForeachStatement(self)




    def foreachStatement(self):

        localctx = PhpParser.ForeachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_foreachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(PhpParser.Foreach)
            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 762
                self.match(PhpParser.OpenRoundBracket)
                self.state = 763
                self.expression(0)
                self.state = 764
                self.match(PhpParser.As)
                self.state = 765
                self.arrayDestructuring()
                self.state = 766
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 2:
                self.state = 768
                self.match(PhpParser.OpenRoundBracket)
                self.state = 769
                self.chain()
                self.state = 770
                self.match(PhpParser.As)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==198:
                    self.state = 771
                    self.match(PhpParser.Ampersand)


                self.state = 774
                self.assignable()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==164:
                    self.state = 775
                    self.match(PhpParser.DoubleArrow)
                    self.state = 777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==198:
                        self.state = 776
                        self.match(PhpParser.Ampersand)


                    self.state = 779
                    self.chain()


                self.state = 782
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 3:
                self.state = 784
                self.match(PhpParser.OpenRoundBracket)
                self.state = 785
                self.expression(0)
                self.state = 786
                self.match(PhpParser.As)
                self.state = 787
                self.assignable()
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==164:
                    self.state = 788
                    self.match(PhpParser.DoubleArrow)
                    self.state = 790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==198:
                        self.state = 789
                        self.match(PhpParser.Ampersand)


                    self.state = 792
                    self.chain()


                self.state = 795
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 4:
                self.state = 797
                self.match(PhpParser.OpenRoundBracket)
                self.state = 798
                self.chain()
                self.state = 799
                self.match(PhpParser.As)
                self.state = 800
                self.match(PhpParser.List)
                self.state = 801
                self.match(PhpParser.OpenRoundBracket)
                self.state = 802
                self.assignmentList()
                self.state = 803
                self.match(PhpParser.CloseRoundBracket)
                self.state = 804
                self.match(PhpParser.CloseRoundBracket)
                pass


            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 8, 9, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 31, 32, 34, 35, 37, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 194, 200, 202, 203, 207, 208, 209, 212, 214, 216, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235]:
                self.state = 808
                self.statement()
                pass
            elif token in [219]:
                self.state = 809
                self.match(PhpParser.Colon)
                self.state = 810
                self.innerStatementList()
                self.state = 811
                self.match(PhpParser.EndForeach)
                self.state = 812
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchFinallyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(PhpParser.Try, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def finallyStatement(self):
            return self.getTypedRuleContext(PhpParser.FinallyStatementContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(PhpParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_tryCatchFinally

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatchFinally" ):
                listener.enterTryCatchFinally(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatchFinally" ):
                listener.exitTryCatchFinally(self)




    def tryCatchFinally(self):

        localctx = PhpParser.TryCatchFinallyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_tryCatchFinally)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(PhpParser.Try)
            self.state = 817
            self.blockStatement()
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 819 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 818
                        self.catchClause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 821 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                self.state = 824
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 823
                    self.finallyStatement()


                pass

            elif la_ == 2:
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==53:
                    self.state = 826
                    self.catchClause()
                    self.state = 831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 832
                self.finallyStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(PhpParser.Catch, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def qualifiedStaticTypeRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.QualifiedStaticTypeRefContext)
            else:
                return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,i)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Pipe)
            else:
                return self.getToken(PhpParser.Pipe, i)

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = PhpParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(PhpParser.Catch)
            self.state = 836
            self.match(PhpParser.OpenRoundBracket)
            self.state = 837
            self.qualifiedStaticTypeRef()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==199:
                self.state = 838
                self.match(PhpParser.Pipe)
                self.state = 839
                self.qualifiedStaticTypeRef()
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 845
                self.match(PhpParser.VarName)


            self.state = 848
            self.match(PhpParser.CloseRoundBracket)
            self.state = 849
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Finally(self):
            return self.getToken(PhpParser.Finally, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_finallyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyStatement" ):
                listener.enterFinallyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyStatement" ):
                listener.exitFinallyStatement(self)




    def finallyStatement(self):

        localctx = PhpParser.FinallyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_finallyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(PhpParser.Finally)
            self.state = 852
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(PhpParser.Throw, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = PhpParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(PhpParser.Throw)
            self.state = 855
            self.expression(0)
            self.state = 856
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(PhpParser.Goto, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_gotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)




    def gotoStatement(self):

        localctx = PhpParser.GotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_gotoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(PhpParser.Goto)
            self.state = 859
            self.identifier()
            self.state = 860
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Declare(self):
            return self.getToken(PhpParser.Declare, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def declareList(self):
            return self.getTypedRuleContext(PhpParser.DeclareListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndDeclare(self):
            return self.getToken(PhpParser.EndDeclare, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_declareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareStatement" ):
                listener.enterDeclareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareStatement" ):
                listener.exitDeclareStatement(self)




    def declareStatement(self):

        localctx = PhpParser.DeclareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_declareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(PhpParser.Declare)
            self.state = 863
            self.match(PhpParser.OpenRoundBracket)
            self.state = 864
            self.declareList()
            self.state = 865
            self.match(PhpParser.CloseRoundBracket)
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 5, 6, 8, 9, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28, 31, 32, 34, 35, 37, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 194, 200, 202, 203, 207, 208, 209, 212, 214, 216, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235]:
                self.state = 866
                self.statement()
                pass
            elif token in [219]:
                self.state = 867
                self.match(PhpParser.Colon)
                self.state = 868
                self.innerStatementList()
                self.state = 869
                self.match(PhpParser.EndDeclare)
                self.state = 870
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineHtmlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inlineHtml(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.InlineHtmlContext)
            else:
                return self.getTypedRuleContext(PhpParser.InlineHtmlContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_inlineHtmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineHtmlStatement" ):
                listener.enterInlineHtmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineHtmlStatement" ):
                listener.exitInlineHtmlStatement(self)




    def inlineHtmlStatement(self):

        localctx = PhpParser.InlineHtmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_inlineHtmlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 874
                    self.inlineHtml()

                else:
                    raise NoViableAltException(self)
                self.state = 877 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.DirectiveContext)
            else:
                return self.getTypedRuleContext(PhpParser.DirectiveContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_declareList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareList" ):
                listener.enterDeclareList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareList" ):
                listener.exitDeclareList(self)




    def declareList(self):

        localctx = PhpParser.DeclareListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_declareList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.directive()
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 880
                self.match(PhpParser.Comma)
                self.state = 881
                self.directive()
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ticks(self):
            return self.getToken(PhpParser.Ticks, 0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def numericConstant(self):
            return self.getTypedRuleContext(PhpParser.NumericConstantContext,0)


        def Real(self):
            return self.getToken(PhpParser.Real, 0)

        def Encoding(self):
            return self.getToken(PhpParser.Encoding, 0)

        def SingleQuoteString(self):
            return self.getToken(PhpParser.SingleQuoteString, 0)

        def StrictTypes(self):
            return self.getToken(PhpParser.StrictTypes, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirective" ):
                listener.enterDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirective" ):
                listener.exitDirective(self)




    def directive(self):

        localctx = PhpParser.DirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_directive)
        try:
            self.state = 899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.match(PhpParser.Ticks)
                self.state = 888
                self.match(PhpParser.Eq)
                self.state = 891
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [226, 227, 229, 230]:
                    self.state = 889
                    self.numericConstant()
                    pass
                elif token in [228]:
                    self.state = 890
                    self.match(PhpParser.Real)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self.match(PhpParser.Encoding)
                self.state = 894
                self.match(PhpParser.Eq)
                self.state = 895
                self.match(PhpParser.SingleQuoteString)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 3)
                self.state = 896
                self.match(PhpParser.StrictTypes)
                self.state = 897
                self.match(PhpParser.Eq)
                self.state = 898
                self.numericConstant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(PhpParser.FormalParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = PhpParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & -1) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 18014398509481983) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 3221356563) != 0):
                self.state = 901
                self.formalParameter()


            self.state = 908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 904
                    self.match(PhpParser.Comma)
                    self.state = 905
                    self.formalParameter() 
                self.state = 910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 911
                self.match(PhpParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableInitializer(self):
            return self.getTypedRuleContext(PhpParser.VariableInitializerContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def memberModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.MemberModifierContext)
            else:
                return self.getTypedRuleContext(PhpParser.MemberModifierContext,i)


        def QuestionMark(self):
            return self.getToken(PhpParser.QuestionMark, 0)

        def typeHint(self):
            return self.getTypedRuleContext(PhpParser.TypeHintContext,0)


        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def Ellipsis(self):
            return self.getToken(PhpParser.Ellipsis, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = PhpParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_formalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 914
                self.attributes()


            self.state = 920
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 917
                    self.memberModifier() 
                self.state = 922
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==211:
                self.state = 923
                self.match(PhpParser.QuestionMark)


            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 9007199254740991) != 0) or _la==194 or _la==225:
                self.state = 926
                self.typeHint(0)


            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198:
                self.state = 929
                self.match(PhpParser.Ampersand)


            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==195:
                self.state = 932
                self.match(PhpParser.Ellipsis)


            self.state = 935
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeHintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def Callable(self):
            return self.getToken(PhpParser.Callable, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(PhpParser.PrimitiveTypeContext,0)


        def typeHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TypeHintContext)
            else:
                return self.getTypedRuleContext(PhpParser.TypeHintContext,i)


        def Pipe(self):
            return self.getToken(PhpParser.Pipe, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_typeHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeHint" ):
                listener.enterTypeHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeHint" ):
                listener.exitTypeHint(self)



    def typeHint(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PhpParser.TypeHintContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_typeHint, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 938
                self.qualifiedStaticTypeRef()
                pass

            elif la_ == 2:
                self.state = 939
                self.match(PhpParser.Callable)
                pass

            elif la_ == 3:
                self.state = 940
                self.primitiveType()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 948
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PhpParser.TypeHintContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeHint)
                    self.state = 943
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 944
                    self.match(PhpParser.Pipe)
                    self.state = 945
                    self.typeHint(2) 
                self.state = 950
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GlobalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Global(self):
            return self.getToken(PhpParser.Global, 0)

        def globalVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.GlobalVarContext)
            else:
                return self.getTypedRuleContext(PhpParser.GlobalVarContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_globalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalStatement" ):
                listener.enterGlobalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalStatement" ):
                listener.exitGlobalStatement(self)




    def globalStatement(self):

        localctx = PhpParser.GlobalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_globalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(PhpParser.Global)
            self.state = 952
            self.globalVar()
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 953
                self.match(PhpParser.Comma)
                self.state = 954
                self.globalVar()
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 960
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Dollar(self):
            return self.getToken(PhpParser.Dollar, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_globalVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalVar" ):
                listener.enterGlobalVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalVar" ):
                listener.exitGlobalVar(self)




    def globalVar(self):

        localctx = PhpParser.GlobalVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_globalVar)
        try:
            self.state = 970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 962
                self.match(PhpParser.VarName)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.match(PhpParser.Dollar)
                self.state = 964
                self.chain()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 965
                self.match(PhpParser.Dollar)
                self.state = 966
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 967
                self.expression(0)
                self.state = 968
                self.match(PhpParser.CloseCurlyBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EchoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Echo(self):
            return self.getToken(PhpParser.Echo, 0)

        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_echoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEchoStatement" ):
                listener.enterEchoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEchoStatement" ):
                listener.exitEchoStatement(self)




    def echoStatement(self):

        localctx = PhpParser.EchoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_echoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(PhpParser.Echo)
            self.state = 973
            self.expressionList()
            self.state = 974
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVariableStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(PhpParser.VariableInitializerContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_staticVariableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVariableStatement" ):
                listener.enterStaticVariableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVariableStatement" ):
                listener.exitStaticVariableStatement(self)




    def staticVariableStatement(self):

        localctx = PhpParser.StaticVariableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_staticVariableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(PhpParser.Static)
            self.state = 977
            self.variableInitializer()
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 978
                self.match(PhpParser.Comma)
                self.state = 979
                self.variableInitializer()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 985
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyModifiers(self):
            return self.getTypedRuleContext(PhpParser.PropertyModifiersContext,0)


        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(PhpParser.VariableInitializerContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def identifierInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierInitializerContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierInitializerContext,i)


        def Function_(self):
            return self.getToken(PhpParser.Function_, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(PhpParser.FormalParameterListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def methodBody(self):
            return self.getTypedRuleContext(PhpParser.MethodBodyContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(PhpParser.TypeHintContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def memberModifiers(self):
            return self.getTypedRuleContext(PhpParser.MemberModifiersContext,0)


        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListInBracketsContext,0)


        def baseCtorCall(self):
            return self.getTypedRuleContext(PhpParser.BaseCtorCallContext,0)


        def returnTypeDecl(self):
            return self.getTypedRuleContext(PhpParser.ReturnTypeDeclContext,0)


        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def qualifiedNamespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameListContext,0)


        def traitAdaptations(self):
            return self.getTypedRuleContext(PhpParser.TraitAdaptationsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)




    def classStatement(self):

        localctx = PhpParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.state = 1046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43, 44, 56, 77, 82, 110, 111, 112, 113, 118, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43:
                    self.state = 987
                    self.attributes()


                self.state = 1040
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 990
                    self.propertyModifiers()
                    self.state = 992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 9007199254740991) != 0) or _la==194 or _la==225:
                        self.state = 991
                        self.typeHint(0)


                    self.state = 994
                    self.variableInitializer()
                    self.state = 999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==218:
                        self.state = 995
                        self.match(PhpParser.Comma)
                        self.state = 996
                        self.variableInitializer()
                        self.state = 1001
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1002
                    self.match(PhpParser.SemiColon)
                    pass

                elif la_ == 2:
                    self.state = 1005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==44 or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 2327872274433) != 0):
                        self.state = 1004
                        self.memberModifiers()


                    self.state = 1038
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [56]:
                        self.state = 1007
                        self.match(PhpParser.Const)
                        self.state = 1009
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                        if la_ == 1:
                            self.state = 1008
                            self.typeHint(0)


                        self.state = 1011
                        self.identifierInitializer()
                        self.state = 1016
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==218:
                            self.state = 1012
                            self.match(PhpParser.Comma)
                            self.state = 1013
                            self.identifierInitializer()
                            self.state = 1018
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1019
                        self.match(PhpParser.SemiColon)
                        pass
                    elif token in [82]:
                        self.state = 1021
                        self.match(PhpParser.Function_)
                        self.state = 1023
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==198:
                            self.state = 1022
                            self.match(PhpParser.Ampersand)


                        self.state = 1025
                        self.identifier()
                        self.state = 1027
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==162:
                            self.state = 1026
                            self.typeParameterListInBrackets()


                        self.state = 1029
                        self.match(PhpParser.OpenRoundBracket)
                        self.state = 1030
                        self.formalParameterList()
                        self.state = 1031
                        self.match(PhpParser.CloseRoundBracket)
                        self.state = 1034
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                        if la_ == 1:
                            self.state = 1032
                            self.baseCtorCall()

                        elif la_ == 2:
                            self.state = 1033
                            self.returnTypeDecl()


                        self.state = 1036
                        self.methodBody()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1042
                self.match(PhpParser.Use)
                self.state = 1043
                self.qualifiedNamespaceNameList()
                self.state = 1044
                self.traitAdaptations()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitAdaptationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def traitAdaptationStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TraitAdaptationStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.TraitAdaptationStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_traitAdaptations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAdaptations" ):
                listener.enterTraitAdaptations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAdaptations" ):
                listener.exitTraitAdaptations(self)




    def traitAdaptations(self):

        localctx = PhpParser.TraitAdaptationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_traitAdaptations)
        self._la = 0 # Token type
        try:
            self.state = 1057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [220]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.match(PhpParser.SemiColon)
                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 9007199254740991) != 0) or _la==194 or _la==225:
                    self.state = 1050
                    self.traitAdaptationStatement()
                    self.state = 1055
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1056
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitAdaptationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traitPrecedence(self):
            return self.getTypedRuleContext(PhpParser.TraitPrecedenceContext,0)


        def traitAlias(self):
            return self.getTypedRuleContext(PhpParser.TraitAliasContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_traitAdaptationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAdaptationStatement" ):
                listener.enterTraitAdaptationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAdaptationStatement" ):
                listener.exitTraitAdaptationStatement(self)




    def traitAdaptationStatement(self):

        localctx = PhpParser.TraitAdaptationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_traitAdaptationStatement)
        try:
            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1059
                self.traitPrecedence()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1060
                self.traitAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitPrecedenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def InsteadOf(self):
            return self.getToken(PhpParser.InsteadOf, 0)

        def qualifiedNamespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_traitPrecedence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitPrecedence" ):
                listener.enterTraitPrecedence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitPrecedence" ):
                listener.exitTraitPrecedence(self)




    def traitPrecedence(self):

        localctx = PhpParser.TraitPrecedenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_traitPrecedence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.qualifiedNamespaceName()
            self.state = 1064
            self.match(PhpParser.DoubleColon)
            self.state = 1065
            self.identifier()
            self.state = 1066
            self.match(PhpParser.InsteadOf)
            self.state = 1067
            self.qualifiedNamespaceNameList()
            self.state = 1068
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traitMethodReference(self):
            return self.getTypedRuleContext(PhpParser.TraitMethodReferenceContext,0)


        def As(self):
            return self.getToken(PhpParser.As, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def memberModifier(self):
            return self.getTypedRuleContext(PhpParser.MemberModifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_traitAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAlias" ):
                listener.enterTraitAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAlias" ):
                listener.exitTraitAlias(self)




    def traitAlias(self):

        localctx = PhpParser.TraitAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_traitAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.traitMethodReference()
            self.state = 1071
            self.match(PhpParser.As)
            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1072
                self.memberModifier()
                pass

            elif la_ == 2:
                self.state = 1074
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1073
                    self.memberModifier()


                self.state = 1076
                self.identifier()
                pass


            self.state = 1079
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitMethodReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_traitMethodReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitMethodReference" ):
                listener.enterTraitMethodReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitMethodReference" ):
                listener.exitTraitMethodReference(self)




    def traitMethodReference(self):

        localctx = PhpParser.TraitMethodReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_traitMethodReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1081
                self.qualifiedNamespaceName()
                self.state = 1082
                self.match(PhpParser.DoubleColon)


            self.state = 1086
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseCtorCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PhpParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_baseCtorCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseCtorCall" ):
                listener.enterBaseCtorCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseCtorCall" ):
                listener.exitBaseCtorCall(self)




    def baseCtorCall(self):

        localctx = PhpParser.BaseCtorCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_baseCtorCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(PhpParser.Colon)
            self.state = 1089
            self.identifier()
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==212:
                self.state = 1090
                self.arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnTypeDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def typeHint(self):
            return self.getTypedRuleContext(PhpParser.TypeHintContext,0)


        def QuestionMark(self):
            return self.getToken(PhpParser.QuestionMark, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_returnTypeDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnTypeDecl" ):
                listener.enterReturnTypeDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnTypeDecl" ):
                listener.exitReturnTypeDecl(self)




    def returnTypeDecl(self):

        localctx = PhpParser.ReturnTypeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_returnTypeDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(PhpParser.Colon)
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==211:
                self.state = 1094
                self.match(PhpParser.QuestionMark)


            self.state = 1097
            self.typeHint(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = PhpParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_methodBody)
        try:
            self.state = 1101
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [220]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1099
                self.match(PhpParser.SemiColon)
                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1100
                self.blockStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberModifiers(self):
            return self.getTypedRuleContext(PhpParser.MemberModifiersContext,0)


        def Var(self):
            return self.getToken(PhpParser.Var, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_propertyModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyModifiers" ):
                listener.enterPropertyModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyModifiers" ):
                listener.exitPropertyModifiers(self)




    def propertyModifiers(self):

        localctx = PhpParser.PropertyModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_propertyModifiers)
        try:
            self.state = 1105
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 77, 110, 111, 112, 113, 118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1103
                self.memberModifiers()
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self.match(PhpParser.Var)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.MemberModifierContext)
            else:
                return self.getTypedRuleContext(PhpParser.MemberModifierContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_memberModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifiers" ):
                listener.enterMemberModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifiers" ):
                listener.exitMemberModifiers(self)




    def memberModifiers(self):

        localctx = PhpParser.MemberModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_memberModifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1107
                    self.memberModifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1110 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def constantInitializer(self):
            return self.getTypedRuleContext(PhpParser.ConstantInitializerContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = PhpParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_variableInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.match(PhpParser.VarName)
            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 1113
                self.match(PhpParser.Eq)
                self.state = 1114
                self.constantInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def constantInitializer(self):
            return self.getTypedRuleContext(PhpParser.ConstantInitializerContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_identifierInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierInitializer" ):
                listener.enterIdentifierInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierInitializer" ):
                listener.exitIdentifierInitializer(self)




    def identifierInitializer(self):

        localctx = PhpParser.IdentifierInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_identifierInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.identifier()
            self.state = 1118
            self.match(PhpParser.Eq)
            self.state = 1119
            self.constantInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalConstantDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def identifierInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierInitializerContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierInitializerContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_globalConstantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalConstantDeclaration" ):
                listener.enterGlobalConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalConstantDeclaration" ):
                listener.exitGlobalConstantDeclaration(self)




    def globalConstantDeclaration(self):

        localctx = PhpParser.GlobalConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_globalConstantDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 1121
                self.attributes()


            self.state = 1124
            self.match(PhpParser.Const)
            self.state = 1125
            self.identifierInitializer()
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 1126
                self.match(PhpParser.Comma)
                self.state = 1127
                self.identifierInitializer()
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1133
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum_(self):
            return self.getToken(PhpParser.Enum_, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def Implements(self):
            return self.getToken(PhpParser.Implements, 0)

        def interfaceList(self):
            return self.getTypedRuleContext(PhpParser.InterfaceListContext,0)


        def enumItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.EnumItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.EnumItemContext,i)


        def IntType(self):
            return self.getToken(PhpParser.IntType, 0)

        def StringType(self):
            return self.getToken(PhpParser.StringType, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = PhpParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.match(PhpParser.Enum_)
            self.state = 1136
            self.identifier()
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==219:
                self.state = 1137
                self.match(PhpParser.Colon)
                self.state = 1138
                _la = self._input.LA(1)
                if not(_la==95 or _la==119):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 1141
                self.match(PhpParser.Implements)
                self.state = 1142
                self.interfaceList()


            self.state = 1145
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4529987906437120) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 2254127685959713) != 0):
                self.state = 1146
                self.enumItem()
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1152
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(PhpParser.Case, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PhpParser.FunctionDeclarationContext,0)


        def memberModifiers(self):
            return self.getTypedRuleContext(PhpParser.MemberModifiersContext,0)


        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def qualifiedNamespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameListContext,0)


        def traitAdaptations(self):
            return self.getTypedRuleContext(PhpParser.TraitAdaptationsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_enumItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumItem" ):
                listener.enterEnumItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumItem" ):
                listener.exitEnumItem(self)




    def enumItem(self):

        localctx = PhpParser.EnumItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_enumItem)
        self._la = 0 # Token type
        try:
            self.state = 1170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1154
                self.match(PhpParser.Case)
                self.state = 1155
                self.identifier()
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==221:
                    self.state = 1156
                    self.match(PhpParser.Eq)
                    self.state = 1157
                    self.expression(0)


                self.state = 1160
                self.match(PhpParser.SemiColon)
                pass
            elif token in [43, 44, 77, 82, 110, 111, 112, 113, 118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44 or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 2327872274433) != 0):
                    self.state = 1162
                    self.memberModifiers()


                self.state = 1165
                self.functionDeclaration()
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1166
                self.match(PhpParser.Use)
                self.state = 1167
                self.qualifiedNamespaceNameList()
                self.state = 1168
                self.traitAdaptations()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = PhpParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.expression(0)
            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 1173
                self.match(PhpParser.Comma)
                self.state = 1174
                self.expression(0)
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def yieldExpression(self):
            return self.getTypedRuleContext(PhpParser.YieldExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_parentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParentheses" ):
                listener.enterParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParentheses" ):
                listener.exitParentheses(self)




    def parentheses(self):

        localctx = PhpParser.ParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_parentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.match(PhpParser.OpenRoundBracket)
            self.state = 1183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1181
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1182
                self.yieldExpression()
                pass


            self.state = 1185
            self.match(PhpParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PhpParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ChainExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainExpression" ):
                listener.enterChainExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainExpression" ):
                listener.exitChainExpression(self)


    class LogicalAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def BooleanAnd(self):
            return self.getToken(PhpParser.BooleanAnd, 0)
        def LogicalAnd(self):
            return self.getToken(PhpParser.LogicalAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)


    class SpecialWordExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Yield(self):
            return self.getToken(PhpParser.Yield, 0)
        def List(self):
            return self.getToken(PhpParser.List, 0)
        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)
        def assignmentList(self):
            return self.getTypedRuleContext(PhpParser.AssignmentListContext,0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)
        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def IsSet(self):
            return self.getToken(PhpParser.IsSet, 0)
        def chainList(self):
            return self.getTypedRuleContext(PhpParser.ChainListContext,0)

        def Empty(self):
            return self.getToken(PhpParser.Empty, 0)
        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)

        def Eval(self):
            return self.getToken(PhpParser.Eval, 0)
        def Exit(self):
            return self.getToken(PhpParser.Exit, 0)
        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)

        def Throw(self):
            return self.getToken(PhpParser.Throw, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialWordExpression" ):
                listener.enterSpecialWordExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialWordExpression" ):
                listener.exitSpecialWordExpression(self)


    class ExponentiationExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Pow(self):
            return self.getToken(PhpParser.Pow, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentiationExpression" ):
                listener.enterExponentiationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentiationExpression" ):
                listener.exitExponentiationExpression(self)


    class ArrayCreationExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrayCreation(self):
            return self.getTypedRuleContext(PhpParser.ArrayCreationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreationExpression" ):
                listener.enterArrayCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreationExpression" ):
                listener.exitArrayCreationExpression(self)


    class BackQuoteStringExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BackQuoteString(self):
            return self.getToken(PhpParser.BackQuoteString, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuoteStringExpression" ):
                listener.enterBackQuoteStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuoteStringExpression" ):
                listener.exitBackQuoteStringExpression(self)


    class MatchExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def matchExpr(self):
            return self.getTypedRuleContext(PhpParser.MatchExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchExpression" ):
                listener.enterMatchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchExpression" ):
                listener.exitMatchExpression(self)


    class PrintExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Print(self):
            return self.getToken(PhpParser.Print, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintExpression" ):
                listener.enterPrintExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintExpression" ):
                listener.exitPrintExpression(self)


    class AssignmentExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignable(self):
            return self.getTypedRuleContext(PhpParser.AssignableContext,0)

        def assignmentOperator(self):
            return self.getTypedRuleContext(PhpParser.AssignmentOperatorContext,0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)
        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)
        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)

        def newExpr(self):
            return self.getTypedRuleContext(PhpParser.NewExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)


    class PostfixIncDecExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)

        def Inc(self):
            return self.getToken(PhpParser.Inc, 0)
        def Dec(self):
            return self.getToken(PhpParser.Dec, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixIncDecExpression" ):
                listener.enterPostfixIncDecExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixIncDecExpression" ):
                listener.exitPostfixIncDecExpression(self)


    class IncludeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def Include(self):
            return self.getToken(PhpParser.Include, 0)
        def IncludeOnce(self):
            return self.getToken(PhpParser.IncludeOnce, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeExpression" ):
                listener.enterIncludeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeExpression" ):
                listener.exitIncludeExpression(self)


    class BitwiseExcOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Caret(self):
            return self.getToken(PhpParser.Caret, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseExcOrExpression" ):
                listener.enterBitwiseExcOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseExcOrExpression" ):
                listener.exitBitwiseExcOrExpression(self)


    class EqualityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def IsIdentical(self):
            return self.getToken(PhpParser.IsIdentical, 0)
        def IsNoidentical(self):
            return self.getToken(PhpParser.IsNoidentical, 0)
        def IsEqual(self):
            return self.getToken(PhpParser.IsEqual, 0)
        def IsNotEq(self):
            return self.getToken(PhpParser.IsNotEq, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)


    class MultiplicativeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Asterisk(self):
            return self.getToken(PhpParser.Asterisk, 0)
        def Divide(self):
            return self.getToken(PhpParser.Divide, 0)
        def Percent(self):
            return self.getToken(PhpParser.Percent, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)


    class CloneExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Clone(self):
            return self.getToken(PhpParser.Clone, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneExpression" ):
                listener.enterCloneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneExpression" ):
                listener.exitCloneExpression(self)


    class AdditiveExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Plus(self):
            return self.getToken(PhpParser.Plus, 0)
        def Minus(self):
            return self.getToken(PhpParser.Minus, 0)
        def Dot(self):
            return self.getToken(PhpParser.Dot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)


    class RelationalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Less(self):
            return self.getToken(PhpParser.Less, 0)
        def IsSmallerOrEqual(self):
            return self.getToken(PhpParser.IsSmallerOrEqual, 0)
        def Greater(self):
            return self.getToken(PhpParser.Greater, 0)
        def IsGreaterOrEqual(self):
            return self.getToken(PhpParser.IsGreaterOrEqual, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)


    class UnaryOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def Tilde(self):
            return self.getToken(PhpParser.Tilde, 0)
        def SuppressWarnings(self):
            return self.getToken(PhpParser.SuppressWarnings, 0)
        def Bang(self):
            return self.getToken(PhpParser.Bang, 0)
        def Plus(self):
            return self.getToken(PhpParser.Plus, 0)
        def Minus(self):
            return self.getToken(PhpParser.Minus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperatorExpression" ):
                listener.enterUnaryOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperatorExpression" ):
                listener.exitUnaryOperatorExpression(self)


    class NewExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def newExpr(self):
            return self.getTypedRuleContext(PhpParser.NewExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)


    class ParenthesisExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpression" ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpression" ):
                listener.exitParenthesisExpression(self)


    class LogicalIncOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def BooleanOr(self):
            return self.getToken(PhpParser.BooleanOr, 0)
        def LogicalOr(self):
            return self.getToken(PhpParser.LogicalOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalIncOrExpression" ):
                listener.enterLogicalIncOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalIncOrExpression" ):
                listener.exitLogicalIncOrExpression(self)


    class SpaceshipExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Spaceship(self):
            return self.getToken(PhpParser.Spaceship, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpaceshipExpression" ):
                listener.enterSpaceshipExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpaceshipExpression" ):
                listener.exitSpaceshipExpression(self)


    class ConditionalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)
        def QuestionMark(self):
            return self.getToken(PhpParser.QuestionMark, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)


    class ShiftExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def ShiftLeft(self):
            return self.getToken(PhpParser.ShiftLeft, 0)
        def ShiftRight(self):
            return self.getToken(PhpParser.ShiftRight, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)


    class IndexerExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringConstant(self):
            return self.getTypedRuleContext(PhpParser.StringConstantContext,0)

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexerExpression" ):
                listener.enterIndexerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexerExpression" ):
                listener.exitIndexerExpression(self)


    class ScalarExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(PhpParser.ConstantContext,0)

        def string(self):
            return self.getTypedRuleContext(PhpParser.StringContext,0)

        def Label(self):
            return self.getToken(PhpParser.Label, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarExpression" ):
                listener.enterScalarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarExpression" ):
                listener.exitScalarExpression(self)


    class PrefixIncDecExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)

        def Inc(self):
            return self.getToken(PhpParser.Inc, 0)
        def Dec(self):
            return self.getToken(PhpParser.Dec, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixIncDecExpression" ):
                listener.enterPrefixIncDecExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixIncDecExpression" ):
                listener.exitPrefixIncDecExpression(self)


    class RequireExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def Require(self):
            return self.getToken(PhpParser.Require, 0)
        def RequireOnce(self):
            return self.getToken(PhpParser.RequireOnce, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireExpression" ):
                listener.enterRequireExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireExpression" ):
                listener.exitRequireExpression(self)


    class BitwiseAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseAndExpression" ):
                listener.enterBitwiseAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseAndExpression" ):
                listener.exitBitwiseAndExpression(self)


    class LogicalExcOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def LogicalXor(self):
            return self.getToken(PhpParser.LogicalXor, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExcOrExpression" ):
                listener.enterLogicalExcOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExcOrExpression" ):
                listener.exitLogicalExcOrExpression(self)


    class BitwiseIncOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Pipe(self):
            return self.getToken(PhpParser.Pipe, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseIncOrExpression" ):
                listener.enterBitwiseIncOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseIncOrExpression" ):
                listener.exitBitwiseIncOrExpression(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)
        def castOperation(self):
            return self.getTypedRuleContext(PhpParser.CastOperationContext,0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)


    class InstanceOfExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def InstanceOf(self):
            return self.getToken(PhpParser.InstanceOf, 0)
        def typeRef(self):
            return self.getTypedRuleContext(PhpParser.TypeRefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceOfExpression" ):
                listener.enterInstanceOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceOfExpression" ):
                listener.exitInstanceOfExpression(self)


    class ArrayDestructExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrayDestructuring(self):
            return self.getTypedRuleContext(PhpParser.ArrayDestructuringContext,0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDestructExpression" ):
                listener.enterArrayDestructExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDestructExpression" ):
                listener.exitArrayDestructExpression(self)


    class LambdaFunctionExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lambdaFunctionExpr(self):
            return self.getTypedRuleContext(PhpParser.LambdaFunctionExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionExpression" ):
                listener.enterLambdaFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionExpression" ):
                listener.exitLambdaFunctionExpression(self)


    class CoalesceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def NullCoalescing(self):
            return self.getToken(PhpParser.NullCoalescing, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoalesceExpression" ):
                listener.enterCoalesceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoalesceExpression" ):
                listener.exitCoalesceExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PhpParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 164
        self.enterRecursionRule(localctx, 164, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                localctx = PhpParser.CloneExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1188
                self.match(PhpParser.Clone)
                self.state = 1189
                self.expression(48)
                pass

            elif la_ == 2:
                localctx = PhpParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1190
                self.newExpr()
                pass

            elif la_ == 3:
                localctx = PhpParser.IndexerExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1191
                self.stringConstant()
                self.state = 1192
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1193
                self.expression(0)
                self.state = 1194
                self.match(PhpParser.CloseSquareBracket)
                pass

            elif la_ == 4:
                localctx = PhpParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1196
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1197
                self.castOperation()
                self.state = 1198
                self.match(PhpParser.CloseRoundBracket)
                self.state = 1199
                self.expression(45)
                pass

            elif la_ == 5:
                localctx = PhpParser.UnaryOperatorExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1201
                _la = self._input.LA(1)
                if not(_la==207 or _la==208):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1202
                self.expression(44)
                pass

            elif la_ == 6:
                localctx = PhpParser.UnaryOperatorExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1203
                _la = self._input.LA(1)
                if not(((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & 13) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1204
                self.expression(43)
                pass

            elif la_ == 7:
                localctx = PhpParser.PrefixIncDecExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1205
                _la = self._input.LA(1)
                if not(_la==165 or _la==166):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1206
                self.chain()
                pass

            elif la_ == 8:
                localctx = PhpParser.PostfixIncDecExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1207
                self.chain()
                self.state = 1208
                _la = self._input.LA(1)
                if not(_la==165 or _la==166):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = PhpParser.PrintExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1210
                self.match(PhpParser.Print)
                self.state = 1211
                self.expression(40)
                pass

            elif la_ == 10:
                localctx = PhpParser.ArrayCreationExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1212
                self.arrayCreation()
                pass

            elif la_ == 11:
                localctx = PhpParser.ChainExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1213
                self.chain()
                pass

            elif la_ == 12:
                localctx = PhpParser.ScalarExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1214
                self.constant()
                pass

            elif la_ == 13:
                localctx = PhpParser.ScalarExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1215
                self.string()
                pass

            elif la_ == 14:
                localctx = PhpParser.ScalarExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1216
                self.match(PhpParser.Label)
                pass

            elif la_ == 15:
                localctx = PhpParser.BackQuoteStringExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1217
                self.match(PhpParser.BackQuoteString)
                pass

            elif la_ == 16:
                localctx = PhpParser.ParenthesisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1218
                self.parentheses()
                pass

            elif la_ == 17:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1219
                self.match(PhpParser.Yield)
                pass

            elif la_ == 18:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1220
                self.match(PhpParser.List)
                self.state = 1221
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1222
                self.assignmentList()
                self.state = 1223
                self.match(PhpParser.CloseRoundBracket)
                self.state = 1224
                self.match(PhpParser.Eq)
                self.state = 1225
                self.expression(31)
                pass

            elif la_ == 19:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1227
                self.match(PhpParser.IsSet)
                self.state = 1228
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1229
                self.chainList()
                self.state = 1230
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 20:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1232
                self.match(PhpParser.Empty)
                self.state = 1233
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1234
                self.chain()
                self.state = 1235
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 21:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1237
                self.match(PhpParser.Eval)
                self.state = 1238
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1239
                self.expression(0)
                self.state = 1240
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 22:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1242
                self.match(PhpParser.Exit)
                self.state = 1246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1243
                    self.match(PhpParser.OpenRoundBracket)
                    self.state = 1244
                    self.match(PhpParser.CloseRoundBracket)

                elif la_ == 2:
                    self.state = 1245
                    self.parentheses()


                pass

            elif la_ == 23:
                localctx = PhpParser.LambdaFunctionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1248
                self.lambdaFunctionExpr()
                pass

            elif la_ == 24:
                localctx = PhpParser.MatchExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1249
                self.matchExpr()
                pass

            elif la_ == 25:
                localctx = PhpParser.IncludeExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1250
                _la = self._input.LA(1)
                if not(_la==88 or _la==89):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1251
                self.expression(9)
                pass

            elif la_ == 26:
                localctx = PhpParser.RequireExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1252
                _la = self._input.LA(1)
                if not(_la==114 or _la==115):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1253
                self.expression(8)
                pass

            elif la_ == 27:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1254
                self.match(PhpParser.Throw)
                self.state = 1255
                self.expression(7)
                pass

            elif la_ == 28:
                localctx = PhpParser.ArrayDestructExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1256
                self.arrayDestructuring()
                self.state = 1257
                self.match(PhpParser.Eq)
                self.state = 1258
                self.expression(6)
                pass

            elif la_ == 29:
                localctx = PhpParser.AssignmentExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1260
                self.assignable()
                self.state = 1261
                self.assignmentOperator()
                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43:
                    self.state = 1262
                    self.attributes()


                self.state = 1265
                self.expression(5)
                pass

            elif la_ == 30:
                localctx = PhpParser.AssignmentExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1267
                self.assignable()
                self.state = 1268
                self.match(PhpParser.Eq)
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43:
                    self.state = 1269
                    self.attributes()


                self.state = 1272
                self.match(PhpParser.Ampersand)
                self.state = 1275
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1273
                    self.chain()
                    pass

                elif la_ == 2:
                    self.state = 1274
                    self.newExpr()
                    pass


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1337
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                    if la_ == 1:
                        localctx = PhpParser.ExponentiationExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1279
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1280
                        localctx.op = self.match(PhpParser.Pow)
                        self.state = 1281
                        self.expression(24)
                        pass

                    elif la_ == 2:
                        localctx = PhpParser.MultiplicativeExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1282
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1283
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & 7) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1284
                        self.expression(23)
                        pass

                    elif la_ == 3:
                        localctx = PhpParser.AdditiveExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1285
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1286
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & 259) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1287
                        self.expression(22)
                        pass

                    elif la_ == 4:
                        localctx = PhpParser.ShiftExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1288
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1289
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==190 or _la==191):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1290
                        self.expression(21)
                        pass

                    elif la_ == 5:
                        localctx = PhpParser.RelationalExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1291
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1292
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & 100663299) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1293
                        self.expression(20)
                        pass

                    elif la_ == 6:
                        localctx = PhpParser.EqualityExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1294
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1295
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & 15) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1296
                        self.expression(19)
                        pass

                    elif la_ == 7:
                        localctx = PhpParser.BitwiseAndExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1297
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1298
                        localctx.op = self.match(PhpParser.Ampersand)
                        self.state = 1299
                        self.expression(18)
                        pass

                    elif la_ == 8:
                        localctx = PhpParser.BitwiseExcOrExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1300
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1301
                        localctx.op = self.match(PhpParser.Caret)
                        self.state = 1302
                        self.expression(17)
                        pass

                    elif la_ == 9:
                        localctx = PhpParser.BitwiseIncOrExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1303
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1304
                        localctx.op = self.match(PhpParser.Pipe)
                        self.state = 1305
                        self.expression(16)
                        pass

                    elif la_ == 10:
                        localctx = PhpParser.LogicalAndExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1306
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1307
                        localctx.op = self.match(PhpParser.BooleanAnd)
                        self.state = 1308
                        self.expression(15)
                        pass

                    elif la_ == 11:
                        localctx = PhpParser.LogicalIncOrExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1309
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1310
                        localctx.op = self.match(PhpParser.BooleanOr)
                        self.state = 1311
                        self.expression(14)
                        pass

                    elif la_ == 12:
                        localctx = PhpParser.ConditionalExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1312
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1313
                        localctx.op = self.match(PhpParser.QuestionMark)
                        self.state = 1315
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138177) != 0):
                            self.state = 1314
                            self.expression(0)


                        self.state = 1317
                        self.match(PhpParser.Colon)
                        self.state = 1318
                        self.expression(13)
                        pass

                    elif la_ == 13:
                        localctx = PhpParser.CoalesceExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1319
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1320
                        localctx.op = self.match(PhpParser.NullCoalescing)
                        self.state = 1321
                        self.expression(12)
                        pass

                    elif la_ == 14:
                        localctx = PhpParser.SpaceshipExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1322
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1323
                        localctx.op = self.match(PhpParser.Spaceship)
                        self.state = 1324
                        self.expression(11)
                        pass

                    elif la_ == 15:
                        localctx = PhpParser.LogicalAndExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1325
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1326
                        localctx.op = self.match(PhpParser.LogicalAnd)
                        self.state = 1327
                        self.expression(4)
                        pass

                    elif la_ == 16:
                        localctx = PhpParser.LogicalExcOrExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1328
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1329
                        localctx.op = self.match(PhpParser.LogicalXor)
                        self.state = 1330
                        self.expression(3)
                        pass

                    elif la_ == 17:
                        localctx = PhpParser.LogicalIncOrExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1331
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1332
                        localctx.op = self.match(PhpParser.LogicalOr)
                        self.state = 1333
                        self.expression(2)
                        pass

                    elif la_ == 18:
                        localctx = PhpParser.InstanceOfExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1334
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1335
                        self.match(PhpParser.InstanceOf)
                        self.state = 1336
                        self.typeRef()
                        pass

             
                self.state = 1341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AssignableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def arrayCreation(self):
            return self.getTypedRuleContext(PhpParser.ArrayCreationContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_assignable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignable" ):
                listener.enterAssignable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignable" ):
                listener.exitAssignable(self)




    def assignable(self):

        localctx = PhpParser.AssignableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assignable)
        try:
            self.state = 1344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self.chain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1343
                self.arrayCreation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def OpenSquareBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.OpenSquareBracket)
            else:
                return self.getToken(PhpParser.OpenSquareBracket, i)

        def CloseSquareBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.CloseSquareBracket)
            else:
                return self.getToken(PhpParser.CloseSquareBracket, i)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def arrayItemList(self):
            return self.getTypedRuleContext(PhpParser.ArrayItemListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_arrayCreation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreation" ):
                listener.enterArrayCreation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreation" ):
                listener.exitArrayCreation(self)




    def arrayCreation(self):

        localctx = PhpParser.ArrayCreationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_arrayCreation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.state = 1346
                self.match(PhpParser.Array)
                self.state = 1347
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138193) != 0):
                    self.state = 1348
                    self.arrayItemList()


                self.state = 1351
                self.match(PhpParser.CloseRoundBracket)
                pass
            elif token in [214]:
                self.state = 1352
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138193) != 0):
                    self.state = 1353
                    self.arrayItemList()


                self.state = 1356
                self.match(PhpParser.CloseSquareBracket)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1359
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1360
                self.expression(0)
                self.state = 1361
                self.match(PhpParser.CloseSquareBracket)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDestructuringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)

        def indexedDestructItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IndexedDestructItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.IndexedDestructItemContext,i)


        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def keyedDestructItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.KeyedDestructItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.KeyedDestructItemContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_arrayDestructuring

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDestructuring" ):
                listener.enterArrayDestructuring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDestructuring" ):
                listener.exitArrayDestructuring(self)




    def arrayDestructuring(self):

        localctx = PhpParser.ArrayDestructuringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_arrayDestructuring)
        self._la = 0 # Token type
        try:
            self.state = 1410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1365
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==218:
                    self.state = 1366
                    self.match(PhpParser.Comma)
                    self.state = 1371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1372
                self.indexedDestructItem()
                self.state = 1381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1374 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1373
                            self.match(PhpParser.Comma)
                            self.state = 1376 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==218):
                                break

                        self.state = 1378
                        self.indexedDestructItem() 
                    self.state = 1383
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                self.state = 1387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==218:
                    self.state = 1384
                    self.match(PhpParser.Comma)
                    self.state = 1389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1390
                self.match(PhpParser.CloseSquareBracket)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1392
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1393
                self.keyedDestructItem()
                self.state = 1402
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1395 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1394
                            self.match(PhpParser.Comma)
                            self.state = 1397 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==218):
                                break

                        self.state = 1399
                        self.keyedDestructItem() 
                    self.state = 1404
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 1405
                    self.match(PhpParser.Comma)


                self.state = 1408
                self.match(PhpParser.CloseSquareBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexedDestructItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_indexedDestructItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedDestructItem" ):
                listener.enterIndexedDestructItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedDestructItem" ):
                listener.exitIndexedDestructItem(self)




    def indexedDestructItem(self):

        localctx = PhpParser.IndexedDestructItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_indexedDestructItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198:
                self.state = 1412
                self.match(PhpParser.Ampersand)


            self.state = 1415
            self.chain()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyedDestructItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_keyedDestructItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedDestructItem" ):
                listener.enterKeyedDestructItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedDestructItem" ):
                listener.exitKeyedDestructItem(self)




    def keyedDestructItem(self):

        localctx = PhpParser.KeyedDestructItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_keyedDestructItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1417
                self.expression(0)
                self.state = 1418
                self.match(PhpParser.DoubleArrow)


            self.state = 1423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198:
                self.state = 1422
                self.match(PhpParser.Ampersand)


            self.state = 1425
            self.chain()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function_(self):
            return self.getToken(PhpParser.Function_, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(PhpParser.FormalParameterListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def lambdaFunctionUseVars(self):
            return self.getTypedRuleContext(PhpParser.LambdaFunctionUseVarsContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def typeHint(self):
            return self.getTypedRuleContext(PhpParser.TypeHintContext,0)


        def LambdaFn(self):
            return self.getToken(PhpParser.LambdaFn, 0)

        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_lambdaFunctionExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionExpr" ):
                listener.enterLambdaFunctionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionExpr" ):
                listener.exitLambdaFunctionExpr(self)




    def lambdaFunctionExpr(self):

        localctx = PhpParser.LambdaFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_lambdaFunctionExpr)
        self._la = 0 # Token type
        try:
            self.state = 1453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82, 118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1427
                    self.match(PhpParser.Static)


                self.state = 1430
                self.match(PhpParser.Function_)
                self.state = 1432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==198:
                    self.state = 1431
                    self.match(PhpParser.Ampersand)


                self.state = 1434
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1435
                self.formalParameterList()
                self.state = 1436
                self.match(PhpParser.CloseRoundBracket)
                self.state = 1438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 1437
                    self.lambdaFunctionUseVars()


                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==219:
                    self.state = 1440
                    self.match(PhpParser.Colon)
                    self.state = 1441
                    self.typeHint(0)


                self.state = 1444
                self.blockStatement()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.match(PhpParser.LambdaFn)
                self.state = 1447
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1448
                self.formalParameterList()
                self.state = 1449
                self.match(PhpParser.CloseRoundBracket)
                self.state = 1450
                self.match(PhpParser.DoubleArrow)
                self.state = 1451
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Match_(self):
            return self.getToken(PhpParser.Match_, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def matchItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.MatchItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.MatchItemContext,i)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_matchExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchExpr" ):
                listener.enterMatchExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchExpr" ):
                listener.exitMatchExpr(self)




    def matchExpr(self):

        localctx = PhpParser.MatchExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_matchExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.match(PhpParser.Match_)
            self.state = 1456
            self.match(PhpParser.OpenRoundBracket)
            self.state = 1457
            self.expression(0)
            self.state = 1458
            self.match(PhpParser.CloseRoundBracket)
            self.state = 1459
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 1460
            self.matchItem()
            self.state = 1465
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1461
                    self.match(PhpParser.Comma)
                    self.state = 1462
                    self.matchItem() 
                self.state = 1467
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

            self.state = 1469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1468
                self.match(PhpParser.Comma)


            self.state = 1471
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_matchItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchItem" ):
                listener.enterMatchItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchItem" ):
                listener.exitMatchItem(self)




    def matchItem(self):

        localctx = PhpParser.MatchItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_matchItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473
            self.expression(0)
            self.state = 1478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 1474
                self.match(PhpParser.Comma)
                self.state = 1475
                self.expression(0)
                self.state = 1480
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1481
            self.match(PhpParser.DoubleArrow)
            self.state = 1482
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(PhpParser.New, 0)

        def typeRef(self):
            return self.getTypedRuleContext(PhpParser.TypeRefContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PhpParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_newExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpr" ):
                listener.enterNewExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpr" ):
                listener.exitNewExpr(self)




    def newExpr(self):

        localctx = PhpParser.NewExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_newExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            self.match(PhpParser.New)
            self.state = 1485
            self.typeRef()
            self.state = 1487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1486
                self.arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def PlusEqual(self):
            return self.getToken(PhpParser.PlusEqual, 0)

        def MinusEqual(self):
            return self.getToken(PhpParser.MinusEqual, 0)

        def MulEqual(self):
            return self.getToken(PhpParser.MulEqual, 0)

        def PowEqual(self):
            return self.getToken(PhpParser.PowEqual, 0)

        def DivEqual(self):
            return self.getToken(PhpParser.DivEqual, 0)

        def Concaequal(self):
            return self.getToken(PhpParser.Concaequal, 0)

        def ModEqual(self):
            return self.getToken(PhpParser.ModEqual, 0)

        def AndEqual(self):
            return self.getToken(PhpParser.AndEqual, 0)

        def OrEqual(self):
            return self.getToken(PhpParser.OrEqual, 0)

        def XorEqual(self):
            return self.getToken(PhpParser.XorEqual, 0)

        def ShiftLeftEqual(self):
            return self.getToken(PhpParser.ShiftLeftEqual, 0)

        def ShiftRightEqual(self):
            return self.getToken(PhpParser.ShiftRightEqual, 0)

        def NullCoalescingEqual(self):
            return self.getToken(PhpParser.NullCoalescingEqual, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = PhpParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1489
            _la = self._input.LA(1)
            if not(((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 281474976784375) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Yield(self):
            return self.getToken(PhpParser.Yield, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def From(self):
            return self.getToken(PhpParser.From, 0)

        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_yieldExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldExpression" ):
                listener.enterYieldExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldExpression" ):
                listener.exitYieldExpression(self)




    def yieldExpression(self):

        localctx = PhpParser.YieldExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_yieldExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.match(PhpParser.Yield)
            self.state = 1499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1492
                self.expression(0)
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==164:
                    self.state = 1493
                    self.match(PhpParser.DoubleArrow)
                    self.state = 1494
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 1497
                self.match(PhpParser.From)
                self.state = 1498
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ArrayItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.ArrayItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_arrayItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayItemList" ):
                listener.enterArrayItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayItemList" ):
                listener.exitArrayItemList(self)




    def arrayItemList(self):

        localctx = PhpParser.ArrayItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_arrayItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self.arrayItem()
            self.state = 1506
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1502
                    self.match(PhpParser.Comma)
                    self.state = 1503
                    self.arrayItem() 
                self.state = 1508
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

            self.state = 1510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1509
                self.match(PhpParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_arrayItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayItem" ):
                listener.enterArrayItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayItem" ):
                listener.exitArrayItem(self)




    def arrayItem(self):

        localctx = PhpParser.ArrayItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_arrayItem)
        self._la = 0 # Token type
        try:
            self.state = 1524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1512
                self.expression(0)
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==164:
                    self.state = 1513
                    self.match(PhpParser.DoubleArrow)
                    self.state = 1514
                    self.expression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138177) != 0):
                    self.state = 1517
                    self.expression(0)
                    self.state = 1518
                    self.match(PhpParser.DoubleArrow)


                self.state = 1522
                self.match(PhpParser.Ampersand)
                self.state = 1523
                self.chain()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaFunctionUseVarsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def lambdaFunctionUseVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.LambdaFunctionUseVarContext)
            else:
                return self.getTypedRuleContext(PhpParser.LambdaFunctionUseVarContext,i)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_lambdaFunctionUseVars

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionUseVars" ):
                listener.enterLambdaFunctionUseVars(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionUseVars" ):
                listener.exitLambdaFunctionUseVars(self)




    def lambdaFunctionUseVars(self):

        localctx = PhpParser.LambdaFunctionUseVarsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_lambdaFunctionUseVars)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1526
            self.match(PhpParser.Use)
            self.state = 1527
            self.match(PhpParser.OpenRoundBracket)
            self.state = 1528
            self.lambdaFunctionUseVar()
            self.state = 1533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 1529
                self.match(PhpParser.Comma)
                self.state = 1530
                self.lambdaFunctionUseVar()
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1536
            self.match(PhpParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaFunctionUseVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_lambdaFunctionUseVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionUseVar" ):
                listener.enterLambdaFunctionUseVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionUseVar" ):
                listener.exitLambdaFunctionUseVar(self)




    def lambdaFunctionUseVar(self):

        localctx = PhpParser.LambdaFunctionUseVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_lambdaFunctionUseVar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198:
                self.state = 1538
                self.match(PhpParser.Ampersand)


            self.state = 1541
            self.match(PhpParser.VarName)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedStaticTypeRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PhpParser.GenericDynamicArgsContext,0)


        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_qualifiedStaticTypeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedStaticTypeRef" ):
                listener.enterQualifiedStaticTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedStaticTypeRef" ):
                listener.exitQualifiedStaticTypeRef(self)




    def qualifiedStaticTypeRef(self):

        localctx = PhpParser.QualifiedStaticTypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_qualifiedStaticTypeRef)
        try:
            self.state = 1548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1543
                self.qualifiedNamespaceName()
                self.state = 1545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1544
                    self.genericDynamicArgs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1547
                self.match(PhpParser.Static)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def indirectTypeRef(self):
            return self.getTypedRuleContext(PhpParser.IndirectTypeRefContext,0)


        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PhpParser.GenericDynamicArgsContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(PhpParser.PrimitiveTypeContext,0)


        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def anonymousClass(self):
            return self.getTypedRuleContext(PhpParser.AnonymousClassContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_typeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeRef" ):
                listener.enterTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeRef" ):
                listener.exitTypeRef(self)




    def typeRef(self):

        localctx = PhpParser.TypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_typeRef)
        try:
            self.state = 1560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1550
                    self.qualifiedNamespaceName()
                    pass

                elif la_ == 2:
                    self.state = 1551
                    self.indirectTypeRef()
                    pass


                self.state = 1555
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1554
                    self.genericDynamicArgs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1557
                self.primitiveType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1558
                self.match(PhpParser.Static)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1559
                self.anonymousClass()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnonymousClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def classEntryType(self):
            return self.getTypedRuleContext(PhpParser.ClassEntryTypeContext,0)


        def Interface(self):
            return self.getToken(PhpParser.Interface, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Private(self):
            return self.getToken(PhpParser.Private, 0)

        def modifier(self):
            return self.getTypedRuleContext(PhpParser.ModifierContext,0)


        def Partial(self):
            return self.getToken(PhpParser.Partial, 0)

        def classStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ClassStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ClassStatementContext,i)


        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListInBracketsContext,0)


        def Extends(self):
            return self.getToken(PhpParser.Extends, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def Implements(self):
            return self.getToken(PhpParser.Implements, 0)

        def interfaceList(self):
            return self.getTypedRuleContext(PhpParser.InterfaceListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_anonymousClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousClass" ):
                listener.enterAnonymousClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousClass" ):
                listener.exitAnonymousClass(self)




    def anonymousClass(self):

        localctx = PhpParser.AnonymousClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_anonymousClass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 1562
                self.attributes()


            self.state = 1566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 1565
                self.match(PhpParser.Private)


            self.state = 1569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44 or _la==77:
                self.state = 1568
                self.modifier()


            self.state = 1572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 1571
                self.match(PhpParser.Partial)


            self.state = 1595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 122]:
                self.state = 1574
                self.classEntryType()
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==162:
                    self.state = 1575
                    self.typeParameterListInBrackets()


                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 1578
                    self.match(PhpParser.Extends)
                    self.state = 1579
                    self.qualifiedStaticTypeRef()


                self.state = 1584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1582
                    self.match(PhpParser.Implements)
                    self.state = 1583
                    self.interfaceList()


                pass
            elif token in [96]:
                self.state = 1586
                self.match(PhpParser.Interface)
                self.state = 1587
                self.identifier()
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==162:
                    self.state = 1588
                    self.typeParameterListInBrackets()


                self.state = 1593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 1591
                    self.match(PhpParser.Extends)
                    self.state = 1592
                    self.interfaceList()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1597
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 1601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 72083982316994560) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 6757727313330209) != 0):
                self.state = 1598
                self.classStatement()
                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1604
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndirectTypeRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chainBase(self):
            return self.getTypedRuleContext(PhpParser.ChainBaseContext,0)


        def ObjectOperator(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.ObjectOperator)
            else:
                return self.getToken(PhpParser.ObjectOperator, i)

        def keyedFieldName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.KeyedFieldNameContext)
            else:
                return self.getTypedRuleContext(PhpParser.KeyedFieldNameContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_indirectTypeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirectTypeRef" ):
                listener.enterIndirectTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirectTypeRef" ):
                listener.exitIndirectTypeRef(self)




    def indirectTypeRef(self):

        localctx = PhpParser.IndirectTypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_indirectTypeRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1606
            self.chainBase()
            self.state = 1611
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1607
                    self.match(PhpParser.ObjectOperator)
                    self.state = 1608
                    self.keyedFieldName() 
                self.state = 1613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNamespaceNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def NamespaceSeparator(self):
            return self.getToken(PhpParser.NamespaceSeparator, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_qualifiedNamespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNamespaceName" ):
                listener.enterQualifiedNamespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNamespaceName" ):
                listener.exitQualifiedNamespaceName(self)




    def qualifiedNamespaceName(self):

        localctx = PhpParser.QualifiedNamespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_qualifiedNamespaceName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1614
                self.match(PhpParser.Namespace)


            self.state = 1618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==194:
                self.state = 1617
                self.match(PhpParser.NamespaceSeparator)


            self.state = 1620
            self.namespaceNameList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierContext,i)


        def NamespaceSeparator(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.NamespaceSeparator)
            else:
                return self.getToken(PhpParser.NamespaceSeparator, i)

        def namespaceNameTail(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameTailContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_namespaceNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceNameList" ):
                listener.enterNamespaceNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceNameList" ):
                listener.exitNamespaceNameList(self)




    def namespaceNameList(self):

        localctx = PhpParser.NamespaceNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_namespaceNameList)
        try:
            self.state = 1635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1622
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1623
                self.identifier()
                self.state = 1628
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1624
                        self.match(PhpParser.NamespaceSeparator)
                        self.state = 1625
                        self.identifier() 
                    self.state = 1630
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

                self.state = 1633
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1631
                    self.match(PhpParser.NamespaceSeparator)
                    self.state = 1632
                    self.namespaceNameTail()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceNameTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierContext,i)


        def As(self):
            return self.getToken(PhpParser.As, 0)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def namespaceNameTail(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.NamespaceNameTailContext)
            else:
                return self.getTypedRuleContext(PhpParser.NamespaceNameTailContext,i)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_namespaceNameTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceNameTail" ):
                listener.enterNamespaceNameTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceNameTail" ):
                listener.exitNamespaceNameTail(self)




    def namespaceNameTail(self):

        localctx = PhpParser.NamespaceNameTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_namespaceNameTail)
        self._la = 0 # Token type
        try:
            self.state = 1656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 225]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1637
                self.identifier()
                self.state = 1640
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1638
                    self.match(PhpParser.As)
                    self.state = 1639
                    self.identifier()


                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1642
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1643
                self.namespaceNameTail()
                self.state = 1648
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1644
                        self.match(PhpParser.Comma)
                        self.state = 1645
                        self.namespaceNameTail() 
                    self.state = 1650
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==218:
                    self.state = 1651
                    self.match(PhpParser.Comma)


                self.state = 1654
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNamespaceNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.QualifiedNamespaceNameContext)
            else:
                return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_qualifiedNamespaceNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNamespaceNameList" ):
                listener.enterQualifiedNamespaceNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNamespaceNameList" ):
                listener.exitQualifiedNamespaceNameList(self)




    def qualifiedNamespaceNameList(self):

        localctx = PhpParser.QualifiedNamespaceNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_qualifiedNamespaceNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1658
            self.qualifiedNamespaceName()
            self.state = 1663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 1659
                self.match(PhpParser.Comma)
                self.state = 1660
                self.qualifiedNamespaceName()
                self.state = 1665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def actualArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ActualArgumentContext)
            else:
                return self.getTypedRuleContext(PhpParser.ActualArgumentContext,i)


        def yieldExpression(self):
            return self.getTypedRuleContext(PhpParser.YieldExpressionContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = PhpParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.match(PhpParser.OpenRoundBracket)
            self.state = 1676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1667
                self.actualArgument()
                self.state = 1672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1668
                        self.match(PhpParser.Comma)
                        self.state = 1669
                        self.actualArgument() 
                    self.state = 1674
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)


            elif la_ == 2:
                self.state = 1675
                self.yieldExpression()


            self.state = 1679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==218:
                self.state = 1678
                self.match(PhpParser.Comma)


            self.state = 1681
            self.match(PhpParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActualArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def argumentName(self):
            return self.getTypedRuleContext(PhpParser.ArgumentNameContext,0)


        def Ellipsis(self):
            return self.getToken(PhpParser.Ellipsis, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_actualArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualArgument" ):
                listener.enterActualArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualArgument" ):
                listener.exitActualArgument(self)




    def actualArgument(self):

        localctx = PhpParser.ActualArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_actualArgument)
        self._la = 0 # Token type
        try:
            self.state = 1692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 194, 195, 200, 202, 203, 207, 208, 209, 212, 214, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 1683
                    self.argumentName()


                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 1686
                    self.match(PhpParser.Ellipsis)


                self.state = 1689
                self.expression(0)
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1690
                self.match(PhpParser.Ampersand)
                self.state = 1691
                self.chain()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_argumentName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentName" ):
                listener.enterArgumentName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentName" ):
                listener.exitArgumentName(self)




    def argumentName(self):

        localctx = PhpParser.ArgumentNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_argumentName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.identifier()
            self.state = 1695
            self.match(PhpParser.Colon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ConstantContext)
            else:
                return self.getTypedRuleContext(PhpParser.ConstantContext,i)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.StringContext)
            else:
                return self.getTypedRuleContext(PhpParser.StringContext,i)


        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def arrayItemList(self):
            return self.getTypedRuleContext(PhpParser.ArrayItemListContext,0)


        def Comma(self):
            return self.getToken(PhpParser.Comma, 0)

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)

        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def constantInitializer(self):
            return self.getTypedRuleContext(PhpParser.ConstantInitializerContext,0)


        def Plus(self):
            return self.getToken(PhpParser.Plus, 0)

        def Minus(self):
            return self.getToken(PhpParser.Minus, 0)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Dot)
            else:
                return self.getToken(PhpParser.Dot, i)

        def getRuleIndex(self):
            return PhpParser.RULE_constantInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantInitializer" ):
                listener.enterConstantInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantInitializer" ):
                listener.exitConstantInitializer(self)




    def constantInitializer(self):

        localctx = PhpParser.ConstantInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_constantInitializer)
        self._la = 0 # Token type
        try:
            self.state = 1732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1697
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1698
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1699
                self.match(PhpParser.Array)
                self.state = 1700
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138193) != 0):
                    self.state = 1701
                    self.arrayItemList()
                    self.state = 1703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==218:
                        self.state = 1702
                        self.match(PhpParser.Comma)




                self.state = 1707
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1708
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138193) != 0):
                    self.state = 1709
                    self.arrayItemList()
                    self.state = 1711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==218:
                        self.state = 1710
                        self.match(PhpParser.Comma)




                self.state = 1715
                self.match(PhpParser.CloseSquareBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1716
                _la = self._input.LA(1)
                if not(_la==202 or _la==203):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1717
                self.constantInitializer()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1718
                    self.string()
                    pass

                elif la_ == 2:
                    self.state = 1719
                    self.constant()
                    pass


                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==210:
                    self.state = 1722
                    self.match(PhpParser.Dot)
                    self.state = 1725
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                    if la_ == 1:
                        self.state = 1723
                        self.string()
                        pass

                    elif la_ == 2:
                        self.state = 1724
                        self.constant()
                        pass


                    self.state = 1731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Null(self):
            return self.getToken(PhpParser.Null, 0)

        def literalConstant(self):
            return self.getTypedRuleContext(PhpParser.LiteralConstantContext,0)


        def magicConstant(self):
            return self.getTypedRuleContext(PhpParser.MagicConstantContext,0)


        def classConstant(self):
            return self.getTypedRuleContext(PhpParser.ClassConstantContext,0)


        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = PhpParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_constant)
        try:
            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1734
                self.match(PhpParser.Null)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1735
                self.literalConstant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1736
                self.magicConstant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1737
                self.classConstant()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1738
                self.qualifiedNamespaceName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(PhpParser.Real, 0)

        def BooleanConstant(self):
            return self.getToken(PhpParser.BooleanConstant, 0)

        def numericConstant(self):
            return self.getTypedRuleContext(PhpParser.NumericConstantContext,0)


        def stringConstant(self):
            return self.getTypedRuleContext(PhpParser.StringConstantContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)




    def literalConstant(self):

        localctx = PhpParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_literalConstant)
        try:
            self.state = 1745
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [228]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1741
                self.match(PhpParser.Real)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1742
                self.match(PhpParser.BooleanConstant)
                pass
            elif token in [226, 227, 229, 230]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1743
                self.numericConstant()
                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1744
                self.stringConstant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Octal(self):
            return self.getToken(PhpParser.Octal, 0)

        def Decimal(self):
            return self.getToken(PhpParser.Decimal, 0)

        def Hex(self):
            return self.getToken(PhpParser.Hex, 0)

        def Binary(self):
            return self.getToken(PhpParser.Binary, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_numericConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericConstant" ):
                listener.enterNumericConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericConstant" ):
                listener.exitNumericConstant(self)




    def numericConstant(self):

        localctx = PhpParser.NumericConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_numericConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            _la = self._input.LA(1)
            if not(((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & 27) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def Class(self):
            return self.getToken(PhpParser.Class, 0)

        def Parent_(self):
            return self.getToken(PhpParser.Parent_, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Constructor(self):
            return self.getToken(PhpParser.Constructor, 0)

        def Get(self):
            return self.getToken(PhpParser.Get, 0)

        def Set(self):
            return self.getToken(PhpParser.Set, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def keyedVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.KeyedVariableContext)
            else:
                return self.getTypedRuleContext(PhpParser.KeyedVariableContext,i)


        def string(self):
            return self.getTypedRuleContext(PhpParser.StringContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_classConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassConstant" ):
                listener.enterClassConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassConstant" ):
                listener.exitClassConstant(self)




    def classConstant(self):

        localctx = PhpParser.ClassConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_classConstant)
        self._la = 0 # Token type
        try:
            self.state = 1767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1749
                _la = self._input.LA(1)
                if not(_la==54 or _la==107):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1750
                self.match(PhpParser.DoubleColon)
                self.state = 1755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1751
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 1752
                    self.match(PhpParser.Constructor)
                    pass

                elif la_ == 3:
                    self.state = 1753
                    self.match(PhpParser.Get)
                    pass

                elif la_ == 4:
                    self.state = 1754
                    self.match(PhpParser.Set)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1760
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 194, 225]:
                    self.state = 1757
                    self.qualifiedStaticTypeRef()
                    pass
                elif token in [209, 224]:
                    self.state = 1758
                    self.keyedVariable()
                    pass
                elif token in [232, 233, 234, 235]:
                    self.state = 1759
                    self.string()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1762
                self.match(PhpParser.DoubleColon)
                self.state = 1765
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 225]:
                    self.state = 1763
                    self.identifier()
                    pass
                elif token in [209, 224]:
                    self.state = 1764
                    self.keyedVariable()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Label(self):
            return self.getToken(PhpParser.Label, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_stringConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringConstant" ):
                listener.enterStringConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringConstant" ):
                listener.exitStringConstant(self)




    def stringConstant(self):

        localctx = PhpParser.StringConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_stringConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self.match(PhpParser.Label)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StartHereDoc(self):
            return self.getToken(PhpParser.StartHereDoc, 0)

        def HereDocText(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.HereDocText)
            else:
                return self.getToken(PhpParser.HereDocText, i)

        def StartNowDoc(self):
            return self.getToken(PhpParser.StartNowDoc, 0)

        def SingleQuoteString(self):
            return self.getToken(PhpParser.SingleQuoteString, 0)

        def DoubleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.DoubleQuote)
            else:
                return self.getToken(PhpParser.DoubleQuote, i)

        def interpolatedStringPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.InterpolatedStringPartContext)
            else:
                return self.getTypedRuleContext(PhpParser.InterpolatedStringPartContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = PhpParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_string)
        try:
            self.state = 1792
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [235]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1771
                self.match(PhpParser.StartHereDoc)
                self.state = 1773 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1772
                        self.match(PhpParser.HereDocText)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1775 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

                pass
            elif token in [234]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1777
                self.match(PhpParser.StartNowDoc)
                self.state = 1779 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1778
                        self.match(PhpParser.HereDocText)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1781 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

                pass
            elif token in [232]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1783
                self.match(PhpParser.SingleQuoteString)
                pass
            elif token in [233]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1784
                self.match(PhpParser.DoubleQuote)
                self.state = 1788
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1785
                        self.interpolatedStringPart() 
                    self.state = 1790
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

                self.state = 1791
                self.match(PhpParser.DoubleQuote)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterpolatedStringPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringPart(self):
            return self.getToken(PhpParser.StringPart, 0)

        def UnicodeEscape(self):
            return self.getToken(PhpParser.UnicodeEscape, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_interpolatedStringPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolatedStringPart" ):
                listener.enterInterpolatedStringPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolatedStringPart" ):
                listener.exitInterpolatedStringPart(self)




    def interpolatedStringPart(self):

        localctx = PhpParser.InterpolatedStringPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_interpolatedStringPart)
        try:
            self.state = 1797
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [239]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1794
                self.match(PhpParser.StringPart)
                pass
            elif token in [238]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1795
                self.match(PhpParser.UnicodeEscape)
                pass
            elif token in [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 194, 209, 212, 224, 225, 232, 233, 234, 235]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1796
                self.chain()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChainListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ChainContext)
            else:
                return self.getTypedRuleContext(PhpParser.ChainContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_chainList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainList" ):
                listener.enterChainList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainList" ):
                listener.exitChainList(self)




    def chainList(self):

        localctx = PhpParser.ChainListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_chainList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self.chain()
            self.state = 1804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 1800
                self.match(PhpParser.Comma)
                self.state = 1801
                self.chain()
                self.state = 1806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chainOrigin(self):
            return self.getTypedRuleContext(PhpParser.ChainOriginContext,0)


        def memberAccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.MemberAccessContext)
            else:
                return self.getTypedRuleContext(PhpParser.MemberAccessContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_chain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChain" ):
                listener.enterChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChain" ):
                listener.exitChain(self)




    def chain(self):

        localctx = PhpParser.ChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_chain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1807
            self.chainOrigin()
            self.state = 1811
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1808
                    self.memberAccess() 
                self.state = 1813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChainOriginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chainBase(self):
            return self.getTypedRuleContext(PhpParser.ChainBaseContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(PhpParser.FunctionCallContext,0)


        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def newExpr(self):
            return self.getTypedRuleContext(PhpParser.NewExprContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_chainOrigin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainOrigin" ):
                listener.enterChainOrigin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainOrigin" ):
                listener.exitChainOrigin(self)




    def chainOrigin(self):

        localctx = PhpParser.ChainOriginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_chainOrigin)
        try:
            self.state = 1820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1814
                self.chainBase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1815
                self.functionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1816
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1817
                self.newExpr()
                self.state = 1818
                self.match(PhpParser.CloseRoundBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ObjectOperator(self):
            return self.getToken(PhpParser.ObjectOperator, 0)

        def keyedFieldName(self):
            return self.getTypedRuleContext(PhpParser.KeyedFieldNameContext,0)


        def actualArguments(self):
            return self.getTypedRuleContext(PhpParser.ActualArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_memberAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)




    def memberAccess(self):

        localctx = PhpParser.MemberAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_memberAccess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1822
            self.match(PhpParser.ObjectOperator)
            self.state = 1823
            self.keyedFieldName()
            self.state = 1825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 1824
                self.actualArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallName(self):
            return self.getTypedRuleContext(PhpParser.FunctionCallNameContext,0)


        def actualArguments(self):
            return self.getTypedRuleContext(PhpParser.ActualArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = PhpParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self.functionCallName()
            self.state = 1828
            self.actualArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def classConstant(self):
            return self.getTypedRuleContext(PhpParser.ClassConstantContext,0)


        def chainBase(self):
            return self.getTypedRuleContext(PhpParser.ChainBaseContext,0)


        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_functionCallName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallName" ):
                listener.enterFunctionCallName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallName" ):
                listener.exitFunctionCallName(self)




    def functionCallName(self):

        localctx = PhpParser.FunctionCallNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_functionCallName)
        try:
            self.state = 1834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1830
                self.qualifiedNamespaceName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1831
                self.classConstant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1832
                self.chainBase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1833
                self.parentheses()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActualArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PhpParser.GenericDynamicArgsContext,0)


        def arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ArgumentsContext)
            else:
                return self.getTypedRuleContext(PhpParser.ArgumentsContext,i)


        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_actualArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualArguments" ):
                listener.enterActualArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualArguments" ):
                listener.exitActualArguments(self)




    def actualArguments(self):

        localctx = PhpParser.ActualArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_actualArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==162:
                self.state = 1836
                self.genericDynamicArgs()


            self.state = 1840 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1839
                    self.arguments()

                else:
                    raise NoViableAltException(self)
                self.state = 1842 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

            self.state = 1847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1844
                    self.squareCurlyExpression() 
                self.state = 1849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChainBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.KeyedVariableContext)
            else:
                return self.getTypedRuleContext(PhpParser.KeyedVariableContext,i)


        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_chainBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainBase" ):
                listener.enterChainBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainBase" ):
                listener.exitChainBase(self)




    def chainBase(self):

        localctx = PhpParser.ChainBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_chainBase)
        try:
            self.state = 1859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [209, 224]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1850
                self.keyedVariable()
                self.state = 1853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1851
                    self.match(PhpParser.DoubleColon)
                    self.state = 1852
                    self.keyedVariable()


                pass
            elif token in [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 194, 225]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1855
                self.qualifiedStaticTypeRef()
                self.state = 1856
                self.match(PhpParser.DoubleColon)
                self.state = 1857
                self.keyedVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyedFieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedSimpleFieldName(self):
            return self.getTypedRuleContext(PhpParser.KeyedSimpleFieldNameContext,0)


        def keyedVariable(self):
            return self.getTypedRuleContext(PhpParser.KeyedVariableContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_keyedFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedFieldName" ):
                listener.enterKeyedFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedFieldName" ):
                listener.exitKeyedFieldName(self)




    def keyedFieldName(self):

        localctx = PhpParser.KeyedFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_keyedFieldName)
        try:
            self.state = 1863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 216, 225]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1861
                self.keyedSimpleFieldName()
                pass
            elif token in [209, 224]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1862
                self.keyedVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyedSimpleFieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_keyedSimpleFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedSimpleFieldName" ):
                listener.enterKeyedSimpleFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedSimpleFieldName" ):
                listener.exitKeyedSimpleFieldName(self)




    def keyedSimpleFieldName(self):

        localctx = PhpParser.KeyedSimpleFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_keyedSimpleFieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1870
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 225]:
                self.state = 1865
                self.identifier()
                pass
            elif token in [216]:
                self.state = 1866
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1867
                self.expression(0)
                self.state = 1868
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1875
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1872
                    self.squareCurlyExpression() 
                self.state = 1877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyedVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Dollar(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Dollar)
            else:
                return self.getToken(PhpParser.Dollar, i)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_keyedVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedVariable" ):
                listener.enterKeyedVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedVariable" ):
                listener.exitKeyedVariable(self)




    def keyedVariable(self):

        localctx = PhpParser.KeyedVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_keyedVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1881
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1878
                    self.match(PhpParser.Dollar) 
                self.state = 1883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

            self.state = 1890
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [224]:
                self.state = 1884
                self.match(PhpParser.VarName)
                pass
            elif token in [209]:
                self.state = 1885
                self.match(PhpParser.Dollar)
                self.state = 1886
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1887
                self.expression(0)
                self.state = 1888
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1895
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1892
                    self.squareCurlyExpression() 
                self.state = 1897
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SquareCurlyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)

        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_squareCurlyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSquareCurlyExpression" ):
                listener.enterSquareCurlyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSquareCurlyExpression" ):
                listener.exitSquareCurlyExpression(self)




    def squareCurlyExpression(self):

        localctx = PhpParser.SquareCurlyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_squareCurlyExpression)
        self._la = 0 # Token type
        try:
            self.state = 1907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [214]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1898
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138177) != 0):
                    self.state = 1899
                    self.expression(0)


                self.state = 1902
                self.match(PhpParser.CloseSquareBracket)
                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1903
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1904
                self.expression(0)
                self.state = 1905
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.AssignmentListElementContext)
            else:
                return self.getTypedRuleContext(PhpParser.AssignmentListElementContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)




    def assignmentList(self):

        localctx = PhpParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138193) != 0):
                self.state = 1909
                self.assignmentListElement()


            self.state = 1918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==218:
                self.state = 1912
                self.match(PhpParser.Comma)
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 441352763482308607) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4396974138193) != 0):
                    self.state = 1913
                    self.assignmentListElement()


                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def List(self):
            return self.getToken(PhpParser.List, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(PhpParser.AssignmentListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def arrayItem(self):
            return self.getTypedRuleContext(PhpParser.ArrayItemContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_assignmentListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentListElement" ):
                listener.enterAssignmentListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentListElement" ):
                listener.exitAssignmentListElement(self)




    def assignmentListElement(self):

        localctx = PhpParser.AssignmentListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_assignmentListElement)
        try:
            self.state = 1928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1921
                self.chain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1922
                self.match(PhpParser.List)
                self.state = 1923
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1924
                self.assignmentList()
                self.state = 1925
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1927
                self.arrayItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abstract(self):
            return self.getToken(PhpParser.Abstract, 0)

        def Final(self):
            return self.getToken(PhpParser.Final, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = PhpParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            _la = self._input.LA(1)
            if not(_la==44 or _la==77):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Label(self):
            return self.getToken(PhpParser.Label, 0)

        def Abstract(self):
            return self.getToken(PhpParser.Abstract, 0)

        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def As(self):
            return self.getToken(PhpParser.As, 0)

        def BinaryCast(self):
            return self.getToken(PhpParser.BinaryCast, 0)

        def BoolType(self):
            return self.getToken(PhpParser.BoolType, 0)

        def BooleanConstant(self):
            return self.getToken(PhpParser.BooleanConstant, 0)

        def Break(self):
            return self.getToken(PhpParser.Break, 0)

        def Callable(self):
            return self.getToken(PhpParser.Callable, 0)

        def Case(self):
            return self.getToken(PhpParser.Case, 0)

        def Catch(self):
            return self.getToken(PhpParser.Catch, 0)

        def Class(self):
            return self.getToken(PhpParser.Class, 0)

        def Clone(self):
            return self.getToken(PhpParser.Clone, 0)

        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def Continue(self):
            return self.getToken(PhpParser.Continue, 0)

        def Declare(self):
            return self.getToken(PhpParser.Declare, 0)

        def Default(self):
            return self.getToken(PhpParser.Default, 0)

        def Do(self):
            return self.getToken(PhpParser.Do, 0)

        def DoubleCast(self):
            return self.getToken(PhpParser.DoubleCast, 0)

        def DoubleType(self):
            return self.getToken(PhpParser.DoubleType, 0)

        def Echo(self):
            return self.getToken(PhpParser.Echo, 0)

        def Else(self):
            return self.getToken(PhpParser.Else, 0)

        def ElseIf(self):
            return self.getToken(PhpParser.ElseIf, 0)

        def Empty(self):
            return self.getToken(PhpParser.Empty, 0)

        def EndDeclare(self):
            return self.getToken(PhpParser.EndDeclare, 0)

        def EndFor(self):
            return self.getToken(PhpParser.EndFor, 0)

        def EndForeach(self):
            return self.getToken(PhpParser.EndForeach, 0)

        def EndIf(self):
            return self.getToken(PhpParser.EndIf, 0)

        def EndSwitch(self):
            return self.getToken(PhpParser.EndSwitch, 0)

        def EndWhile(self):
            return self.getToken(PhpParser.EndWhile, 0)

        def Eval(self):
            return self.getToken(PhpParser.Eval, 0)

        def Exit(self):
            return self.getToken(PhpParser.Exit, 0)

        def Extends(self):
            return self.getToken(PhpParser.Extends, 0)

        def Final(self):
            return self.getToken(PhpParser.Final, 0)

        def Finally(self):
            return self.getToken(PhpParser.Finally, 0)

        def FloatCast(self):
            return self.getToken(PhpParser.FloatCast, 0)

        def For(self):
            return self.getToken(PhpParser.For, 0)

        def Foreach(self):
            return self.getToken(PhpParser.Foreach, 0)

        def Function_(self):
            return self.getToken(PhpParser.Function_, 0)

        def Global(self):
            return self.getToken(PhpParser.Global, 0)

        def Goto(self):
            return self.getToken(PhpParser.Goto, 0)

        def If(self):
            return self.getToken(PhpParser.If, 0)

        def Implements(self):
            return self.getToken(PhpParser.Implements, 0)

        def Import(self):
            return self.getToken(PhpParser.Import, 0)

        def Include(self):
            return self.getToken(PhpParser.Include, 0)

        def IncludeOnce(self):
            return self.getToken(PhpParser.IncludeOnce, 0)

        def InstanceOf(self):
            return self.getToken(PhpParser.InstanceOf, 0)

        def InsteadOf(self):
            return self.getToken(PhpParser.InsteadOf, 0)

        def Int16Cast(self):
            return self.getToken(PhpParser.Int16Cast, 0)

        def Int64Type(self):
            return self.getToken(PhpParser.Int64Type, 0)

        def Int8Cast(self):
            return self.getToken(PhpParser.Int8Cast, 0)

        def Interface(self):
            return self.getToken(PhpParser.Interface, 0)

        def IntType(self):
            return self.getToken(PhpParser.IntType, 0)

        def IsSet(self):
            return self.getToken(PhpParser.IsSet, 0)

        def LambdaFn(self):
            return self.getToken(PhpParser.LambdaFn, 0)

        def List(self):
            return self.getToken(PhpParser.List, 0)

        def LogicalAnd(self):
            return self.getToken(PhpParser.LogicalAnd, 0)

        def LogicalOr(self):
            return self.getToken(PhpParser.LogicalOr, 0)

        def LogicalXor(self):
            return self.getToken(PhpParser.LogicalXor, 0)

        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def New(self):
            return self.getToken(PhpParser.New, 0)

        def Null(self):
            return self.getToken(PhpParser.Null, 0)

        def ObjectType(self):
            return self.getToken(PhpParser.ObjectType, 0)

        def Parent_(self):
            return self.getToken(PhpParser.Parent_, 0)

        def Partial(self):
            return self.getToken(PhpParser.Partial, 0)

        def Print(self):
            return self.getToken(PhpParser.Print, 0)

        def Private(self):
            return self.getToken(PhpParser.Private, 0)

        def Protected(self):
            return self.getToken(PhpParser.Protected, 0)

        def Public(self):
            return self.getToken(PhpParser.Public, 0)

        def Readonly(self):
            return self.getToken(PhpParser.Readonly, 0)

        def Require(self):
            return self.getToken(PhpParser.Require, 0)

        def RequireOnce(self):
            return self.getToken(PhpParser.RequireOnce, 0)

        def Resource(self):
            return self.getToken(PhpParser.Resource, 0)

        def Return(self):
            return self.getToken(PhpParser.Return, 0)

        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def StringType(self):
            return self.getToken(PhpParser.StringType, 0)

        def Switch(self):
            return self.getToken(PhpParser.Switch, 0)

        def Throw(self):
            return self.getToken(PhpParser.Throw, 0)

        def Trait(self):
            return self.getToken(PhpParser.Trait, 0)

        def Try(self):
            return self.getToken(PhpParser.Try, 0)

        def Typeof(self):
            return self.getToken(PhpParser.Typeof, 0)

        def UintCast(self):
            return self.getToken(PhpParser.UintCast, 0)

        def UnicodeCast(self):
            return self.getToken(PhpParser.UnicodeCast, 0)

        def Unset(self):
            return self.getToken(PhpParser.Unset, 0)

        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def Var(self):
            return self.getToken(PhpParser.Var, 0)

        def While(self):
            return self.getToken(PhpParser.While, 0)

        def Yield(self):
            return self.getToken(PhpParser.Yield, 0)

        def From(self):
            return self.getToken(PhpParser.From, 0)

        def Enum_(self):
            return self.getToken(PhpParser.Enum_, 0)

        def Match_(self):
            return self.getToken(PhpParser.Match_, 0)

        def Ticks(self):
            return self.getToken(PhpParser.Ticks, 0)

        def Encoding(self):
            return self.getToken(PhpParser.Encoding, 0)

        def StrictTypes(self):
            return self.getToken(PhpParser.StrictTypes, 0)

        def Get(self):
            return self.getToken(PhpParser.Get, 0)

        def Set(self):
            return self.getToken(PhpParser.Set, 0)

        def Call(self):
            return self.getToken(PhpParser.Call, 0)

        def CallStatic(self):
            return self.getToken(PhpParser.CallStatic, 0)

        def Constructor(self):
            return self.getToken(PhpParser.Constructor, 0)

        def Destruct(self):
            return self.getToken(PhpParser.Destruct, 0)

        def Wakeup(self):
            return self.getToken(PhpParser.Wakeup, 0)

        def Sleep(self):
            return self.getToken(PhpParser.Sleep, 0)

        def Autoload(self):
            return self.getToken(PhpParser.Autoload, 0)

        def IsSet__(self):
            return self.getToken(PhpParser.IsSet__, 0)

        def Unset__(self):
            return self.getToken(PhpParser.Unset__, 0)

        def ToString__(self):
            return self.getToken(PhpParser.ToString__, 0)

        def Invoke(self):
            return self.getToken(PhpParser.Invoke, 0)

        def SetState(self):
            return self.getToken(PhpParser.SetState, 0)

        def Clone__(self):
            return self.getToken(PhpParser.Clone__, 0)

        def DebugInfo(self):
            return self.getToken(PhpParser.DebugInfo, 0)

        def Namespace__(self):
            return self.getToken(PhpParser.Namespace__, 0)

        def Class__(self):
            return self.getToken(PhpParser.Class__, 0)

        def Traic__(self):
            return self.getToken(PhpParser.Traic__, 0)

        def Function__(self):
            return self.getToken(PhpParser.Function__, 0)

        def Method__(self):
            return self.getToken(PhpParser.Method__, 0)

        def Line__(self):
            return self.getToken(PhpParser.Line__, 0)

        def File__(self):
            return self.getToken(PhpParser.File__, 0)

        def Dir__(self):
            return self.getToken(PhpParser.Dir__, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = PhpParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1932
            _la = self._input.LA(1)
            if not(((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & -1) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 9007199254740991) != 0) or _la==225):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Public(self):
            return self.getToken(PhpParser.Public, 0)

        def Protected(self):
            return self.getToken(PhpParser.Protected, 0)

        def Private(self):
            return self.getToken(PhpParser.Private, 0)

        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def Abstract(self):
            return self.getToken(PhpParser.Abstract, 0)

        def Final(self):
            return self.getToken(PhpParser.Final, 0)

        def Readonly(self):
            return self.getToken(PhpParser.Readonly, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_memberModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifier" ):
                listener.enterMemberModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifier" ):
                listener.exitMemberModifier(self)




    def memberModifier(self):

        localctx = PhpParser.MemberModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_memberModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            _la = self._input.LA(1)
            if not(_la==44 or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 2327872274433) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MagicConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace__(self):
            return self.getToken(PhpParser.Namespace__, 0)

        def Class__(self):
            return self.getToken(PhpParser.Class__, 0)

        def Traic__(self):
            return self.getToken(PhpParser.Traic__, 0)

        def Function__(self):
            return self.getToken(PhpParser.Function__, 0)

        def Method__(self):
            return self.getToken(PhpParser.Method__, 0)

        def Line__(self):
            return self.getToken(PhpParser.Line__, 0)

        def File__(self):
            return self.getToken(PhpParser.File__, 0)

        def Dir__(self):
            return self.getToken(PhpParser.Dir__, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_magicConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMagicConstant" ):
                listener.enterMagicConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMagicConstant" ):
                listener.exitMagicConstant(self)




    def magicConstant(self):

        localctx = PhpParser.MagicConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_magicConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            _la = self._input.LA(1)
            if not(((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BoolType(self):
            return self.getToken(PhpParser.BoolType, 0)

        def IntType(self):
            return self.getToken(PhpParser.IntType, 0)

        def Int64Type(self):
            return self.getToken(PhpParser.Int64Type, 0)

        def DoubleType(self):
            return self.getToken(PhpParser.DoubleType, 0)

        def StringType(self):
            return self.getToken(PhpParser.StringType, 0)

        def Resource(self):
            return self.getToken(PhpParser.Resource, 0)

        def ObjectType(self):
            return self.getToken(PhpParser.ObjectType, 0)

        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = PhpParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4612002677776187392) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 37752835) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BoolType(self):
            return self.getToken(PhpParser.BoolType, 0)

        def Int8Cast(self):
            return self.getToken(PhpParser.Int8Cast, 0)

        def Int16Cast(self):
            return self.getToken(PhpParser.Int16Cast, 0)

        def IntType(self):
            return self.getToken(PhpParser.IntType, 0)

        def Int64Type(self):
            return self.getToken(PhpParser.Int64Type, 0)

        def UintCast(self):
            return self.getToken(PhpParser.UintCast, 0)

        def DoubleCast(self):
            return self.getToken(PhpParser.DoubleCast, 0)

        def DoubleType(self):
            return self.getToken(PhpParser.DoubleType, 0)

        def FloatCast(self):
            return self.getToken(PhpParser.FloatCast, 0)

        def StringType(self):
            return self.getToken(PhpParser.StringType, 0)

        def BinaryCast(self):
            return self.getToken(PhpParser.BinaryCast, 0)

        def UnicodeCast(self):
            return self.getToken(PhpParser.UnicodeCast, 0)

        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def ObjectType(self):
            return self.getToken(PhpParser.ObjectType, 0)

        def Resource(self):
            return self.getToken(PhpParser.Resource, 0)

        def Unset(self):
            return self.getToken(PhpParser.Unset, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_castOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOperation" ):
                listener.enterCastOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOperation" ):
                listener.exitCastOperation(self)




    def castOperation(self):

        localctx = PhpParser.CastOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_castOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1940
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6917986424478236672) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 493818294165505) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[59] = self.typeHint_sempred
        self._predicates[82] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeHint_sempred(self, localctx:TypeHintContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 23)
         




