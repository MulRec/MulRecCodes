# Generated from Corundum.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,60,825,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,153,8,1,1,1,1,1,1,1,1,1,5,1,159,
        8,1,10,1,12,1,162,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
        2,174,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,213,8,12,1,13,
        1,13,3,13,217,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,226,8,
        14,1,15,1,15,1,15,1,15,1,15,1,15,5,15,234,8,15,10,15,12,15,237,9,
        15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,3,18,256,8,18,1,19,1,19,1,20,1,20,1,20,1,
        20,1,20,1,20,5,20,266,8,20,10,20,12,20,269,9,20,1,21,1,21,3,21,273,
        8,21,1,22,1,22,1,22,1,22,3,22,279,8,22,1,23,1,23,1,23,1,23,1,23,
        1,23,3,23,287,8,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,296,8,
        25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,319,8,27,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,343,8,28,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,367,8,29,1,30,1,30,1,30,1,
        30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,397,
        8,31,1,32,1,32,1,33,1,33,1,33,1,33,3,33,405,8,33,1,34,1,34,1,34,
        1,34,1,34,1,34,5,34,413,8,34,10,34,12,34,416,9,34,1,35,1,35,1,36,
        1,36,1,37,1,37,1,37,1,37,1,37,1,37,5,37,428,8,37,10,37,12,37,431,
        9,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,
        444,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        5,39,457,8,39,10,39,12,39,460,9,39,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,3,40,470,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        3,41,480,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,490,8,
        42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,500,8,43,1,44,1,
        44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,510,8,44,1,45,1,45,1,45,1,
        45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,3,
        48,528,8,48,1,48,1,48,1,48,1,48,3,48,534,8,48,5,48,536,8,48,10,48,
        12,48,539,9,48,1,49,1,49,1,49,1,49,3,49,545,8,49,1,49,1,49,1,49,
        1,49,1,49,1,49,3,49,553,8,49,1,49,1,49,3,49,557,8,49,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,585,8,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,608,8,50,10,50,12,
        50,611,9,50,1,51,1,51,1,51,3,51,616,8,51,1,52,1,52,1,52,1,52,1,52,
        1,52,3,52,624,8,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,632,8,52,10,
        52,12,52,635,9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,3,53,651,8,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,5,53,665,8,53,10,53,12,53,668,9,
        53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,676,8,54,1,54,1,54,1,54,1,
        54,1,54,1,54,5,54,684,8,54,10,54,12,54,687,9,54,1,55,1,55,1,55,1,
        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,1,55,1,55,3,55,710,8,55,1,56,1,56,1,56,1,56,1,56,1,
        56,1,56,1,56,3,56,720,8,56,1,57,1,57,1,57,3,57,725,8,57,1,58,1,58,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        3,59,755,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,5,59,784,8,59,10,59,12,59,787,9,59,1,60,1,60,
        1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,
        1,67,1,68,1,68,1,69,1,69,1,69,3,69,810,8,69,1,69,1,69,1,69,1,69,
        5,69,816,8,69,10,69,12,69,819,9,69,1,70,1,70,1,71,1,71,1,71,0,13,
        2,30,40,68,74,78,96,100,104,106,108,118,138,72,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,0,10,1,0,33,38,1,0,22,24,1,0,20,21,1,0,28,31,
        1,0,26,27,2,0,42,42,47,47,1,0,43,44,1,0,40,41,1,0,45,46,1,0,18,19,
        878,0,144,1,0,0,0,2,152,1,0,0,0,4,173,1,0,0,0,6,175,1,0,0,0,8,179,
        1,0,0,0,10,183,1,0,0,0,12,185,1,0,0,0,14,187,1,0,0,0,16,190,1,0,
        0,0,18,195,1,0,0,0,20,197,1,0,0,0,22,201,1,0,0,0,24,212,1,0,0,0,
        26,216,1,0,0,0,28,225,1,0,0,0,30,227,1,0,0,0,32,238,1,0,0,0,34,240,
        1,0,0,0,36,255,1,0,0,0,38,257,1,0,0,0,40,259,1,0,0,0,42,272,1,0,
        0,0,44,278,1,0,0,0,46,280,1,0,0,0,48,288,1,0,0,0,50,295,1,0,0,0,
        52,297,1,0,0,0,54,318,1,0,0,0,56,342,1,0,0,0,58,366,1,0,0,0,60,368,
        1,0,0,0,62,396,1,0,0,0,64,398,1,0,0,0,66,404,1,0,0,0,68,406,1,0,
        0,0,70,417,1,0,0,0,72,419,1,0,0,0,74,421,1,0,0,0,76,432,1,0,0,0,
        78,443,1,0,0,0,80,469,1,0,0,0,82,479,1,0,0,0,84,489,1,0,0,0,86,499,
        1,0,0,0,88,509,1,0,0,0,90,511,1,0,0,0,92,516,1,0,0,0,94,520,1,0,
        0,0,96,524,1,0,0,0,98,556,1,0,0,0,100,584,1,0,0,0,102,615,1,0,0,
        0,104,623,1,0,0,0,106,650,1,0,0,0,108,675,1,0,0,0,110,709,1,0,0,
        0,112,719,1,0,0,0,114,724,1,0,0,0,116,726,1,0,0,0,118,754,1,0,0,
        0,120,788,1,0,0,0,122,790,1,0,0,0,124,792,1,0,0,0,126,794,1,0,0,
        0,128,796,1,0,0,0,130,798,1,0,0,0,132,800,1,0,0,0,134,802,1,0,0,
        0,136,804,1,0,0,0,138,809,1,0,0,0,140,820,1,0,0,0,142,822,1,0,0,
        0,144,145,3,2,1,0,145,146,5,0,0,1,146,1,1,0,0,0,147,148,6,1,-1,0,
        148,149,3,4,2,0,149,150,3,138,69,0,150,153,1,0,0,0,151,153,3,138,
        69,0,152,147,1,0,0,0,152,151,1,0,0,0,153,160,1,0,0,0,154,155,10,
        2,0,0,155,156,3,4,2,0,156,157,3,138,69,0,157,159,1,0,0,0,158,154,
        1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,3,1,
        0,0,0,162,160,1,0,0,0,163,174,3,20,10,0,164,174,3,12,6,0,165,174,
        3,14,7,0,166,174,3,56,28,0,167,174,3,58,29,0,168,174,3,118,59,0,
        169,174,3,34,17,0,170,174,3,60,30,0,171,174,3,62,31,0,172,174,3,
        16,8,0,173,163,1,0,0,0,173,164,1,0,0,0,173,165,1,0,0,0,173,166,1,
        0,0,0,173,167,1,0,0,0,173,168,1,0,0,0,173,169,1,0,0,0,173,170,1,
        0,0,0,173,171,1,0,0,0,173,172,1,0,0,0,174,5,1,0,0,0,175,176,3,116,
        58,0,176,177,5,32,0,0,177,178,3,134,67,0,178,7,1,0,0,0,179,180,3,
        134,67,0,180,181,5,32,0,0,181,182,3,50,25,0,182,9,1,0,0,0,183,184,
        3,134,67,0,184,11,1,0,0,0,185,186,3,36,18,0,186,13,1,0,0,0,187,188,
        5,5,0,0,188,189,3,122,61,0,189,15,1,0,0,0,190,191,5,9,0,0,191,192,
        3,142,71,0,192,193,3,18,9,0,193,194,5,6,0,0,194,17,1,0,0,0,195,196,
        3,2,1,0,196,19,1,0,0,0,197,198,3,24,12,0,198,199,3,22,11,0,199,200,
        5,6,0,0,200,21,1,0,0,0,201,202,3,2,1,0,202,23,1,0,0,0,203,204,5,
        7,0,0,204,205,3,26,13,0,205,206,3,142,71,0,206,213,1,0,0,0,207,208,
        5,7,0,0,208,209,3,26,13,0,209,210,3,28,14,0,210,211,3,142,71,0,211,
        213,1,0,0,0,212,203,1,0,0,0,212,207,1,0,0,0,213,25,1,0,0,0,214,217,
        3,136,68,0,215,217,3,132,66,0,216,214,1,0,0,0,216,215,1,0,0,0,217,
        27,1,0,0,0,218,219,5,48,0,0,219,226,5,49,0,0,220,221,5,48,0,0,221,
        222,3,30,15,0,222,223,5,49,0,0,223,226,1,0,0,0,224,226,3,30,15,0,
        225,218,1,0,0,0,225,220,1,0,0,0,225,224,1,0,0,0,226,29,1,0,0,0,227,
        228,6,15,-1,0,228,229,3,32,16,0,229,235,1,0,0,0,230,231,10,1,0,0,
        231,232,5,2,0,0,232,234,3,32,16,0,233,230,1,0,0,0,234,237,1,0,0,
        0,235,233,1,0,0,0,235,236,1,0,0,0,236,31,1,0,0,0,237,235,1,0,0,0,
        238,239,3,132,66,0,239,33,1,0,0,0,240,241,5,8,0,0,241,242,3,50,25,
        0,242,35,1,0,0,0,243,244,3,26,13,0,244,245,5,48,0,0,245,246,3,38,
        19,0,246,247,5,49,0,0,247,256,1,0,0,0,248,249,3,26,13,0,249,250,
        3,38,19,0,250,256,1,0,0,0,251,252,3,26,13,0,252,253,5,48,0,0,253,
        254,5,49,0,0,254,256,1,0,0,0,255,243,1,0,0,0,255,248,1,0,0,0,255,
        251,1,0,0,0,256,37,1,0,0,0,257,258,3,40,20,0,258,39,1,0,0,0,259,
        260,6,20,-1,0,260,261,3,42,21,0,261,267,1,0,0,0,262,263,10,1,0,0,
        263,264,5,2,0,0,264,266,3,42,21,0,265,262,1,0,0,0,266,269,1,0,0,
        0,267,265,1,0,0,0,267,268,1,0,0,0,268,41,1,0,0,0,269,267,1,0,0,0,
        270,273,3,44,22,0,271,273,3,46,23,0,272,270,1,0,0,0,272,271,1,0,
        0,0,273,43,1,0,0,0,274,279,3,104,52,0,275,279,3,106,53,0,276,279,
        3,108,54,0,277,279,3,100,50,0,278,274,1,0,0,0,278,275,1,0,0,0,278,
        276,1,0,0,0,278,277,1,0,0,0,279,45,1,0,0,0,280,281,3,132,66,0,281,
        286,5,32,0,0,282,287,3,104,52,0,283,287,3,106,53,0,284,287,3,108,
        54,0,285,287,3,100,50,0,286,282,1,0,0,0,286,283,1,0,0,0,286,284,
        1,0,0,0,286,285,1,0,0,0,287,47,1,0,0,0,288,289,3,36,18,0,289,49,
        1,0,0,0,290,296,3,104,52,0,291,296,3,106,53,0,292,296,3,108,54,0,
        293,296,3,100,50,0,294,296,3,10,5,0,295,290,1,0,0,0,295,291,1,0,
        0,0,295,292,1,0,0,0,295,293,1,0,0,0,295,294,1,0,0,0,296,51,1,0,0,
        0,297,298,3,54,27,0,298,53,1,0,0,0,299,300,5,12,0,0,300,301,3,70,
        35,0,301,302,3,142,71,0,302,303,3,76,38,0,303,319,1,0,0,0,304,305,
        5,12,0,0,305,306,3,70,35,0,306,307,3,142,71,0,307,308,3,76,38,0,
        308,309,3,140,70,0,309,310,3,142,71,0,310,311,3,76,38,0,311,319,
        1,0,0,0,312,313,5,12,0,0,313,314,3,70,35,0,314,315,3,142,71,0,315,
        316,3,76,38,0,316,317,3,54,27,0,317,319,1,0,0,0,318,299,1,0,0,0,
        318,304,1,0,0,0,318,312,1,0,0,0,319,55,1,0,0,0,320,321,5,10,0,0,
        321,322,3,70,35,0,322,323,3,142,71,0,323,324,3,76,38,0,324,325,5,
        6,0,0,325,343,1,0,0,0,326,327,5,10,0,0,327,328,3,70,35,0,328,329,
        3,142,71,0,329,330,3,76,38,0,330,331,3,140,70,0,331,332,3,142,71,
        0,332,333,3,76,38,0,333,334,5,6,0,0,334,343,1,0,0,0,335,336,5,10,
        0,0,336,337,3,70,35,0,337,338,3,142,71,0,338,339,3,76,38,0,339,340,
        3,52,26,0,340,341,5,6,0,0,341,343,1,0,0,0,342,320,1,0,0,0,342,326,
        1,0,0,0,342,335,1,0,0,0,343,57,1,0,0,0,344,345,5,13,0,0,345,346,
        3,70,35,0,346,347,3,142,71,0,347,348,3,76,38,0,348,349,5,6,0,0,349,
        367,1,0,0,0,350,351,5,13,0,0,351,352,3,70,35,0,352,353,3,142,71,
        0,353,354,3,76,38,0,354,355,3,140,70,0,355,356,3,142,71,0,356,357,
        3,76,38,0,357,358,5,6,0,0,358,367,1,0,0,0,359,360,5,13,0,0,360,361,
        3,70,35,0,361,362,3,142,71,0,362,363,3,76,38,0,363,364,3,52,26,0,
        364,365,5,6,0,0,365,367,1,0,0,0,366,344,1,0,0,0,366,350,1,0,0,0,
        366,359,1,0,0,0,367,59,1,0,0,0,368,369,5,14,0,0,369,370,3,70,35,
        0,370,371,3,142,71,0,371,372,3,76,38,0,372,373,5,6,0,0,373,61,1,
        0,0,0,374,375,5,17,0,0,375,376,5,48,0,0,376,377,3,64,32,0,377,378,
        5,3,0,0,378,379,3,70,35,0,379,380,5,3,0,0,380,381,3,72,36,0,381,
        382,5,49,0,0,382,383,3,142,71,0,383,384,3,76,38,0,384,385,5,6,0,
        0,385,397,1,0,0,0,386,387,5,17,0,0,387,388,3,64,32,0,388,389,5,3,
        0,0,389,390,3,70,35,0,390,391,5,3,0,0,391,392,3,72,36,0,392,393,
        3,142,71,0,393,394,3,76,38,0,394,395,5,6,0,0,395,397,1,0,0,0,396,
        374,1,0,0,0,396,386,1,0,0,0,397,63,1,0,0,0,398,399,3,68,34,0,399,
        65,1,0,0,0,400,405,3,84,42,0,401,405,3,86,43,0,402,405,3,88,44,0,
        403,405,3,82,41,0,404,400,1,0,0,0,404,401,1,0,0,0,404,402,1,0,0,
        0,404,403,1,0,0,0,405,67,1,0,0,0,406,407,6,34,-1,0,407,408,3,66,
        33,0,408,414,1,0,0,0,409,410,10,2,0,0,410,411,5,2,0,0,411,413,3,
        66,33,0,412,409,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,414,415,
        1,0,0,0,415,69,1,0,0,0,416,414,1,0,0,0,417,418,3,110,55,0,418,71,
        1,0,0,0,419,420,3,74,37,0,420,73,1,0,0,0,421,422,6,37,-1,0,422,423,
        3,66,33,0,423,429,1,0,0,0,424,425,10,2,0,0,425,426,5,2,0,0,426,428,
        3,66,33,0,427,424,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,
        1,0,0,0,430,75,1,0,0,0,431,429,1,0,0,0,432,433,3,78,39,0,433,77,
        1,0,0,0,434,435,6,39,-1,0,435,436,3,4,2,0,436,437,3,138,69,0,437,
        444,1,0,0,0,438,439,5,15,0,0,439,444,3,138,69,0,440,441,3,120,60,
        0,441,442,3,138,69,0,442,444,1,0,0,0,443,434,1,0,0,0,443,438,1,0,
        0,0,443,440,1,0,0,0,444,458,1,0,0,0,445,446,10,3,0,0,446,447,3,4,
        2,0,447,448,3,138,69,0,448,457,1,0,0,0,449,450,10,2,0,0,450,451,
        5,15,0,0,451,457,3,138,69,0,452,453,10,1,0,0,453,454,3,120,60,0,
        454,455,3,138,69,0,455,457,1,0,0,0,456,445,1,0,0,0,456,449,1,0,0,
        0,456,452,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,
        0,459,79,1,0,0,0,460,458,1,0,0,0,461,462,3,116,58,0,462,463,5,32,
        0,0,463,464,3,118,59,0,464,470,1,0,0,0,465,466,3,116,58,0,466,467,
        7,0,0,0,467,468,3,118,59,0,468,470,1,0,0,0,469,461,1,0,0,0,469,465,
        1,0,0,0,470,81,1,0,0,0,471,472,3,116,58,0,472,473,5,32,0,0,473,474,
        3,100,50,0,474,480,1,0,0,0,475,476,3,116,58,0,476,477,7,0,0,0,477,
        478,3,100,50,0,478,480,1,0,0,0,479,471,1,0,0,0,479,475,1,0,0,0,480,
        83,1,0,0,0,481,482,3,116,58,0,482,483,5,32,0,0,483,484,3,104,52,
        0,484,490,1,0,0,0,485,486,3,116,58,0,486,487,7,0,0,0,487,488,3,104,
        52,0,488,490,1,0,0,0,489,481,1,0,0,0,489,485,1,0,0,0,490,85,1,0,
        0,0,491,492,3,116,58,0,492,493,5,32,0,0,493,494,3,106,53,0,494,500,
        1,0,0,0,495,496,3,116,58,0,496,497,7,0,0,0,497,498,3,106,53,0,498,
        500,1,0,0,0,499,491,1,0,0,0,499,495,1,0,0,0,500,87,1,0,0,0,501,502,
        3,116,58,0,502,503,5,32,0,0,503,504,3,108,54,0,504,510,1,0,0,0,505,
        506,3,116,58,0,506,507,5,33,0,0,507,508,3,108,54,0,508,510,1,0,0,
        0,509,501,1,0,0,0,509,505,1,0,0,0,510,89,1,0,0,0,511,512,3,116,58,
        0,512,513,5,32,0,0,513,514,5,50,0,0,514,515,5,51,0,0,515,91,1,0,
        0,0,516,517,3,98,49,0,517,518,5,32,0,0,518,519,3,50,25,0,519,93,
        1,0,0,0,520,521,5,50,0,0,521,522,3,96,48,0,522,523,5,51,0,0,523,
        95,1,0,0,0,524,527,6,48,-1,0,525,528,3,104,52,0,526,528,3,100,50,
        0,527,525,1,0,0,0,527,526,1,0,0,0,528,537,1,0,0,0,529,530,10,1,0,
        0,530,533,5,2,0,0,531,534,3,104,52,0,532,534,3,100,50,0,533,531,
        1,0,0,0,533,532,1,0,0,0,534,536,1,0,0,0,535,529,1,0,0,0,536,539,
        1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,97,1,0,0,0,539,537,1,
        0,0,0,540,541,3,132,66,0,541,544,5,50,0,0,542,545,3,104,52,0,543,
        545,3,100,50,0,544,542,1,0,0,0,544,543,1,0,0,0,545,546,1,0,0,0,546,
        547,5,51,0,0,547,557,1,0,0,0,548,549,3,134,67,0,549,552,5,50,0,0,
        550,553,3,104,52,0,551,553,3,100,50,0,552,550,1,0,0,0,552,551,1,
        0,0,0,553,554,1,0,0,0,554,555,5,51,0,0,555,557,1,0,0,0,556,540,1,
        0,0,0,556,548,1,0,0,0,557,99,1,0,0,0,558,559,6,50,-1,0,559,560,3,
        104,52,0,560,561,7,1,0,0,561,562,3,100,50,13,562,585,1,0,0,0,563,
        564,3,106,53,0,564,565,7,1,0,0,565,566,3,100,50,11,566,585,1,0,0,
        0,567,568,3,108,54,0,568,569,5,22,0,0,569,570,3,100,50,8,570,585,
        1,0,0,0,571,572,3,104,52,0,572,573,7,2,0,0,573,574,3,100,50,6,574,
        585,1,0,0,0,575,576,3,106,53,0,576,577,7,2,0,0,577,578,3,100,50,
        4,578,585,1,0,0,0,579,580,5,48,0,0,580,581,3,100,50,0,581,582,5,
        49,0,0,582,585,1,0,0,0,583,585,3,102,51,0,584,558,1,0,0,0,584,563,
        1,0,0,0,584,567,1,0,0,0,584,571,1,0,0,0,584,575,1,0,0,0,584,579,
        1,0,0,0,584,583,1,0,0,0,585,609,1,0,0,0,586,587,10,10,0,0,587,588,
        7,1,0,0,588,608,3,100,50,11,589,590,10,3,0,0,590,591,7,2,0,0,591,
        608,3,100,50,4,592,593,10,14,0,0,593,594,7,1,0,0,594,608,3,104,52,
        0,595,596,10,12,0,0,596,597,7,1,0,0,597,608,3,106,53,0,598,599,10,
        9,0,0,599,600,5,22,0,0,600,608,3,108,54,0,601,602,10,7,0,0,602,603,
        7,2,0,0,603,608,3,104,52,0,604,605,10,5,0,0,605,606,7,2,0,0,606,
        608,3,106,53,0,607,586,1,0,0,0,607,589,1,0,0,0,607,592,1,0,0,0,607,
        595,1,0,0,0,607,598,1,0,0,0,607,601,1,0,0,0,607,604,1,0,0,0,608,
        611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,101,1,0,0,0,611,
        609,1,0,0,0,612,616,3,132,66,0,613,616,3,48,24,0,614,616,3,98,49,
        0,615,612,1,0,0,0,615,613,1,0,0,0,615,614,1,0,0,0,616,103,1,0,0,
        0,617,618,6,52,-1,0,618,619,5,48,0,0,619,620,3,104,52,0,620,621,
        5,49,0,0,621,624,1,0,0,0,622,624,3,126,63,0,623,617,1,0,0,0,623,
        622,1,0,0,0,624,633,1,0,0,0,625,626,10,4,0,0,626,627,7,1,0,0,627,
        632,3,104,52,5,628,629,10,3,0,0,629,630,7,2,0,0,630,632,3,104,52,
        4,631,625,1,0,0,0,631,628,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,
        0,633,634,1,0,0,0,634,105,1,0,0,0,635,633,1,0,0,0,636,637,6,53,-1,
        0,637,638,3,104,52,0,638,639,7,1,0,0,639,640,3,106,53,7,640,651,
        1,0,0,0,641,642,3,104,52,0,642,643,7,2,0,0,643,644,3,106,53,4,644,
        651,1,0,0,0,645,646,5,48,0,0,646,647,3,106,53,0,647,648,5,49,0,0,
        648,651,1,0,0,0,649,651,3,124,62,0,650,636,1,0,0,0,650,641,1,0,0,
        0,650,645,1,0,0,0,650,649,1,0,0,0,651,666,1,0,0,0,652,653,10,8,0,
        0,653,654,7,1,0,0,654,665,3,106,53,9,655,656,10,5,0,0,656,657,7,
        2,0,0,657,665,3,106,53,6,658,659,10,6,0,0,659,660,7,1,0,0,660,665,
        3,104,52,0,661,662,10,3,0,0,662,663,7,2,0,0,663,665,3,104,52,0,664,
        652,1,0,0,0,664,655,1,0,0,0,664,658,1,0,0,0,664,661,1,0,0,0,665,
        668,1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,107,1,0,0,0,668,
        666,1,0,0,0,669,670,6,54,-1,0,670,671,3,104,52,0,671,672,5,22,0,
        0,672,673,3,108,54,3,673,676,1,0,0,0,674,676,3,122,61,0,675,669,
        1,0,0,0,675,674,1,0,0,0,676,685,1,0,0,0,677,678,10,2,0,0,678,679,
        5,20,0,0,679,684,3,108,54,3,680,681,10,4,0,0,681,682,5,22,0,0,682,
        684,3,104,52,0,683,677,1,0,0,0,683,680,1,0,0,0,684,687,1,0,0,0,685,
        683,1,0,0,0,685,686,1,0,0,0,686,109,1,0,0,0,687,685,1,0,0,0,688,
        689,3,112,56,0,689,690,5,39,0,0,690,691,3,110,55,0,691,710,1,0,0,
        0,692,693,3,112,56,0,693,694,5,45,0,0,694,695,3,110,55,0,695,710,
        1,0,0,0,696,697,3,112,56,0,697,698,5,40,0,0,698,699,3,110,55,0,699,
        710,1,0,0,0,700,701,3,112,56,0,701,702,5,46,0,0,702,703,3,110,55,
        0,703,710,1,0,0,0,704,705,5,48,0,0,705,706,3,110,55,0,706,707,5,
        49,0,0,707,710,1,0,0,0,708,710,3,112,56,0,709,688,1,0,0,0,709,692,
        1,0,0,0,709,696,1,0,0,0,709,700,1,0,0,0,709,704,1,0,0,0,709,708,
        1,0,0,0,710,111,1,0,0,0,711,712,3,114,57,0,712,713,7,3,0,0,713,714,
        3,114,57,0,714,720,1,0,0,0,715,716,3,114,57,0,716,717,7,4,0,0,717,
        718,3,114,57,0,718,720,1,0,0,0,719,711,1,0,0,0,719,715,1,0,0,0,720,
        113,1,0,0,0,721,725,3,50,25,0,722,725,3,98,49,0,723,725,3,132,66,
        0,724,721,1,0,0,0,724,722,1,0,0,0,724,723,1,0,0,0,725,115,1,0,0,
        0,726,727,3,132,66,0,727,117,1,0,0,0,728,729,6,59,-1,0,729,755,3,
        116,58,0,730,755,3,90,45,0,731,755,3,92,46,0,732,755,3,104,52,0,
        733,755,3,106,53,0,734,755,3,108,54,0,735,755,3,8,4,0,736,755,3,
        6,3,0,737,755,3,82,41,0,738,755,3,88,44,0,739,755,3,86,43,0,740,
        755,3,84,42,0,741,755,3,80,40,0,742,755,3,36,18,0,743,755,3,122,
        61,0,744,755,3,128,64,0,745,755,3,124,62,0,746,755,3,126,63,0,747,
        755,3,130,65,0,748,749,7,5,0,0,749,755,3,118,59,10,750,751,5,48,
        0,0,751,752,3,118,59,0,752,753,5,49,0,0,753,755,1,0,0,0,754,728,
        1,0,0,0,754,730,1,0,0,0,754,731,1,0,0,0,754,732,1,0,0,0,754,733,
        1,0,0,0,754,734,1,0,0,0,754,735,1,0,0,0,754,736,1,0,0,0,754,737,
        1,0,0,0,754,738,1,0,0,0,754,739,1,0,0,0,754,740,1,0,0,0,754,741,
        1,0,0,0,754,742,1,0,0,0,754,743,1,0,0,0,754,744,1,0,0,0,754,745,
        1,0,0,0,754,746,1,0,0,0,754,747,1,0,0,0,754,748,1,0,0,0,754,750,
        1,0,0,0,755,785,1,0,0,0,756,757,10,11,0,0,757,758,5,25,0,0,758,784,
        3,118,59,12,759,760,10,9,0,0,760,761,7,1,0,0,761,784,3,118,59,10,
        762,763,10,8,0,0,763,764,7,2,0,0,764,784,3,118,59,9,765,766,10,7,
        0,0,766,767,7,6,0,0,767,784,3,118,59,8,768,769,10,6,0,0,769,770,
        5,39,0,0,770,784,3,118,59,7,771,772,10,5,0,0,772,773,7,7,0,0,773,
        784,3,118,59,6,774,775,10,4,0,0,775,776,7,3,0,0,776,784,3,118,59,
        5,777,778,10,3,0,0,778,779,7,4,0,0,779,784,3,118,59,4,780,781,10,
        2,0,0,781,782,7,8,0,0,782,784,3,118,59,3,783,756,1,0,0,0,783,759,
        1,0,0,0,783,762,1,0,0,0,783,765,1,0,0,0,783,768,1,0,0,0,783,771,
        1,0,0,0,783,774,1,0,0,0,783,777,1,0,0,0,783,780,1,0,0,0,784,787,
        1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,119,1,0,0,0,787,785,
        1,0,0,0,788,789,5,16,0,0,789,121,1,0,0,0,790,791,5,1,0,0,791,123,
        1,0,0,0,792,793,5,57,0,0,793,125,1,0,0,0,794,795,5,56,0,0,795,127,
        1,0,0,0,796,797,7,9,0,0,797,129,1,0,0,0,798,799,5,52,0,0,799,131,
        1,0,0,0,800,801,5,58,0,0,801,133,1,0,0,0,802,803,5,59,0,0,803,135,
        1,0,0,0,804,805,5,60,0,0,805,137,1,0,0,0,806,807,6,69,-1,0,807,810,
        5,3,0,0,808,810,3,142,71,0,809,806,1,0,0,0,809,808,1,0,0,0,810,817,
        1,0,0,0,811,812,10,4,0,0,812,816,5,3,0,0,813,814,10,3,0,0,814,816,
        3,142,71,0,815,811,1,0,0,0,815,813,1,0,0,0,816,819,1,0,0,0,817,815,
        1,0,0,0,817,818,1,0,0,0,818,139,1,0,0,0,819,817,1,0,0,0,820,821,
        5,11,0,0,821,141,1,0,0,0,822,823,5,4,0,0,823,143,1,0,0,0,56,152,
        160,173,212,216,225,235,255,267,272,278,286,295,318,342,366,396,
        404,414,429,443,456,458,469,479,489,499,509,527,533,537,544,552,
        556,584,607,609,615,623,631,633,650,664,666,675,683,685,709,719,
        724,754,783,785,809,815,817
    ]

class CorundumParser ( Parser ):

    grammarFileName = "Corundum.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "','", "';'", "<INVALID>", 
                     "'require'", "'end'", "'def'", "'return'", "'pir'", 
                     "'if'", "'else'", "'elsif'", "'unless'", "'while'", 
                     "'retry'", "'break'", "'for'", "'true'", "'false'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'**'", "'=='", 
                     "'!='", "'>'", "'<'", "'<='", "'>='", "'='", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'**='", "'&'", "'|'", 
                     "'^'", "'~'", "'<<'", "'>>'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "')'", "'['", "']'", "'nil'" ]

    symbolicNames = [ "<INVALID>", "LITERAL", "COMMA", "SEMICOLON", "CRLF", 
                      "REQUIRE", "END", "DEF", "RETURN", "PIR", "IF", "ELSE", 
                      "ELSIF", "UNLESS", "WHILE", "RETRY", "BREAK", "FOR", 
                      "TRUE", "FALSE", "PLUS", "MINUS", "MUL", "DIV", "MOD", 
                      "EXP", "EQUAL", "NOT_EQUAL", "GREATER", "LESS", "LESS_EQUAL", 
                      "GREATER_EQUAL", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "EXP_ASSIGN", 
                      "BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", "BIT_SHL", 
                      "BIT_SHR", "AND", "OR", "NOT", "LEFT_RBRACKET", "RIGHT_RBRACKET", 
                      "LEFT_SBRACKET", "RIGHT_SBRACKET", "NIL", "SL_COMMENT", 
                      "ML_COMMENT", "WS", "INT", "FLOAT", "ID", "ID_GLOBAL", 
                      "ID_FUNCTION" ]

    RULE_prog = 0
    RULE_expression_list = 1
    RULE_expression = 2
    RULE_global_get = 3
    RULE_global_set = 4
    RULE_global_result = 5
    RULE_function_inline_call = 6
    RULE_require_block = 7
    RULE_pir_inline = 8
    RULE_pir_expression_list = 9
    RULE_function_definition = 10
    RULE_function_definition_body = 11
    RULE_function_definition_header = 12
    RULE_function_name = 13
    RULE_function_definition_params = 14
    RULE_function_definition_params_list = 15
    RULE_function_definition_param_id = 16
    RULE_return_statement = 17
    RULE_function_call = 18
    RULE_function_call_param_list = 19
    RULE_function_call_params = 20
    RULE_function_param = 21
    RULE_function_unnamed_param = 22
    RULE_function_named_param = 23
    RULE_function_call_assignment = 24
    RULE_all_result = 25
    RULE_elsif_statement = 26
    RULE_if_elsif_statement = 27
    RULE_if_statement = 28
    RULE_unless_statement = 29
    RULE_while_statement = 30
    RULE_for_statement = 31
    RULE_init_expression = 32
    RULE_all_assignment = 33
    RULE_for_init_list = 34
    RULE_cond_expression = 35
    RULE_loop_expression = 36
    RULE_for_loop_list = 37
    RULE_statement_body = 38
    RULE_statement_expression_list = 39
    RULE_assignment = 40
    RULE_dynamic_assignment = 41
    RULE_int_assignment = 42
    RULE_float_assignment = 43
    RULE_string_assignment = 44
    RULE_initial_array_assignment = 45
    RULE_array_assignment = 46
    RULE_array_definition = 47
    RULE_array_definition_elements = 48
    RULE_array_selector = 49
    RULE_dynamic_result = 50
    RULE_dynamic_ = 51
    RULE_int_result = 52
    RULE_float_result = 53
    RULE_string_result = 54
    RULE_comparison_list = 55
    RULE_comparison = 56
    RULE_comp_var = 57
    RULE_lvalue = 58
    RULE_rvalue = 59
    RULE_break_expression = 60
    RULE_literal_t = 61
    RULE_float_t = 62
    RULE_int_t = 63
    RULE_bool_t = 64
    RULE_nil_t = 65
    RULE_id_ = 66
    RULE_id_global = 67
    RULE_id_function = 68
    RULE_terminator = 69
    RULE_else_token = 70
    RULE_crlf = 71

    ruleNames =  [ "prog", "expression_list", "expression", "global_get", 
                   "global_set", "global_result", "function_inline_call", 
                   "require_block", "pir_inline", "pir_expression_list", 
                   "function_definition", "function_definition_body", "function_definition_header", 
                   "function_name", "function_definition_params", "function_definition_params_list", 
                   "function_definition_param_id", "return_statement", "function_call", 
                   "function_call_param_list", "function_call_params", "function_param", 
                   "function_unnamed_param", "function_named_param", "function_call_assignment", 
                   "all_result", "elsif_statement", "if_elsif_statement", 
                   "if_statement", "unless_statement", "while_statement", 
                   "for_statement", "init_expression", "all_assignment", 
                   "for_init_list", "cond_expression", "loop_expression", 
                   "for_loop_list", "statement_body", "statement_expression_list", 
                   "assignment", "dynamic_assignment", "int_assignment", 
                   "float_assignment", "string_assignment", "initial_array_assignment", 
                   "array_assignment", "array_definition", "array_definition_elements", 
                   "array_selector", "dynamic_result", "dynamic_", "int_result", 
                   "float_result", "string_result", "comparison_list", "comparison", 
                   "comp_var", "lvalue", "rvalue", "break_expression", "literal_t", 
                   "float_t", "int_t", "bool_t", "nil_t", "id_", "id_global", 
                   "id_function", "terminator", "else_token", "crlf" ]

    EOF = Token.EOF
    LITERAL=1
    COMMA=2
    SEMICOLON=3
    CRLF=4
    REQUIRE=5
    END=6
    DEF=7
    RETURN=8
    PIR=9
    IF=10
    ELSE=11
    ELSIF=12
    UNLESS=13
    WHILE=14
    RETRY=15
    BREAK=16
    FOR=17
    TRUE=18
    FALSE=19
    PLUS=20
    MINUS=21
    MUL=22
    DIV=23
    MOD=24
    EXP=25
    EQUAL=26
    NOT_EQUAL=27
    GREATER=28
    LESS=29
    LESS_EQUAL=30
    GREATER_EQUAL=31
    ASSIGN=32
    PLUS_ASSIGN=33
    MINUS_ASSIGN=34
    MUL_ASSIGN=35
    DIV_ASSIGN=36
    MOD_ASSIGN=37
    EXP_ASSIGN=38
    BIT_AND=39
    BIT_OR=40
    BIT_XOR=41
    BIT_NOT=42
    BIT_SHL=43
    BIT_SHR=44
    AND=45
    OR=46
    NOT=47
    LEFT_RBRACKET=48
    RIGHT_RBRACKET=49
    LEFT_SBRACKET=50
    RIGHT_SBRACKET=51
    NIL=52
    SL_COMMENT=53
    ML_COMMENT=54
    WS=55
    INT=56
    FLOAT=57
    ID=58
    ID_GLOBAL=59
    ID_FUNCTION=60

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(CorundumParser.Expression_listContext,0)


        def EOF(self):
            return self.getToken(CorundumParser.EOF, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_prog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProg" ):
                listener.enterProg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProg" ):
                listener.exitProg(self)




    def prog(self):

        localctx = CorundumParser.ProgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_prog)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 144
            self.expression_list(0)
            self.state = 145
            self.match(CorundumParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CorundumParser.ExpressionContext,0)


        def terminator(self):
            return self.getTypedRuleContext(CorundumParser.TerminatorContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(CorundumParser.Expression_listContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)



    def expression_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.Expression_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 2
        self.enterRecursionRule(localctx, 2, self.RULE_expression_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 5, 7, 8, 9, 10, 13, 14, 17, 18, 19, 42, 47, 48, 52, 56, 57, 58, 59, 60]:
                self.state = 148
                self.expression()
                self.state = 149
                self.terminator(0)
                pass
            elif token in [3, 4]:
                self.state = 151
                self.terminator(0)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CorundumParser.Expression_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression_list)
                    self.state = 154
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 155
                    self.expression()
                    self.state = 156
                    self.terminator(0) 
                self.state = 162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_definition(self):
            return self.getTypedRuleContext(CorundumParser.Function_definitionContext,0)


        def function_inline_call(self):
            return self.getTypedRuleContext(CorundumParser.Function_inline_callContext,0)


        def require_block(self):
            return self.getTypedRuleContext(CorundumParser.Require_blockContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(CorundumParser.If_statementContext,0)


        def unless_statement(self):
            return self.getTypedRuleContext(CorundumParser.Unless_statementContext,0)


        def rvalue(self):
            return self.getTypedRuleContext(CorundumParser.RvalueContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(CorundumParser.Return_statementContext,0)


        def while_statement(self):
            return self.getTypedRuleContext(CorundumParser.While_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(CorundumParser.For_statementContext,0)


        def pir_inline(self):
            return self.getTypedRuleContext(CorundumParser.Pir_inlineContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CorundumParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expression)
        try:
            self.state = 173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 163
                self.function_definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 164
                self.function_inline_call()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 165
                self.require_block()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 166
                self.if_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 167
                self.unless_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 168
                self.rvalue(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 169
                self.return_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 170
                self.while_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 171
                self.for_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 172
                self.pir_inline()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_getContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.var_name = None # LvalueContext
            self.op = None # Token
            self.global_name = None # Id_globalContext

        def lvalue(self):
            return self.getTypedRuleContext(CorundumParser.LvalueContext,0)


        def ASSIGN(self):
            return self.getToken(CorundumParser.ASSIGN, 0)

        def id_global(self):
            return self.getTypedRuleContext(CorundumParser.Id_globalContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_global_get

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_get" ):
                listener.enterGlobal_get(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_get" ):
                listener.exitGlobal_get(self)




    def global_get(self):

        localctx = CorundumParser.Global_getContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_global_get)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            localctx.var_name = self.lvalue()
            self.state = 176
            localctx.op = self.match(CorundumParser.ASSIGN)
            self.state = 177
            localctx.global_name = self.id_global()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.global_name = None # Id_globalContext
            self.op = None # Token
            self.result = None # All_resultContext

        def id_global(self):
            return self.getTypedRuleContext(CorundumParser.Id_globalContext,0)


        def ASSIGN(self):
            return self.getToken(CorundumParser.ASSIGN, 0)

        def all_result(self):
            return self.getTypedRuleContext(CorundumParser.All_resultContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_global_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_set" ):
                listener.enterGlobal_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_set" ):
                listener.exitGlobal_set(self)




    def global_set(self):

        localctx = CorundumParser.Global_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_global_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            localctx.global_name = self.id_global()
            self.state = 180
            localctx.op = self.match(CorundumParser.ASSIGN)
            self.state = 181
            localctx.result = self.all_result()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_resultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_global(self):
            return self.getTypedRuleContext(CorundumParser.Id_globalContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_global_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_result" ):
                listener.enterGlobal_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_result" ):
                listener.exitGlobal_result(self)




    def global_result(self):

        localctx = CorundumParser.Global_resultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_global_result)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self.id_global()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_inline_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_call(self):
            return self.getTypedRuleContext(CorundumParser.Function_callContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_inline_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_inline_call" ):
                listener.enterFunction_inline_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_inline_call" ):
                listener.exitFunction_inline_call(self)




    def function_inline_call(self):

        localctx = CorundumParser.Function_inline_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_function_inline_call)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self.function_call()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Require_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRE(self):
            return self.getToken(CorundumParser.REQUIRE, 0)

        def literal_t(self):
            return self.getTypedRuleContext(CorundumParser.Literal_tContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_require_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequire_block" ):
                listener.enterRequire_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequire_block" ):
                listener.exitRequire_block(self)




    def require_block(self):

        localctx = CorundumParser.Require_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_require_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.match(CorundumParser.REQUIRE)
            self.state = 188
            self.literal_t()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pir_inlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIR(self):
            return self.getToken(CorundumParser.PIR, 0)

        def crlf(self):
            return self.getTypedRuleContext(CorundumParser.CrlfContext,0)


        def pir_expression_list(self):
            return self.getTypedRuleContext(CorundumParser.Pir_expression_listContext,0)


        def END(self):
            return self.getToken(CorundumParser.END, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_pir_inline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPir_inline" ):
                listener.enterPir_inline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPir_inline" ):
                listener.exitPir_inline(self)




    def pir_inline(self):

        localctx = CorundumParser.Pir_inlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_pir_inline)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.match(CorundumParser.PIR)
            self.state = 191
            self.crlf()
            self.state = 192
            self.pir_expression_list()
            self.state = 193
            self.match(CorundumParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pir_expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(CorundumParser.Expression_listContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_pir_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPir_expression_list" ):
                listener.enterPir_expression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPir_expression_list" ):
                listener.exitPir_expression_list(self)




    def pir_expression_list(self):

        localctx = CorundumParser.Pir_expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_pir_expression_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.expression_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_definition_header(self):
            return self.getTypedRuleContext(CorundumParser.Function_definition_headerContext,0)


        def function_definition_body(self):
            return self.getTypedRuleContext(CorundumParser.Function_definition_bodyContext,0)


        def END(self):
            return self.getToken(CorundumParser.END, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_function_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_definition" ):
                listener.enterFunction_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_definition" ):
                listener.exitFunction_definition(self)




    def function_definition(self):

        localctx = CorundumParser.Function_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_function_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.function_definition_header()
            self.state = 198
            self.function_definition_body()
            self.state = 199
            self.match(CorundumParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_definition_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(CorundumParser.Expression_listContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_definition_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_definition_body" ):
                listener.enterFunction_definition_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_definition_body" ):
                listener.exitFunction_definition_body(self)




    def function_definition_body(self):

        localctx = CorundumParser.Function_definition_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_function_definition_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.expression_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_definition_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(CorundumParser.DEF, 0)

        def function_name(self):
            return self.getTypedRuleContext(CorundumParser.Function_nameContext,0)


        def crlf(self):
            return self.getTypedRuleContext(CorundumParser.CrlfContext,0)


        def function_definition_params(self):
            return self.getTypedRuleContext(CorundumParser.Function_definition_paramsContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_definition_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_definition_header" ):
                listener.enterFunction_definition_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_definition_header" ):
                listener.exitFunction_definition_header(self)




    def function_definition_header(self):

        localctx = CorundumParser.Function_definition_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_function_definition_header)
        try:
            self.state = 212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 203
                self.match(CorundumParser.DEF)
                self.state = 204
                self.function_name()
                self.state = 205
                self.crlf()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 207
                self.match(CorundumParser.DEF)
                self.state = 208
                self.function_name()
                self.state = 209
                self.function_definition_params()
                self.state = 210
                self.crlf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_function(self):
            return self.getTypedRuleContext(CorundumParser.Id_functionContext,0)


        def id_(self):
            return self.getTypedRuleContext(CorundumParser.Id_Context,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = CorundumParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_function_name)
        try:
            self.state = 216
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 214
                self.id_function()
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 215
                self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_definition_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_RBRACKET(self):
            return self.getToken(CorundumParser.LEFT_RBRACKET, 0)

        def RIGHT_RBRACKET(self):
            return self.getToken(CorundumParser.RIGHT_RBRACKET, 0)

        def function_definition_params_list(self):
            return self.getTypedRuleContext(CorundumParser.Function_definition_params_listContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_definition_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_definition_params" ):
                listener.enterFunction_definition_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_definition_params" ):
                listener.exitFunction_definition_params(self)




    def function_definition_params(self):

        localctx = CorundumParser.Function_definition_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_function_definition_params)
        try:
            self.state = 225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 218
                self.match(CorundumParser.LEFT_RBRACKET)
                self.state = 219
                self.match(CorundumParser.RIGHT_RBRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 220
                self.match(CorundumParser.LEFT_RBRACKET)
                self.state = 221
                self.function_definition_params_list(0)
                self.state = 222
                self.match(CorundumParser.RIGHT_RBRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 224
                self.function_definition_params_list(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_definition_params_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_definition_param_id(self):
            return self.getTypedRuleContext(CorundumParser.Function_definition_param_idContext,0)


        def function_definition_params_list(self):
            return self.getTypedRuleContext(CorundumParser.Function_definition_params_listContext,0)


        def COMMA(self):
            return self.getToken(CorundumParser.COMMA, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_function_definition_params_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_definition_params_list" ):
                listener.enterFunction_definition_params_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_definition_params_list" ):
                listener.exitFunction_definition_params_list(self)



    def function_definition_params_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.Function_definition_params_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_function_definition_params_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.function_definition_param_id()
            self._ctx.stop = self._input.LT(-1)
            self.state = 235
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CorundumParser.Function_definition_params_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_function_definition_params_list)
                    self.state = 230
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 231
                    self.match(CorundumParser.COMMA)
                    self.state = 232
                    self.function_definition_param_id() 
                self.state = 237
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Function_definition_param_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(CorundumParser.Id_Context,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_definition_param_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_definition_param_id" ):
                listener.enterFunction_definition_param_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_definition_param_id" ):
                listener.exitFunction_definition_param_id(self)




    def function_definition_param_id(self):

        localctx = CorundumParser.Function_definition_param_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_function_definition_param_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CorundumParser.RETURN, 0)

        def all_result(self):
            return self.getTypedRuleContext(CorundumParser.All_resultContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = CorundumParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_return_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(CorundumParser.RETURN)
            self.state = 241
            self.all_result()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Function_nameContext
            self.params = None # Function_call_param_listContext

        def LEFT_RBRACKET(self):
            return self.getToken(CorundumParser.LEFT_RBRACKET, 0)

        def RIGHT_RBRACKET(self):
            return self.getToken(CorundumParser.RIGHT_RBRACKET, 0)

        def function_name(self):
            return self.getTypedRuleContext(CorundumParser.Function_nameContext,0)


        def function_call_param_list(self):
            return self.getTypedRuleContext(CorundumParser.Function_call_param_listContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = CorundumParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_function_call)
        try:
            self.state = 255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                localctx.name = self.function_name()
                self.state = 244
                self.match(CorundumParser.LEFT_RBRACKET)
                self.state = 245
                localctx.params = self.function_call_param_list()
                self.state = 246
                self.match(CorundumParser.RIGHT_RBRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 248
                localctx.name = self.function_name()
                self.state = 249
                localctx.params = self.function_call_param_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 251
                localctx.name = self.function_name()
                self.state = 252
                self.match(CorundumParser.LEFT_RBRACKET)
                self.state = 253
                self.match(CorundumParser.RIGHT_RBRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_call_params(self):
            return self.getTypedRuleContext(CorundumParser.Function_call_paramsContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_call_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_param_list" ):
                listener.enterFunction_call_param_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_param_list" ):
                listener.exitFunction_call_param_list(self)




    def function_call_param_list(self):

        localctx = CorundumParser.Function_call_param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_function_call_param_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.function_call_params(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_param(self):
            return self.getTypedRuleContext(CorundumParser.Function_paramContext,0)


        def function_call_params(self):
            return self.getTypedRuleContext(CorundumParser.Function_call_paramsContext,0)


        def COMMA(self):
            return self.getToken(CorundumParser.COMMA, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_function_call_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_params" ):
                listener.enterFunction_call_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_params" ):
                listener.exitFunction_call_params(self)



    def function_call_params(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.Function_call_paramsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_function_call_params, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.function_param()
            self._ctx.stop = self._input.LT(-1)
            self.state = 267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CorundumParser.Function_call_paramsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_function_call_params)
                    self.state = 262
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 263
                    self.match(CorundumParser.COMMA)
                    self.state = 264
                    self.function_param() 
                self.state = 269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Function_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_unnamed_param(self):
            return self.getTypedRuleContext(CorundumParser.Function_unnamed_paramContext,0)


        def function_named_param(self):
            return self.getTypedRuleContext(CorundumParser.Function_named_paramContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_param" ):
                listener.enterFunction_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_param" ):
                listener.exitFunction_param(self)




    def function_param(self):

        localctx = CorundumParser.Function_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_function_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 270
                self.function_unnamed_param()
                pass

            elif la_ == 2:
                self.state = 271
                self.function_named_param()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_unnamed_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_result(self):
            return self.getTypedRuleContext(CorundumParser.Int_resultContext,0)


        def float_result(self):
            return self.getTypedRuleContext(CorundumParser.Float_resultContext,0)


        def string_result(self):
            return self.getTypedRuleContext(CorundumParser.String_resultContext,0)


        def dynamic_result(self):
            return self.getTypedRuleContext(CorundumParser.Dynamic_resultContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_unnamed_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_unnamed_param" ):
                listener.enterFunction_unnamed_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_unnamed_param" ):
                listener.exitFunction_unnamed_param(self)




    def function_unnamed_param(self):

        localctx = CorundumParser.Function_unnamed_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_function_unnamed_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 274
                self.int_result(0)
                pass

            elif la_ == 2:
                self.state = 275
                self.float_result(0)
                pass

            elif la_ == 3:
                self.state = 276
                self.string_result(0)
                pass

            elif la_ == 4:
                self.state = 277
                self.dynamic_result(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_named_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def id_(self):
            return self.getTypedRuleContext(CorundumParser.Id_Context,0)


        def ASSIGN(self):
            return self.getToken(CorundumParser.ASSIGN, 0)

        def int_result(self):
            return self.getTypedRuleContext(CorundumParser.Int_resultContext,0)


        def float_result(self):
            return self.getTypedRuleContext(CorundumParser.Float_resultContext,0)


        def string_result(self):
            return self.getTypedRuleContext(CorundumParser.String_resultContext,0)


        def dynamic_result(self):
            return self.getTypedRuleContext(CorundumParser.Dynamic_resultContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_named_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_named_param" ):
                listener.enterFunction_named_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_named_param" ):
                listener.exitFunction_named_param(self)




    def function_named_param(self):

        localctx = CorundumParser.Function_named_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_function_named_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.id_()
            self.state = 281
            localctx.op = self.match(CorundumParser.ASSIGN)
            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 282
                self.int_result(0)
                pass

            elif la_ == 2:
                self.state = 283
                self.float_result(0)
                pass

            elif la_ == 3:
                self.state = 284
                self.string_result(0)
                pass

            elif la_ == 4:
                self.state = 285
                self.dynamic_result(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_call(self):
            return self.getTypedRuleContext(CorundumParser.Function_callContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_function_call_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_assignment" ):
                listener.enterFunction_call_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_assignment" ):
                listener.exitFunction_call_assignment(self)




    def function_call_assignment(self):

        localctx = CorundumParser.Function_call_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_function_call_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.function_call()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_resultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_result(self):
            return self.getTypedRuleContext(CorundumParser.Int_resultContext,0)


        def float_result(self):
            return self.getTypedRuleContext(CorundumParser.Float_resultContext,0)


        def string_result(self):
            return self.getTypedRuleContext(CorundumParser.String_resultContext,0)


        def dynamic_result(self):
            return self.getTypedRuleContext(CorundumParser.Dynamic_resultContext,0)


        def global_result(self):
            return self.getTypedRuleContext(CorundumParser.Global_resultContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_all_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_result" ):
                listener.enterAll_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_result" ):
                listener.exitAll_result(self)




    def all_result(self):

        localctx = CorundumParser.All_resultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_all_result)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 290
                self.int_result(0)
                pass

            elif la_ == 2:
                self.state = 291
                self.float_result(0)
                pass

            elif la_ == 3:
                self.state = 292
                self.string_result(0)
                pass

            elif la_ == 4:
                self.state = 293
                self.dynamic_result(0)
                pass

            elif la_ == 5:
                self.state = 294
                self.global_result()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elsif_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_elsif_statement(self):
            return self.getTypedRuleContext(CorundumParser.If_elsif_statementContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_elsif_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElsif_statement" ):
                listener.enterElsif_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElsif_statement" ):
                listener.exitElsif_statement(self)




    def elsif_statement(self):

        localctx = CorundumParser.Elsif_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_elsif_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.if_elsif_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_elsif_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSIF(self):
            return self.getToken(CorundumParser.ELSIF, 0)

        def cond_expression(self):
            return self.getTypedRuleContext(CorundumParser.Cond_expressionContext,0)


        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.CrlfContext)
            else:
                return self.getTypedRuleContext(CorundumParser.CrlfContext,i)


        def statement_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.Statement_bodyContext)
            else:
                return self.getTypedRuleContext(CorundumParser.Statement_bodyContext,i)


        def else_token(self):
            return self.getTypedRuleContext(CorundumParser.Else_tokenContext,0)


        def if_elsif_statement(self):
            return self.getTypedRuleContext(CorundumParser.If_elsif_statementContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_if_elsif_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_elsif_statement" ):
                listener.enterIf_elsif_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_elsif_statement" ):
                listener.exitIf_elsif_statement(self)




    def if_elsif_statement(self):

        localctx = CorundumParser.If_elsif_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_if_elsif_statement)
        try:
            self.state = 318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 299
                self.match(CorundumParser.ELSIF)
                self.state = 300
                self.cond_expression()
                self.state = 301
                self.crlf()
                self.state = 302
                self.statement_body()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 304
                self.match(CorundumParser.ELSIF)
                self.state = 305
                self.cond_expression()
                self.state = 306
                self.crlf()
                self.state = 307
                self.statement_body()
                self.state = 308
                self.else_token()
                self.state = 309
                self.crlf()
                self.state = 310
                self.statement_body()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 312
                self.match(CorundumParser.ELSIF)
                self.state = 313
                self.cond_expression()
                self.state = 314
                self.crlf()
                self.state = 315
                self.statement_body()
                self.state = 316
                self.if_elsif_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(CorundumParser.IF, 0)

        def cond_expression(self):
            return self.getTypedRuleContext(CorundumParser.Cond_expressionContext,0)


        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.CrlfContext)
            else:
                return self.getTypedRuleContext(CorundumParser.CrlfContext,i)


        def statement_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.Statement_bodyContext)
            else:
                return self.getTypedRuleContext(CorundumParser.Statement_bodyContext,i)


        def END(self):
            return self.getToken(CorundumParser.END, 0)

        def else_token(self):
            return self.getTypedRuleContext(CorundumParser.Else_tokenContext,0)


        def elsif_statement(self):
            return self.getTypedRuleContext(CorundumParser.Elsif_statementContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = CorundumParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_if_statement)
        try:
            self.state = 342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.match(CorundumParser.IF)
                self.state = 321
                self.cond_expression()
                self.state = 322
                self.crlf()
                self.state = 323
                self.statement_body()
                self.state = 324
                self.match(CorundumParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 326
                self.match(CorundumParser.IF)
                self.state = 327
                self.cond_expression()
                self.state = 328
                self.crlf()
                self.state = 329
                self.statement_body()
                self.state = 330
                self.else_token()
                self.state = 331
                self.crlf()
                self.state = 332
                self.statement_body()
                self.state = 333
                self.match(CorundumParser.END)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 335
                self.match(CorundumParser.IF)
                self.state = 336
                self.cond_expression()
                self.state = 337
                self.crlf()
                self.state = 338
                self.statement_body()
                self.state = 339
                self.elsif_statement()
                self.state = 340
                self.match(CorundumParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unless_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLESS(self):
            return self.getToken(CorundumParser.UNLESS, 0)

        def cond_expression(self):
            return self.getTypedRuleContext(CorundumParser.Cond_expressionContext,0)


        def crlf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.CrlfContext)
            else:
                return self.getTypedRuleContext(CorundumParser.CrlfContext,i)


        def statement_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.Statement_bodyContext)
            else:
                return self.getTypedRuleContext(CorundumParser.Statement_bodyContext,i)


        def END(self):
            return self.getToken(CorundumParser.END, 0)

        def else_token(self):
            return self.getTypedRuleContext(CorundumParser.Else_tokenContext,0)


        def elsif_statement(self):
            return self.getTypedRuleContext(CorundumParser.Elsif_statementContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_unless_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnless_statement" ):
                listener.enterUnless_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnless_statement" ):
                listener.exitUnless_statement(self)




    def unless_statement(self):

        localctx = CorundumParser.Unless_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_unless_statement)
        try:
            self.state = 366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 344
                self.match(CorundumParser.UNLESS)
                self.state = 345
                self.cond_expression()
                self.state = 346
                self.crlf()
                self.state = 347
                self.statement_body()
                self.state = 348
                self.match(CorundumParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 350
                self.match(CorundumParser.UNLESS)
                self.state = 351
                self.cond_expression()
                self.state = 352
                self.crlf()
                self.state = 353
                self.statement_body()
                self.state = 354
                self.else_token()
                self.state = 355
                self.crlf()
                self.state = 356
                self.statement_body()
                self.state = 357
                self.match(CorundumParser.END)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 359
                self.match(CorundumParser.UNLESS)
                self.state = 360
                self.cond_expression()
                self.state = 361
                self.crlf()
                self.state = 362
                self.statement_body()
                self.state = 363
                self.elsif_statement()
                self.state = 364
                self.match(CorundumParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(CorundumParser.WHILE, 0)

        def cond_expression(self):
            return self.getTypedRuleContext(CorundumParser.Cond_expressionContext,0)


        def crlf(self):
            return self.getTypedRuleContext(CorundumParser.CrlfContext,0)


        def statement_body(self):
            return self.getTypedRuleContext(CorundumParser.Statement_bodyContext,0)


        def END(self):
            return self.getToken(CorundumParser.END, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = CorundumParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(CorundumParser.WHILE)
            self.state = 369
            self.cond_expression()
            self.state = 370
            self.crlf()
            self.state = 371
            self.statement_body()
            self.state = 372
            self.match(CorundumParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(CorundumParser.FOR, 0)

        def LEFT_RBRACKET(self):
            return self.getToken(CorundumParser.LEFT_RBRACKET, 0)

        def init_expression(self):
            return self.getTypedRuleContext(CorundumParser.Init_expressionContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(CorundumParser.SEMICOLON)
            else:
                return self.getToken(CorundumParser.SEMICOLON, i)

        def cond_expression(self):
            return self.getTypedRuleContext(CorundumParser.Cond_expressionContext,0)


        def loop_expression(self):
            return self.getTypedRuleContext(CorundumParser.Loop_expressionContext,0)


        def RIGHT_RBRACKET(self):
            return self.getToken(CorundumParser.RIGHT_RBRACKET, 0)

        def crlf(self):
            return self.getTypedRuleContext(CorundumParser.CrlfContext,0)


        def statement_body(self):
            return self.getTypedRuleContext(CorundumParser.Statement_bodyContext,0)


        def END(self):
            return self.getToken(CorundumParser.END, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_statement" ):
                listener.enterFor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_statement" ):
                listener.exitFor_statement(self)




    def for_statement(self):

        localctx = CorundumParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_for_statement)
        try:
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.match(CorundumParser.FOR)
                self.state = 375
                self.match(CorundumParser.LEFT_RBRACKET)
                self.state = 376
                self.init_expression()
                self.state = 377
                self.match(CorundumParser.SEMICOLON)
                self.state = 378
                self.cond_expression()
                self.state = 379
                self.match(CorundumParser.SEMICOLON)
                self.state = 380
                self.loop_expression()
                self.state = 381
                self.match(CorundumParser.RIGHT_RBRACKET)
                self.state = 382
                self.crlf()
                self.state = 383
                self.statement_body()
                self.state = 384
                self.match(CorundumParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 386
                self.match(CorundumParser.FOR)
                self.state = 387
                self.init_expression()
                self.state = 388
                self.match(CorundumParser.SEMICOLON)
                self.state = 389
                self.cond_expression()
                self.state = 390
                self.match(CorundumParser.SEMICOLON)
                self.state = 391
                self.loop_expression()
                self.state = 392
                self.crlf()
                self.state = 393
                self.statement_body()
                self.state = 394
                self.match(CorundumParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_init_list(self):
            return self.getTypedRuleContext(CorundumParser.For_init_listContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_init_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_expression" ):
                listener.enterInit_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_expression" ):
                listener.exitInit_expression(self)




    def init_expression(self):

        localctx = CorundumParser.Init_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_init_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.for_init_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_assignment(self):
            return self.getTypedRuleContext(CorundumParser.Int_assignmentContext,0)


        def float_assignment(self):
            return self.getTypedRuleContext(CorundumParser.Float_assignmentContext,0)


        def string_assignment(self):
            return self.getTypedRuleContext(CorundumParser.String_assignmentContext,0)


        def dynamic_assignment(self):
            return self.getTypedRuleContext(CorundumParser.Dynamic_assignmentContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_all_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_assignment" ):
                listener.enterAll_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_assignment" ):
                listener.exitAll_assignment(self)




    def all_assignment(self):

        localctx = CorundumParser.All_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_all_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 400
                self.int_assignment()
                pass

            elif la_ == 2:
                self.state = 401
                self.float_assignment()
                pass

            elif la_ == 3:
                self.state = 402
                self.string_assignment()
                pass

            elif la_ == 4:
                self.state = 403
                self.dynamic_assignment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_init_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_assignment(self):
            return self.getTypedRuleContext(CorundumParser.All_assignmentContext,0)


        def for_init_list(self):
            return self.getTypedRuleContext(CorundumParser.For_init_listContext,0)


        def COMMA(self):
            return self.getToken(CorundumParser.COMMA, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_for_init_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_init_list" ):
                listener.enterFor_init_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_init_list" ):
                listener.exitFor_init_list(self)



    def for_init_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.For_init_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_for_init_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.all_assignment()
            self._ctx.stop = self._input.LT(-1)
            self.state = 414
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CorundumParser.For_init_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_for_init_list)
                    self.state = 409
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 410
                    self.match(CorundumParser.COMMA)
                    self.state = 411
                    self.all_assignment() 
                self.state = 416
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Cond_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison_list(self):
            return self.getTypedRuleContext(CorundumParser.Comparison_listContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_cond_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond_expression" ):
                listener.enterCond_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond_expression" ):
                listener.exitCond_expression(self)




    def cond_expression(self):

        localctx = CorundumParser.Cond_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_cond_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.comparison_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_loop_list(self):
            return self.getTypedRuleContext(CorundumParser.For_loop_listContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_loop_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_expression" ):
                listener.enterLoop_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_expression" ):
                listener.exitLoop_expression(self)




    def loop_expression(self):

        localctx = CorundumParser.Loop_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_loop_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.for_loop_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_loop_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_assignment(self):
            return self.getTypedRuleContext(CorundumParser.All_assignmentContext,0)


        def for_loop_list(self):
            return self.getTypedRuleContext(CorundumParser.For_loop_listContext,0)


        def COMMA(self):
            return self.getToken(CorundumParser.COMMA, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_for_loop_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_loop_list" ):
                listener.enterFor_loop_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_loop_list" ):
                listener.exitFor_loop_list(self)



    def for_loop_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.For_loop_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_for_loop_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.all_assignment()
            self._ctx.stop = self._input.LT(-1)
            self.state = 429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CorundumParser.For_loop_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_for_loop_list)
                    self.state = 424
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 425
                    self.match(CorundumParser.COMMA)
                    self.state = 426
                    self.all_assignment() 
                self.state = 431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Statement_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_expression_list(self):
            return self.getTypedRuleContext(CorundumParser.Statement_expression_listContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_statement_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_body" ):
                listener.enterStatement_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_body" ):
                listener.exitStatement_body(self)




    def statement_body(self):

        localctx = CorundumParser.Statement_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_statement_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.statement_expression_list(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CorundumParser.ExpressionContext,0)


        def terminator(self):
            return self.getTypedRuleContext(CorundumParser.TerminatorContext,0)


        def RETRY(self):
            return self.getToken(CorundumParser.RETRY, 0)

        def break_expression(self):
            return self.getTypedRuleContext(CorundumParser.Break_expressionContext,0)


        def statement_expression_list(self):
            return self.getTypedRuleContext(CorundumParser.Statement_expression_listContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_statement_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_expression_list" ):
                listener.enterStatement_expression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_expression_list" ):
                listener.exitStatement_expression_list(self)



    def statement_expression_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.Statement_expression_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_statement_expression_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 5, 7, 8, 9, 10, 13, 14, 17, 18, 19, 42, 47, 48, 52, 56, 57, 58, 59, 60]:
                self.state = 435
                self.expression()
                self.state = 436
                self.terminator(0)
                pass
            elif token in [15]:
                self.state = 438
                self.match(CorundumParser.RETRY)
                self.state = 439
                self.terminator(0)
                pass
            elif token in [16]:
                self.state = 440
                self.break_expression()
                self.state = 441
                self.terminator(0)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 458
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 456
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                    if la_ == 1:
                        localctx = CorundumParser.Statement_expression_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_statement_expression_list)
                        self.state = 445
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 446
                        self.expression()
                        self.state = 447
                        self.terminator(0)
                        pass

                    elif la_ == 2:
                        localctx = CorundumParser.Statement_expression_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_statement_expression_list)
                        self.state = 449
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 450
                        self.match(CorundumParser.RETRY)
                        self.state = 451
                        self.terminator(0)
                        pass

                    elif la_ == 3:
                        localctx = CorundumParser.Statement_expression_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_statement_expression_list)
                        self.state = 452
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 453
                        self.break_expression()
                        self.state = 454
                        self.terminator(0)
                        pass

             
                self.state = 460
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.var_id = None # LvalueContext
            self.op = None # Token

        def rvalue(self):
            return self.getTypedRuleContext(CorundumParser.RvalueContext,0)


        def lvalue(self):
            return self.getTypedRuleContext(CorundumParser.LvalueContext,0)


        def ASSIGN(self):
            return self.getToken(CorundumParser.ASSIGN, 0)

        def PLUS_ASSIGN(self):
            return self.getToken(CorundumParser.PLUS_ASSIGN, 0)

        def MINUS_ASSIGN(self):
            return self.getToken(CorundumParser.MINUS_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(CorundumParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(CorundumParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(CorundumParser.MOD_ASSIGN, 0)

        def EXP_ASSIGN(self):
            return self.getToken(CorundumParser.EXP_ASSIGN, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = CorundumParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_assignment)
        self._la = 0 # Token type
        try:
            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                localctx.var_id = self.lvalue()
                self.state = 462
                localctx.op = self.match(CorundumParser.ASSIGN)
                self.state = 463
                self.rvalue(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 465
                localctx.var_id = self.lvalue()
                self.state = 466
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 541165879296) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 467
                self.rvalue(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamic_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.var_id = None # LvalueContext
            self.op = None # Token

        def dynamic_result(self):
            return self.getTypedRuleContext(CorundumParser.Dynamic_resultContext,0)


        def lvalue(self):
            return self.getTypedRuleContext(CorundumParser.LvalueContext,0)


        def ASSIGN(self):
            return self.getToken(CorundumParser.ASSIGN, 0)

        def PLUS_ASSIGN(self):
            return self.getToken(CorundumParser.PLUS_ASSIGN, 0)

        def MINUS_ASSIGN(self):
            return self.getToken(CorundumParser.MINUS_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(CorundumParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(CorundumParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(CorundumParser.MOD_ASSIGN, 0)

        def EXP_ASSIGN(self):
            return self.getToken(CorundumParser.EXP_ASSIGN, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_dynamic_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_assignment" ):
                listener.enterDynamic_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_assignment" ):
                listener.exitDynamic_assignment(self)




    def dynamic_assignment(self):

        localctx = CorundumParser.Dynamic_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dynamic_assignment)
        self._la = 0 # Token type
        try:
            self.state = 479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 471
                localctx.var_id = self.lvalue()
                self.state = 472
                localctx.op = self.match(CorundumParser.ASSIGN)
                self.state = 473
                self.dynamic_result(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                localctx.var_id = self.lvalue()
                self.state = 476
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 541165879296) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 477
                self.dynamic_result(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Int_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.var_id = None # LvalueContext
            self.op = None # Token

        def int_result(self):
            return self.getTypedRuleContext(CorundumParser.Int_resultContext,0)


        def lvalue(self):
            return self.getTypedRuleContext(CorundumParser.LvalueContext,0)


        def ASSIGN(self):
            return self.getToken(CorundumParser.ASSIGN, 0)

        def PLUS_ASSIGN(self):
            return self.getToken(CorundumParser.PLUS_ASSIGN, 0)

        def MINUS_ASSIGN(self):
            return self.getToken(CorundumParser.MINUS_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(CorundumParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(CorundumParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(CorundumParser.MOD_ASSIGN, 0)

        def EXP_ASSIGN(self):
            return self.getToken(CorundumParser.EXP_ASSIGN, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_int_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt_assignment" ):
                listener.enterInt_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt_assignment" ):
                listener.exitInt_assignment(self)




    def int_assignment(self):

        localctx = CorundumParser.Int_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_int_assignment)
        self._la = 0 # Token type
        try:
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 481
                localctx.var_id = self.lvalue()
                self.state = 482
                localctx.op = self.match(CorundumParser.ASSIGN)
                self.state = 483
                self.int_result(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                localctx.var_id = self.lvalue()
                self.state = 486
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 541165879296) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 487
                self.int_result(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.var_id = None # LvalueContext
            self.op = None # Token

        def float_result(self):
            return self.getTypedRuleContext(CorundumParser.Float_resultContext,0)


        def lvalue(self):
            return self.getTypedRuleContext(CorundumParser.LvalueContext,0)


        def ASSIGN(self):
            return self.getToken(CorundumParser.ASSIGN, 0)

        def PLUS_ASSIGN(self):
            return self.getToken(CorundumParser.PLUS_ASSIGN, 0)

        def MINUS_ASSIGN(self):
            return self.getToken(CorundumParser.MINUS_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(CorundumParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(CorundumParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(CorundumParser.MOD_ASSIGN, 0)

        def EXP_ASSIGN(self):
            return self.getToken(CorundumParser.EXP_ASSIGN, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_float_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_assignment" ):
                listener.enterFloat_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_assignment" ):
                listener.exitFloat_assignment(self)




    def float_assignment(self):

        localctx = CorundumParser.Float_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_float_assignment)
        self._la = 0 # Token type
        try:
            self.state = 499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 491
                localctx.var_id = self.lvalue()
                self.state = 492
                localctx.op = self.match(CorundumParser.ASSIGN)
                self.state = 493
                self.float_result(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                localctx.var_id = self.lvalue()
                self.state = 496
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 541165879296) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 497
                self.float_result(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.var_id = None # LvalueContext
            self.op = None # Token

        def string_result(self):
            return self.getTypedRuleContext(CorundumParser.String_resultContext,0)


        def lvalue(self):
            return self.getTypedRuleContext(CorundumParser.LvalueContext,0)


        def ASSIGN(self):
            return self.getToken(CorundumParser.ASSIGN, 0)

        def PLUS_ASSIGN(self):
            return self.getToken(CorundumParser.PLUS_ASSIGN, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_string_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_assignment" ):
                listener.enterString_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_assignment" ):
                listener.exitString_assignment(self)




    def string_assignment(self):

        localctx = CorundumParser.String_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_string_assignment)
        try:
            self.state = 509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                localctx.var_id = self.lvalue()
                self.state = 502
                localctx.op = self.match(CorundumParser.ASSIGN)
                self.state = 503
                self.string_result(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                localctx.var_id = self.lvalue()
                self.state = 506
                localctx.op = self.match(CorundumParser.PLUS_ASSIGN)
                self.state = 507
                self.string_result(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initial_array_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.var_id = None # LvalueContext
            self.op = None # Token

        def LEFT_SBRACKET(self):
            return self.getToken(CorundumParser.LEFT_SBRACKET, 0)

        def RIGHT_SBRACKET(self):
            return self.getToken(CorundumParser.RIGHT_SBRACKET, 0)

        def lvalue(self):
            return self.getTypedRuleContext(CorundumParser.LvalueContext,0)


        def ASSIGN(self):
            return self.getToken(CorundumParser.ASSIGN, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_initial_array_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial_array_assignment" ):
                listener.enterInitial_array_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial_array_assignment" ):
                listener.exitInitial_array_assignment(self)




    def initial_array_assignment(self):

        localctx = CorundumParser.Initial_array_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_initial_array_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            localctx.var_id = self.lvalue()
            self.state = 512
            localctx.op = self.match(CorundumParser.ASSIGN)
            self.state = 513
            self.match(CorundumParser.LEFT_SBRACKET)
            self.state = 514
            self.match(CorundumParser.RIGHT_SBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arr_def = None # Array_selectorContext
            self.op = None # Token
            self.arr_val = None # All_resultContext

        def array_selector(self):
            return self.getTypedRuleContext(CorundumParser.Array_selectorContext,0)


        def ASSIGN(self):
            return self.getToken(CorundumParser.ASSIGN, 0)

        def all_result(self):
            return self.getTypedRuleContext(CorundumParser.All_resultContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_array_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_assignment" ):
                listener.enterArray_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_assignment" ):
                listener.exitArray_assignment(self)




    def array_assignment(self):

        localctx = CorundumParser.Array_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_array_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            localctx.arr_def = self.array_selector()
            self.state = 517
            localctx.op = self.match(CorundumParser.ASSIGN)
            self.state = 518
            localctx.arr_val = self.all_result()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_SBRACKET(self):
            return self.getToken(CorundumParser.LEFT_SBRACKET, 0)

        def array_definition_elements(self):
            return self.getTypedRuleContext(CorundumParser.Array_definition_elementsContext,0)


        def RIGHT_SBRACKET(self):
            return self.getToken(CorundumParser.RIGHT_SBRACKET, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_array_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_definition" ):
                listener.enterArray_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_definition" ):
                listener.exitArray_definition(self)




    def array_definition(self):

        localctx = CorundumParser.Array_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_array_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(CorundumParser.LEFT_SBRACKET)
            self.state = 521
            self.array_definition_elements(0)
            self.state = 522
            self.match(CorundumParser.RIGHT_SBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_definition_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_result(self):
            return self.getTypedRuleContext(CorundumParser.Int_resultContext,0)


        def dynamic_result(self):
            return self.getTypedRuleContext(CorundumParser.Dynamic_resultContext,0)


        def array_definition_elements(self):
            return self.getTypedRuleContext(CorundumParser.Array_definition_elementsContext,0)


        def COMMA(self):
            return self.getToken(CorundumParser.COMMA, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_array_definition_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_definition_elements" ):
                listener.enterArray_definition_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_definition_elements" ):
                listener.exitArray_definition_elements(self)



    def array_definition_elements(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.Array_definition_elementsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_array_definition_elements, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 525
                self.int_result(0)
                pass

            elif la_ == 2:
                self.state = 526
                self.dynamic_result(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 537
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CorundumParser.Array_definition_elementsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_array_definition_elements)
                    self.state = 529
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 530
                    self.match(CorundumParser.COMMA)
                    self.state = 533
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                    if la_ == 1:
                        self.state = 531
                        self.int_result(0)
                        pass

                    elif la_ == 2:
                        self.state = 532
                        self.dynamic_result(0)
                        pass

             
                self.state = 539
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Array_selectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(CorundumParser.Id_Context,0)


        def LEFT_SBRACKET(self):
            return self.getToken(CorundumParser.LEFT_SBRACKET, 0)

        def RIGHT_SBRACKET(self):
            return self.getToken(CorundumParser.RIGHT_SBRACKET, 0)

        def int_result(self):
            return self.getTypedRuleContext(CorundumParser.Int_resultContext,0)


        def dynamic_result(self):
            return self.getTypedRuleContext(CorundumParser.Dynamic_resultContext,0)


        def id_global(self):
            return self.getTypedRuleContext(CorundumParser.Id_globalContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_array_selector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_selector" ):
                listener.enterArray_selector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_selector" ):
                listener.exitArray_selector(self)




    def array_selector(self):

        localctx = CorundumParser.Array_selectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_array_selector)
        try:
            self.state = 556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self.id_()
                self.state = 541
                self.match(CorundumParser.LEFT_SBRACKET)
                self.state = 544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 542
                    self.int_result(0)
                    pass

                elif la_ == 2:
                    self.state = 543
                    self.dynamic_result(0)
                    pass


                self.state = 546
                self.match(CorundumParser.RIGHT_SBRACKET)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.id_global()
                self.state = 549
                self.match(CorundumParser.LEFT_SBRACKET)
                self.state = 552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 550
                    self.int_result(0)
                    pass

                elif la_ == 2:
                    self.state = 551
                    self.dynamic_result(0)
                    pass


                self.state = 554
                self.match(CorundumParser.RIGHT_SBRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamic_resultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def int_result(self):
            return self.getTypedRuleContext(CorundumParser.Int_resultContext,0)


        def dynamic_result(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.Dynamic_resultContext)
            else:
                return self.getTypedRuleContext(CorundumParser.Dynamic_resultContext,i)


        def MUL(self):
            return self.getToken(CorundumParser.MUL, 0)

        def DIV(self):
            return self.getToken(CorundumParser.DIV, 0)

        def MOD(self):
            return self.getToken(CorundumParser.MOD, 0)

        def float_result(self):
            return self.getTypedRuleContext(CorundumParser.Float_resultContext,0)


        def string_result(self):
            return self.getTypedRuleContext(CorundumParser.String_resultContext,0)


        def PLUS(self):
            return self.getToken(CorundumParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CorundumParser.MINUS, 0)

        def LEFT_RBRACKET(self):
            return self.getToken(CorundumParser.LEFT_RBRACKET, 0)

        def RIGHT_RBRACKET(self):
            return self.getToken(CorundumParser.RIGHT_RBRACKET, 0)

        def dynamic_(self):
            return self.getTypedRuleContext(CorundumParser.Dynamic_Context,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_dynamic_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_result" ):
                listener.enterDynamic_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_result" ):
                listener.exitDynamic_result(self)



    def dynamic_result(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.Dynamic_resultContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_dynamic_result, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 559
                self.int_result(0)
                self.state = 560
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 29360128) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 561
                self.dynamic_result(13)
                pass

            elif la_ == 2:
                self.state = 563
                self.float_result(0)
                self.state = 564
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 29360128) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 565
                self.dynamic_result(11)
                pass

            elif la_ == 3:
                self.state = 567
                self.string_result(0)
                self.state = 568
                localctx.op = self.match(CorundumParser.MUL)
                self.state = 569
                self.dynamic_result(8)
                pass

            elif la_ == 4:
                self.state = 571
                self.int_result(0)
                self.state = 572
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==20 or _la==21):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 573
                self.dynamic_result(6)
                pass

            elif la_ == 5:
                self.state = 575
                self.float_result(0)
                self.state = 576
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==20 or _la==21):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 577
                self.dynamic_result(4)
                pass

            elif la_ == 6:
                self.state = 579
                self.match(CorundumParser.LEFT_RBRACKET)
                self.state = 580
                self.dynamic_result(0)
                self.state = 581
                self.match(CorundumParser.RIGHT_RBRACKET)
                pass

            elif la_ == 7:
                self.state = 583
                self.dynamic_()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 609
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 607
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                    if la_ == 1:
                        localctx = CorundumParser.Dynamic_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_dynamic_result)
                        self.state = 586
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 587
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 29360128) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 588
                        self.dynamic_result(11)
                        pass

                    elif la_ == 2:
                        localctx = CorundumParser.Dynamic_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_dynamic_result)
                        self.state = 589
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 590
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==20 or _la==21):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 591
                        self.dynamic_result(4)
                        pass

                    elif la_ == 3:
                        localctx = CorundumParser.Dynamic_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_dynamic_result)
                        self.state = 592
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 593
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 29360128) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 594
                        self.int_result(0)
                        pass

                    elif la_ == 4:
                        localctx = CorundumParser.Dynamic_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_dynamic_result)
                        self.state = 595
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 596
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 29360128) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 597
                        self.float_result(0)
                        pass

                    elif la_ == 5:
                        localctx = CorundumParser.Dynamic_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_dynamic_result)
                        self.state = 598
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 599
                        localctx.op = self.match(CorundumParser.MUL)
                        self.state = 600
                        self.string_result(0)
                        pass

                    elif la_ == 6:
                        localctx = CorundumParser.Dynamic_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_dynamic_result)
                        self.state = 601
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 602
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==20 or _la==21):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 603
                        self.int_result(0)
                        pass

                    elif la_ == 7:
                        localctx = CorundumParser.Dynamic_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_dynamic_result)
                        self.state = 604
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 605
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==20 or _la==21):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 606
                        self.float_result(0)
                        pass

             
                self.state = 611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Dynamic_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(CorundumParser.Id_Context,0)


        def function_call_assignment(self):
            return self.getTypedRuleContext(CorundumParser.Function_call_assignmentContext,0)


        def array_selector(self):
            return self.getTypedRuleContext(CorundumParser.Array_selectorContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_dynamic_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_" ):
                listener.enterDynamic_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_" ):
                listener.exitDynamic_(self)




    def dynamic_(self):

        localctx = CorundumParser.Dynamic_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_dynamic_)
        try:
            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.function_call_assignment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 614
                self.array_selector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Int_resultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def LEFT_RBRACKET(self):
            return self.getToken(CorundumParser.LEFT_RBRACKET, 0)

        def int_result(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.Int_resultContext)
            else:
                return self.getTypedRuleContext(CorundumParser.Int_resultContext,i)


        def RIGHT_RBRACKET(self):
            return self.getToken(CorundumParser.RIGHT_RBRACKET, 0)

        def int_t(self):
            return self.getTypedRuleContext(CorundumParser.Int_tContext,0)


        def MUL(self):
            return self.getToken(CorundumParser.MUL, 0)

        def DIV(self):
            return self.getToken(CorundumParser.DIV, 0)

        def MOD(self):
            return self.getToken(CorundumParser.MOD, 0)

        def PLUS(self):
            return self.getToken(CorundumParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CorundumParser.MINUS, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_int_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt_result" ):
                listener.enterInt_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt_result" ):
                listener.exitInt_result(self)



    def int_result(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.Int_resultContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_int_result, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.state = 618
                self.match(CorundumParser.LEFT_RBRACKET)
                self.state = 619
                self.int_result(0)
                self.state = 620
                self.match(CorundumParser.RIGHT_RBRACKET)
                pass
            elif token in [56]:
                self.state = 622
                self.int_t()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 631
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                    if la_ == 1:
                        localctx = CorundumParser.Int_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_int_result)
                        self.state = 625
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 626
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 29360128) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 627
                        self.int_result(5)
                        pass

                    elif la_ == 2:
                        localctx = CorundumParser.Int_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_int_result)
                        self.state = 628
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 629
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==20 or _la==21):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 630
                        self.int_result(4)
                        pass

             
                self.state = 635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Float_resultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def int_result(self):
            return self.getTypedRuleContext(CorundumParser.Int_resultContext,0)


        def float_result(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.Float_resultContext)
            else:
                return self.getTypedRuleContext(CorundumParser.Float_resultContext,i)


        def MUL(self):
            return self.getToken(CorundumParser.MUL, 0)

        def DIV(self):
            return self.getToken(CorundumParser.DIV, 0)

        def MOD(self):
            return self.getToken(CorundumParser.MOD, 0)

        def PLUS(self):
            return self.getToken(CorundumParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CorundumParser.MINUS, 0)

        def LEFT_RBRACKET(self):
            return self.getToken(CorundumParser.LEFT_RBRACKET, 0)

        def RIGHT_RBRACKET(self):
            return self.getToken(CorundumParser.RIGHT_RBRACKET, 0)

        def float_t(self):
            return self.getTypedRuleContext(CorundumParser.Float_tContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_float_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_result" ):
                listener.enterFloat_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_result" ):
                listener.exitFloat_result(self)



    def float_result(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.Float_resultContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_float_result, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 637
                self.int_result(0)
                self.state = 638
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 29360128) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 639
                self.float_result(7)
                pass

            elif la_ == 2:
                self.state = 641
                self.int_result(0)
                self.state = 642
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==20 or _la==21):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 643
                self.float_result(4)
                pass

            elif la_ == 3:
                self.state = 645
                self.match(CorundumParser.LEFT_RBRACKET)
                self.state = 646
                self.float_result(0)
                self.state = 647
                self.match(CorundumParser.RIGHT_RBRACKET)
                pass

            elif la_ == 4:
                self.state = 649
                self.float_t()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 664
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                    if la_ == 1:
                        localctx = CorundumParser.Float_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_float_result)
                        self.state = 652
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 653
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 29360128) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 654
                        self.float_result(9)
                        pass

                    elif la_ == 2:
                        localctx = CorundumParser.Float_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_float_result)
                        self.state = 655
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 656
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==20 or _la==21):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 657
                        self.float_result(6)
                        pass

                    elif la_ == 3:
                        localctx = CorundumParser.Float_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_float_result)
                        self.state = 658
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 659
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 29360128) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 660
                        self.int_result(0)
                        pass

                    elif la_ == 4:
                        localctx = CorundumParser.Float_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_float_result)
                        self.state = 661
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 662
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==20 or _la==21):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 663
                        self.int_result(0)
                        pass

             
                self.state = 668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class String_resultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def int_result(self):
            return self.getTypedRuleContext(CorundumParser.Int_resultContext,0)


        def string_result(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.String_resultContext)
            else:
                return self.getTypedRuleContext(CorundumParser.String_resultContext,i)


        def MUL(self):
            return self.getToken(CorundumParser.MUL, 0)

        def literal_t(self):
            return self.getTypedRuleContext(CorundumParser.Literal_tContext,0)


        def PLUS(self):
            return self.getToken(CorundumParser.PLUS, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_string_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_result" ):
                listener.enterString_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_result" ):
                listener.exitString_result(self)



    def string_result(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.String_resultContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_string_result, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 56]:
                self.state = 670
                self.int_result(0)
                self.state = 671
                localctx.op = self.match(CorundumParser.MUL)
                self.state = 672
                self.string_result(3)
                pass
            elif token in [1]:
                self.state = 674
                self.literal_t()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 685
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 683
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                    if la_ == 1:
                        localctx = CorundumParser.String_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_string_result)
                        self.state = 677
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 678
                        localctx.op = self.match(CorundumParser.PLUS)
                        self.state = 679
                        self.string_result(3)
                        pass

                    elif la_ == 2:
                        localctx = CorundumParser.String_resultContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_string_result)
                        self.state = 680
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 681
                        localctx.op = self.match(CorundumParser.MUL)
                        self.state = 682
                        self.int_result(0)
                        pass

             
                self.state = 687
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Comparison_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.left = None # ComparisonContext
            self.op = None # Token
            self.right = None # Comparison_listContext

        def comparison(self):
            return self.getTypedRuleContext(CorundumParser.ComparisonContext,0)


        def BIT_AND(self):
            return self.getToken(CorundumParser.BIT_AND, 0)

        def comparison_list(self):
            return self.getTypedRuleContext(CorundumParser.Comparison_listContext,0)


        def AND(self):
            return self.getToken(CorundumParser.AND, 0)

        def BIT_OR(self):
            return self.getToken(CorundumParser.BIT_OR, 0)

        def OR(self):
            return self.getToken(CorundumParser.OR, 0)

        def LEFT_RBRACKET(self):
            return self.getToken(CorundumParser.LEFT_RBRACKET, 0)

        def RIGHT_RBRACKET(self):
            return self.getToken(CorundumParser.RIGHT_RBRACKET, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_comparison_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_list" ):
                listener.enterComparison_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_list" ):
                listener.exitComparison_list(self)




    def comparison_list(self):

        localctx = CorundumParser.Comparison_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_comparison_list)
        try:
            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                localctx.left = self.comparison()
                self.state = 689
                localctx.op = self.match(CorundumParser.BIT_AND)
                self.state = 690
                localctx.right = self.comparison_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 692
                localctx.left = self.comparison()
                self.state = 693
                localctx.op = self.match(CorundumParser.AND)
                self.state = 694
                localctx.right = self.comparison_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 696
                localctx.left = self.comparison()
                self.state = 697
                localctx.op = self.match(CorundumParser.BIT_OR)
                self.state = 698
                localctx.right = self.comparison_list()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 700
                localctx.left = self.comparison()
                self.state = 701
                localctx.op = self.match(CorundumParser.OR)
                self.state = 702
                localctx.right = self.comparison_list()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 704
                self.match(CorundumParser.LEFT_RBRACKET)
                self.state = 705
                self.comparison_list()
                self.state = 706
                self.match(CorundumParser.RIGHT_RBRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 708
                self.comparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.left = None # Comp_varContext
            self.op = None # Token
            self.right = None # Comp_varContext

        def comp_var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.Comp_varContext)
            else:
                return self.getTypedRuleContext(CorundumParser.Comp_varContext,i)


        def LESS(self):
            return self.getToken(CorundumParser.LESS, 0)

        def GREATER(self):
            return self.getToken(CorundumParser.GREATER, 0)

        def LESS_EQUAL(self):
            return self.getToken(CorundumParser.LESS_EQUAL, 0)

        def GREATER_EQUAL(self):
            return self.getToken(CorundumParser.GREATER_EQUAL, 0)

        def EQUAL(self):
            return self.getToken(CorundumParser.EQUAL, 0)

        def NOT_EQUAL(self):
            return self.getToken(CorundumParser.NOT_EQUAL, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = CorundumParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.state = 719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 711
                localctx.left = self.comp_var()
                self.state = 712
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4026531840) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 713
                localctx.right = self.comp_var()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 715
                localctx.left = self.comp_var()
                self.state = 716
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==26 or _la==27):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 717
                localctx.right = self.comp_var()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_varContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_result(self):
            return self.getTypedRuleContext(CorundumParser.All_resultContext,0)


        def array_selector(self):
            return self.getTypedRuleContext(CorundumParser.Array_selectorContext,0)


        def id_(self):
            return self.getTypedRuleContext(CorundumParser.Id_Context,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_comp_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_var" ):
                listener.enterComp_var(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_var" ):
                listener.exitComp_var(self)




    def comp_var(self):

        localctx = CorundumParser.Comp_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_comp_var)
        try:
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 721
                self.all_result()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 722
                self.array_selector()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 723
                self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvalueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(CorundumParser.Id_Context,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_lvalue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLvalue" ):
                listener.enterLvalue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLvalue" ):
                listener.exitLvalue(self)




    def lvalue(self):

        localctx = CorundumParser.LvalueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_lvalue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RvalueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lvalue(self):
            return self.getTypedRuleContext(CorundumParser.LvalueContext,0)


        def initial_array_assignment(self):
            return self.getTypedRuleContext(CorundumParser.Initial_array_assignmentContext,0)


        def array_assignment(self):
            return self.getTypedRuleContext(CorundumParser.Array_assignmentContext,0)


        def int_result(self):
            return self.getTypedRuleContext(CorundumParser.Int_resultContext,0)


        def float_result(self):
            return self.getTypedRuleContext(CorundumParser.Float_resultContext,0)


        def string_result(self):
            return self.getTypedRuleContext(CorundumParser.String_resultContext,0)


        def global_set(self):
            return self.getTypedRuleContext(CorundumParser.Global_setContext,0)


        def global_get(self):
            return self.getTypedRuleContext(CorundumParser.Global_getContext,0)


        def dynamic_assignment(self):
            return self.getTypedRuleContext(CorundumParser.Dynamic_assignmentContext,0)


        def string_assignment(self):
            return self.getTypedRuleContext(CorundumParser.String_assignmentContext,0)


        def float_assignment(self):
            return self.getTypedRuleContext(CorundumParser.Float_assignmentContext,0)


        def int_assignment(self):
            return self.getTypedRuleContext(CorundumParser.Int_assignmentContext,0)


        def assignment(self):
            return self.getTypedRuleContext(CorundumParser.AssignmentContext,0)


        def function_call(self):
            return self.getTypedRuleContext(CorundumParser.Function_callContext,0)


        def literal_t(self):
            return self.getTypedRuleContext(CorundumParser.Literal_tContext,0)


        def bool_t(self):
            return self.getTypedRuleContext(CorundumParser.Bool_tContext,0)


        def float_t(self):
            return self.getTypedRuleContext(CorundumParser.Float_tContext,0)


        def int_t(self):
            return self.getTypedRuleContext(CorundumParser.Int_tContext,0)


        def nil_t(self):
            return self.getTypedRuleContext(CorundumParser.Nil_tContext,0)


        def rvalue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CorundumParser.RvalueContext)
            else:
                return self.getTypedRuleContext(CorundumParser.RvalueContext,i)


        def NOT(self):
            return self.getToken(CorundumParser.NOT, 0)

        def BIT_NOT(self):
            return self.getToken(CorundumParser.BIT_NOT, 0)

        def LEFT_RBRACKET(self):
            return self.getToken(CorundumParser.LEFT_RBRACKET, 0)

        def RIGHT_RBRACKET(self):
            return self.getToken(CorundumParser.RIGHT_RBRACKET, 0)

        def EXP(self):
            return self.getToken(CorundumParser.EXP, 0)

        def MUL(self):
            return self.getToken(CorundumParser.MUL, 0)

        def DIV(self):
            return self.getToken(CorundumParser.DIV, 0)

        def MOD(self):
            return self.getToken(CorundumParser.MOD, 0)

        def PLUS(self):
            return self.getToken(CorundumParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(CorundumParser.MINUS, 0)

        def BIT_SHL(self):
            return self.getToken(CorundumParser.BIT_SHL, 0)

        def BIT_SHR(self):
            return self.getToken(CorundumParser.BIT_SHR, 0)

        def BIT_AND(self):
            return self.getToken(CorundumParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(CorundumParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(CorundumParser.BIT_XOR, 0)

        def LESS(self):
            return self.getToken(CorundumParser.LESS, 0)

        def GREATER(self):
            return self.getToken(CorundumParser.GREATER, 0)

        def LESS_EQUAL(self):
            return self.getToken(CorundumParser.LESS_EQUAL, 0)

        def GREATER_EQUAL(self):
            return self.getToken(CorundumParser.GREATER_EQUAL, 0)

        def EQUAL(self):
            return self.getToken(CorundumParser.EQUAL, 0)

        def NOT_EQUAL(self):
            return self.getToken(CorundumParser.NOT_EQUAL, 0)

        def OR(self):
            return self.getToken(CorundumParser.OR, 0)

        def AND(self):
            return self.getToken(CorundumParser.AND, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_rvalue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvalue" ):
                listener.enterRvalue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvalue" ):
                listener.exitRvalue(self)



    def rvalue(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.RvalueContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_rvalue, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 729
                self.lvalue()
                pass

            elif la_ == 2:
                self.state = 730
                self.initial_array_assignment()
                pass

            elif la_ == 3:
                self.state = 731
                self.array_assignment()
                pass

            elif la_ == 4:
                self.state = 732
                self.int_result(0)
                pass

            elif la_ == 5:
                self.state = 733
                self.float_result(0)
                pass

            elif la_ == 6:
                self.state = 734
                self.string_result(0)
                pass

            elif la_ == 7:
                self.state = 735
                self.global_set()
                pass

            elif la_ == 8:
                self.state = 736
                self.global_get()
                pass

            elif la_ == 9:
                self.state = 737
                self.dynamic_assignment()
                pass

            elif la_ == 10:
                self.state = 738
                self.string_assignment()
                pass

            elif la_ == 11:
                self.state = 739
                self.float_assignment()
                pass

            elif la_ == 12:
                self.state = 740
                self.int_assignment()
                pass

            elif la_ == 13:
                self.state = 741
                self.assignment()
                pass

            elif la_ == 14:
                self.state = 742
                self.function_call()
                pass

            elif la_ == 15:
                self.state = 743
                self.literal_t()
                pass

            elif la_ == 16:
                self.state = 744
                self.bool_t()
                pass

            elif la_ == 17:
                self.state = 745
                self.float_t()
                pass

            elif la_ == 18:
                self.state = 746
                self.int_t()
                pass

            elif la_ == 19:
                self.state = 747
                self.nil_t()
                pass

            elif la_ == 20:
                self.state = 748
                _la = self._input.LA(1)
                if not(_la==42 or _la==47):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 749
                self.rvalue(10)
                pass

            elif la_ == 21:
                self.state = 750
                self.match(CorundumParser.LEFT_RBRACKET)
                self.state = 751
                self.rvalue(0)
                self.state = 752
                self.match(CorundumParser.RIGHT_RBRACKET)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 785
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 783
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                    if la_ == 1:
                        localctx = CorundumParser.RvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rvalue)
                        self.state = 756
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 757
                        self.match(CorundumParser.EXP)
                        self.state = 758
                        self.rvalue(12)
                        pass

                    elif la_ == 2:
                        localctx = CorundumParser.RvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rvalue)
                        self.state = 759
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 760
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 29360128) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 761
                        self.rvalue(10)
                        pass

                    elif la_ == 3:
                        localctx = CorundumParser.RvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rvalue)
                        self.state = 762
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 763
                        _la = self._input.LA(1)
                        if not(_la==20 or _la==21):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 764
                        self.rvalue(9)
                        pass

                    elif la_ == 4:
                        localctx = CorundumParser.RvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rvalue)
                        self.state = 765
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 766
                        _la = self._input.LA(1)
                        if not(_la==43 or _la==44):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 767
                        self.rvalue(8)
                        pass

                    elif la_ == 5:
                        localctx = CorundumParser.RvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rvalue)
                        self.state = 768
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 769
                        self.match(CorundumParser.BIT_AND)
                        self.state = 770
                        self.rvalue(7)
                        pass

                    elif la_ == 6:
                        localctx = CorundumParser.RvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rvalue)
                        self.state = 771
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 772
                        _la = self._input.LA(1)
                        if not(_la==40 or _la==41):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 773
                        self.rvalue(6)
                        pass

                    elif la_ == 7:
                        localctx = CorundumParser.RvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rvalue)
                        self.state = 774
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 775
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4026531840) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 776
                        self.rvalue(5)
                        pass

                    elif la_ == 8:
                        localctx = CorundumParser.RvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rvalue)
                        self.state = 777
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 778
                        _la = self._input.LA(1)
                        if not(_la==26 or _la==27):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 779
                        self.rvalue(4)
                        pass

                    elif la_ == 9:
                        localctx = CorundumParser.RvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_rvalue)
                        self.state = 780
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 781
                        _la = self._input.LA(1)
                        if not(_la==45 or _la==46):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 782
                        self.rvalue(3)
                        pass

             
                self.state = 787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Break_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(CorundumParser.BREAK, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_break_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_expression" ):
                listener.enterBreak_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_expression" ):
                listener.exitBreak_expression(self)




    def break_expression(self):

        localctx = CorundumParser.Break_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_break_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(CorundumParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_tContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LITERAL(self):
            return self.getToken(CorundumParser.LITERAL, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_literal_t

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_t" ):
                listener.enterLiteral_t(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_t" ):
                listener.exitLiteral_t(self)




    def literal_t(self):

        localctx = CorundumParser.Literal_tContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_literal_t)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(CorundumParser.LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_tContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(CorundumParser.FLOAT, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_float_t

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_t" ):
                listener.enterFloat_t(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_t" ):
                listener.exitFloat_t(self)




    def float_t(self):

        localctx = CorundumParser.Float_tContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_float_t)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(CorundumParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Int_tContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(CorundumParser.INT, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_int_t

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt_t" ):
                listener.enterInt_t(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt_t" ):
                listener.exitInt_t(self)




    def int_t(self):

        localctx = CorundumParser.Int_tContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_int_t)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(CorundumParser.INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_tContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CorundumParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CorundumParser.FALSE, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_bool_t

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_t" ):
                listener.enterBool_t(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_t" ):
                listener.exitBool_t(self)




    def bool_t(self):

        localctx = CorundumParser.Bool_tContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_bool_t)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            _la = self._input.LA(1)
            if not(_la==18 or _la==19):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nil_tContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NIL(self):
            return self.getToken(CorundumParser.NIL, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_nil_t

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNil_t" ):
                listener.enterNil_t(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNil_t" ):
                listener.exitNil_t(self)




    def nil_t(self):

        localctx = CorundumParser.Nil_tContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_nil_t)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(CorundumParser.NIL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(CorundumParser.ID, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_id_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_" ):
                listener.enterId_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_" ):
                listener.exitId_(self)




    def id_(self):

        localctx = CorundumParser.Id_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_id_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(CorundumParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_globalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID_GLOBAL(self):
            return self.getToken(CorundumParser.ID_GLOBAL, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_id_global

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_global" ):
                listener.enterId_global(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_global" ):
                listener.exitId_global(self)




    def id_global(self):

        localctx = CorundumParser.Id_globalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_id_global)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(CorundumParser.ID_GLOBAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID_FUNCTION(self):
            return self.getToken(CorundumParser.ID_FUNCTION, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_id_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_function" ):
                listener.enterId_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_function" ):
                listener.exitId_function(self)




    def id_function(self):

        localctx = CorundumParser.Id_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_id_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(CorundumParser.ID_FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(CorundumParser.SEMICOLON, 0)

        def crlf(self):
            return self.getTypedRuleContext(CorundumParser.CrlfContext,0)


        def terminator(self):
            return self.getTypedRuleContext(CorundumParser.TerminatorContext,0)


        def getRuleIndex(self):
            return CorundumParser.RULE_terminator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminator" ):
                listener.enterTerminator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminator" ):
                listener.exitTerminator(self)



    def terminator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CorundumParser.TerminatorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 138
        self.enterRecursionRule(localctx, 138, self.RULE_terminator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.state = 807
                self.match(CorundumParser.SEMICOLON)
                pass
            elif token in [4]:
                self.state = 808
                self.crlf()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 817
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 815
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                    if la_ == 1:
                        localctx = CorundumParser.TerminatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_terminator)
                        self.state = 811
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 812
                        self.match(CorundumParser.SEMICOLON)
                        pass

                    elif la_ == 2:
                        localctx = CorundumParser.TerminatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_terminator)
                        self.state = 813
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 814
                        self.crlf()
                        pass

             
                self.state = 819
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Else_tokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(CorundumParser.ELSE, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_else_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_token" ):
                listener.enterElse_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_token" ):
                listener.exitElse_token(self)




    def else_token(self):

        localctx = CorundumParser.Else_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_else_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(CorundumParser.ELSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrlfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CRLF(self):
            return self.getToken(CorundumParser.CRLF, 0)

        def getRuleIndex(self):
            return CorundumParser.RULE_crlf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrlf" ):
                listener.enterCrlf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrlf" ):
                listener.exitCrlf(self)




    def crlf(self):

        localctx = CorundumParser.CrlfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_crlf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(CorundumParser.CRLF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[1] = self.expression_list_sempred
        self._predicates[15] = self.function_definition_params_list_sempred
        self._predicates[20] = self.function_call_params_sempred
        self._predicates[34] = self.for_init_list_sempred
        self._predicates[37] = self.for_loop_list_sempred
        self._predicates[39] = self.statement_expression_list_sempred
        self._predicates[48] = self.array_definition_elements_sempred
        self._predicates[50] = self.dynamic_result_sempred
        self._predicates[52] = self.int_result_sempred
        self._predicates[53] = self.float_result_sempred
        self._predicates[54] = self.string_result_sempred
        self._predicates[59] = self.rvalue_sempred
        self._predicates[69] = self.terminator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_list_sempred(self, localctx:Expression_listContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def function_definition_params_list_sempred(self, localctx:Function_definition_params_listContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def function_call_params_sempred(self, localctx:Function_call_paramsContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def for_init_list_sempred(self, localctx:For_init_listContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def for_loop_list_sempred(self, localctx:For_loop_listContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def statement_expression_list_sempred(self, localctx:Statement_expression_listContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def array_definition_elements_sempred(self, localctx:Array_definition_elementsContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def dynamic_result_sempred(self, localctx:Dynamic_resultContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 5)
         

    def int_result_sempred(self, localctx:Int_resultContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 3)
         

    def float_result_sempred(self, localctx:Float_resultContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 3)
         

    def string_result_sempred(self, localctx:String_resultContext, predIndex:int):
            if predIndex == 22:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 4)
         

    def rvalue_sempred(self, localctx:RvalueContext, predIndex:int):
            if predIndex == 24:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 2)
         

    def terminator_sempred(self, localctx:TerminatorContext, predIndex:int):
            if predIndex == 33:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 3)
         




